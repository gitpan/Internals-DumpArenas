
warning: not using untrusted file "/home/josh/.gdbinit"
0x004c7416 in __kernel_vsyscall ()
All defined functions:

File perlmain.c:
int main(int, char **, char **);
static void xs_init(void);

File op.c:
PADOFFSET Perl_allocmy(const char * const, const STRLEN, const U32);
void Perl_apply_attrs_string(const char *, CV *, const char *, STRLEN);
OP *Perl_bind_match(I32, OP *, OP *);
OP *Perl_block_end(I32, OP *);
int Perl_block_start(int);
void Perl_blockhook_register(BHK *);
OP *Perl_ck_anoncode(OP *);
OP *Perl_ck_bitop(OP *);
OP *Perl_ck_chdir(OP *);
OP *Perl_ck_concat(OP *);
OP *Perl_ck_defined(OP *);
OP *Perl_ck_delete(OP *);
OP *Perl_ck_die(OP *);
OP *Perl_ck_each(OP *);
OP *Perl_ck_entersub_args_list(OP *);
OP *Perl_ck_entersub_args_proto(OP *, GV *, SV *);
OP *Perl_ck_entersub_args_proto_or_list(OP *, GV *, SV *);
OP *Perl_ck_eof(OP *);
OP *Perl_ck_eval(OP *);
OP *Perl_ck_exec(OP *);
OP *Perl_ck_exists(OP *);
OP *Perl_ck_exit(OP *);
OP *Perl_ck_ftst(OP *);
OP *Perl_ck_fun(OP *);
OP *Perl_ck_glob(OP *);
OP *Perl_ck_grep(OP *);
OP *Perl_ck_index(OP *);
OP *Perl_ck_join(OP *);
OP *Perl_ck_lfun(OP *);
OP *Perl_ck_listiob(OP *);
OP *Perl_ck_match(OP *);
OP *Perl_ck_method(OP *);
OP *Perl_ck_null(OP *);
OP *Perl_ck_open(OP *);
OP *Perl_ck_readline(OP *);
OP *Perl_ck_repeat(OP *);
OP *Perl_ck_require(OP *);
OP *Perl_ck_return(OP *);
OP *Perl_ck_rfun(OP *);
OP *Perl_ck_rvconst(OP *);
OP *Perl_ck_sassign(OP *);
OP *Perl_ck_select(OP *);
OP *Perl_ck_shift(OP *);
OP *Perl_ck_smartmatch(OP *);
OP *Perl_ck_sort(OP *);
OP *Perl_ck_spair(OP *);
OP *Perl_ck_split(OP *);
OP *Perl_ck_subr(OP *);
OP *Perl_ck_substr(OP *);
OP *Perl_ck_svconst(OP *);
OP *Perl_ck_trunc(OP *);
OP *Perl_ck_unpack(OP *);
OP *Perl_convert(I32, I32, OP *);
void Perl_custom_op_register(Perl_ppaddr_t, const XOP *);
const XOP *Perl_custom_op_xop(const OP *);
void Perl_cv_ckproto_len(const CV *, const GV *, const char *, const STRLEN);
SV *Perl_cv_const_sv(const CV * const);
void Perl_cv_get_call_checker(CV *, Perl_call_checker *, SV **);
void Perl_cv_set_call_checker(CV *, Perl_call_checker, SV *);
OP *Perl_dofile(OP *, I32);
OP *Perl_doref(OP *, I32, char);
OP *Perl_invert(OP *);
OP *Perl_jmaybe(OP *);
OP *Perl_list(OP *);
void Perl_load_module(U32, SV *, SV *, ...);
OP *Perl_localize(OP *, I32);
OP *Perl_mod(OP *, I32);
OP *Perl_my_attrs(OP *, OP *);
OP *Perl_newANONATTRSUB(I32, OP *, OP *, OP *);
OP *Perl_newANONHASH(OP *);
OP *Perl_newANONLIST(OP *);
OP *Perl_newANONSUB(I32, OP *, OP *);
OP *Perl_newASSIGNOP(I32, OP *, I32, OP *);
CV *Perl_newATTRSUB(I32, OP *, OP *, OP *, OP *);
OP *Perl_newAVREF(OP *);
OP *Perl_newBINOP(I32, I32, OP *, OP *);
OP *Perl_newCONDOP(I32, OP *, OP *, OP *);
CV *Perl_newCONSTSUB(HV *, const char *, SV *);
OP *Perl_newCVREF(I32, OP *);
void Perl_newFORM(I32, OP *, OP *);
OP *Perl_newFOROP(I32, OP *, OP *, OP *, OP *);
OP *Perl_newGIVENOP(OP *, OP *, PADOFFSET);
OP *Perl_newGVOP(I32, I32, GV *);
OP *Perl_newGVREF(I32, OP *);
OP *Perl_newHVREF(OP *);
OP *Perl_newLISTOP(I32, I32, OP *, OP *);
OP *Perl_newLOGOP(I32, I32, OP *, OP *);
OP *Perl_newLOOPEX(I32, OP *);
OP *Perl_newLOOPOP(I32, I32, OP *, OP *);
void Perl_newMYSUB(I32, OP *, OP *, OP *, OP *);
OP *Perl_newNULLLIST(void);
OP *Perl_newOP(I32, I32);
OP *Perl_newPMOP(I32, I32);
void Perl_newPROG(OP *);
OP *Perl_newPVOP(I32, I32, char *);
OP *Perl_newRANGE(I32, OP *, OP *);
OP *Perl_newSLICEOP(I32, OP *, OP *);
OP *Perl_newSTATEOP(I32, char *, OP *);
OP *Perl_newSVOP(I32, I32, SV *);
OP *Perl_newSVREF(OP *);
OP *Perl_newUNOP(I32, I32, OP *);
OP *Perl_newWHENOP(OP *, OP *);
OP *Perl_newWHILEOP(I32, I32, LOOP *, OP *, OP *, OP *, I32);
CV *Perl_newXS(const char *, XSUBADDR_t, const char *);
CV *Perl_newXS_flags(const char *, XSUBADDR_t, const char * const, const char * const, U32);
OP *Perl_oopsAV(OP *);
OP *Perl_oopsHV(OP *);
OP *Perl_op_append_elem(I32, OP *, OP *);
OP *Perl_op_append_list(I32, OP *, OP *);
void Perl_op_clear(OP *);
SV *Perl_op_const_sv(const OP *, CV *);
OP *Perl_op_contextualize(OP *, I32);
void Perl_op_free(OP *);
OP *Perl_op_linklist(OP *);
OP *Perl_op_lvalue(OP *, I32);
void Perl_op_null(OP *);
OP *Perl_op_prepend_elem(I32, OP *, OP *);
void Perl_op_refcnt_lock(void);
void Perl_op_refcnt_unlock(void);
OP *Perl_op_scope(OP *);
void Perl_package(OP *);
void Perl_package_version(OP *);
void Perl_peep(OP *);
OP *Perl_pmruntime(OP *, OP *, char);
void Perl_rpeep(OP *);
CV *Perl_rv2cv_op_cv(OP *, U32);
OP *Perl_sawparens(OP *);
OP *Perl_scalar(OP *);
OP *Perl_scalarvoid(OP *);
void Perl_utilize(int, I32, OP *, OP *, OP *);
void Perl_vload_module(U32, SV *, SV *, va_list *);
static void S_apply_attrs(HV *, SV *, OP *, char);
static void S_bad_type(I32, const char *, const char *, const OP *);
static void S_cop_free(COP *);
static OP *S_dup_attrlist(OP *);
static void S_find_and_forget_pmops(OP *);
static OP *S_fold_constants(OP *);
static OP *S_force_list(OP *);
static void S_forget_pmop(PMOP * const);
static const char *S_gv_ename(GV *);
static OP *S_is_inplace_av(OP *, OP *);
static I32 S_is_list_assignment(const OP *);
static OP *S_listkids(OP *);
static char S_looks_like_bool(const OP *);
static OP *S_my_kid(OP *, OP *, OP **);
static OP *S_newDEFSVOP(void);
static OP *S_newGIVWHENOP(OP *, OP *, I32, I32, PADOFFSET);
static OP *S_new_logop(I32, I32, OP **, OP **);
static void S_no_bareword_allowed(const OP *);
static OP *S_no_fh_allowed(OP *);
static OP *S_opt_scalarhv(OP *);
static void S_process_special_blocks(const char * const, GV * const, CV * const);
static OP *S_ref_array_or_hash(OP *);
static char S_scalar_mod_type(const OP *, I32);
static OP *S_scalarboolean(OP *);
static OP *S_scalarseq(OP *);
static OP *S_search_const(OP *);
static OP *S_too_few_arguments(OP *, const char *);
static OP *S_too_many_arguments(OP *, const char *);
static void const_sv_xsub(CV *);
static int uvcompare(const void *, const void *);

File perl.c:
I32 Perl_call_argv(const char *, I32, char **);
void Perl_call_atexit(ATEXIT_t, void *);
void Perl_call_list(I32, AV *);
I32 Perl_call_method(const char *, I32);
I32 Perl_call_pv(const char *, I32);
I32 Perl_call_sv(SV *, volatile I32);
char Perl_doing_taint(int, char **, char **);
SV *Perl_eval_pv(const char *, I32);
I32 Perl_eval_sv(SV *, I32);
AV *Perl_get_av(const char *, I32);
CV *Perl_get_cv(const char *, I32);
CV *Perl_get_cvn_flags(const char *, STRLEN, I32);
int Perl_get_debug_opts(const char **, char);
HV *Perl_get_hv(const char *, I32);
SV *Perl_get_sv(const char *, I32);
void Perl_init_argv_symbols(int, char **);
void Perl_init_dbargs(void);
void Perl_init_debugger(void);
void Perl_init_stacks(void);
const char *Perl_moreswitches(const char *);
void Perl_my_exit(U32);
void Perl_my_failure_exit(void);
void Perl_my_unexec(void);
int Perl_nothreadhook(void);
void Perl_populate_isa(const char *, STRLEN, ...);
void Perl_require_pv(const char *);
void Perl_sys_init(int *, char ***);
void Perl_sys_init3(int *, char ***, char ***);
void Perl_sys_term(void);
PerlInterpreter *perl_alloc(void);
void perl_construct(PerlInterpreter *);
int perl_destruct(PerlInterpreter *);
void perl_free(PerlInterpreter *);
int perl_parse(PerlInterpreter *, XSINIT_t, int, char **, char **);
int perl_run(PerlInterpreter *);
static void S_Internals_V(CV *);
static void S_forbid_setid(const char, const char);
static void S_incpush(const char * const, STRLEN, U32);
static SV *S_incpush_if_exists(AV * const, SV *, SV * const);
static void S_incpush_use_sep(const char *, STRLEN, U32);
static void S_init_ids(void);
static void S_init_postdump_symbols(int, char **, char **);
static void S_init_predump_symbols(void);
static void S_my_exit_jump(void);
static int S_open_script(const char *, char, char *, PerlIO **);
static void *S_parse_body(char **, XSINIT_t);
static void S_procself_val(SV *, const char *);
static void S_set_caret_X(void);
static I32 read_e_script(int, SV *, int);

File gv.c:
int Perl_Gv_AMupdate(HV *, char);
SV *Perl_amagic_call(SV *, SV *, int, int);
SV *Perl_amagic_deref_call(SV *, int);
void Perl_cvgv_set(CV *, GV *);
void Perl_cvstash_set(CV *, HV *);
void Perl_gp_free(GV *);
GP *Perl_gp_ref(GP *);
GV *Perl_gv_add_by_type(GV *, svtype);
GV *Perl_gv_autoload4(HV *, const char *, STRLEN, I32);
void Perl_gv_check(const HV *);
SV *Perl_gv_const_sv(GV *);
void Perl_gv_efullname4(SV *, const GV *, const char *, char);
GV *Perl_gv_fetchfile(const char *);
GV *Perl_gv_fetchfile_flags(const char * const, const STRLEN, const U32);
GV *Perl_gv_fetchmeth(HV *, const char *, STRLEN, I32);
GV *Perl_gv_fetchmeth_autoload(HV *, const char *, STRLEN, I32);
GV *Perl_gv_fetchmethod_autoload(HV *, const char *, I32);
GV *Perl_gv_fetchmethod_flags(HV *, const char *, U32);
GV *Perl_gv_fetchpv(const char *, I32, const svtype);
GV *Perl_gv_fetchpvn_flags(const char *, STRLEN, I32, const svtype);
GV *Perl_gv_fetchsv(SV *, I32, const svtype);
void Perl_gv_fullname4(SV *, const GV *, const char *, char);
CV *Perl_gv_handler(HV *, I32);
void Perl_gv_init(GV *, HV *, const char *, STRLEN, int);
void Perl_gv_name_set(GV *, const char *, U32, U32);
HV *Perl_gv_stashpv(const char *, I32);
HV *Perl_gv_stashpvn(const char *, U32, I32);
HV *Perl_gv_stashsv(SV *, I32);
void Perl_gv_try_downgrade(GV *);
char Perl_is_gv_magical_sv(SV * const, U32);
int Perl_magic_freeovrld(SV *, MAGIC *);
GP *Perl_newGP(GV * const);
GV *Perl_newGVgen(const char *);
char Perl_try_amagic_bin(int, int);
char Perl_try_amagic_un(int, int);
static HV *S_gv_get_super_pkg(const char *, I32);
static void S_gv_init_sv(GV *, const svtype);
static void S_gv_magicalize_isa(GV *);
static void S_gv_magicalize_overload(GV *);
static HV *S_require_tie_mod(GV *, const char *, SV *, const U32, const char *);

File toke.c:
char Perl_feature_is_enabled(const char * const, STRLEN);
SV *Perl_filter_add(filter_t, SV *);
void Perl_filter_del(filter_t);
I32 Perl_filter_read(int, SV *, int);
int Perl_keyword_plugin_standard(char *, STRLEN, OP **);
char Perl_lex_bufutf8(void);
void Perl_lex_discard_to(char *);
char *Perl_lex_grow_linestr(STRLEN);
char Perl_lex_next_chunk(U32);
I32 Perl_lex_peek_unichar(U32);
void Perl_lex_read_space(U32);
void Perl_lex_read_to(char *);
I32 Perl_lex_read_unichar(U32);
void Perl_lex_start(SV *, PerlIO *, U32);
void Perl_lex_stuff_pv(const char *, U32);
void Perl_lex_stuff_pvn(const char *, STRLEN, U32);
void Perl_lex_stuff_sv(SV *, U32);
void Perl_lex_unstuff(char *);
void Perl_munge_qwlist_to_paren_list(OP *);
OP *Perl_parse_arithexpr(U32);
OP *Perl_parse_barestmt(U32);
OP *Perl_parse_block(U32);
OP *Perl_parse_fullexpr(U32);
OP *Perl_parse_fullstmt(U32);
SV *Perl_parse_label(U32);
OP *Perl_parse_listexpr(U32);
OP *Perl_parse_stmtseq(U32);
OP *Perl_parse_termexpr(U32);
void Perl_parser_free(const yy_parser *);
char *Perl_scan_num(const char *, YYSTYPE *);
char *Perl_scan_vstring(const char *, const char * const, SV *);
I32 Perl_start_subparse(I32, U32);
NV Perl_str_to_version(SV *);
int Perl_yyerror(const char * const);
int Perl_yylex(void);
void Perl_yyunlex(void);
static U8 *S_add_utf16_textfilter(U8 * const, char);
static void S_check_uni(void);
static void S_checkcomma(const char *, const char *, const char *);
static int S_deprecate_commaless_var_list(void);
static void S_force_ident(const char *, int);
static void S_force_next(I32);
static char *S_force_version(char *, int);
static char *S_force_word(char *, int, int, int, int);
static void S_incline(const char *);
static int S_intuit_method(char *, GV *, CV *);
static int S_intuit_more(char *);
static I32 S_lop(I32, int, char *);
static void S_missingterm(char *);
static SV *S_newSV_maybe_utf8(const char * const, STRLEN);
static SV *S_new_constant(const char *, STRLEN, const char *, STRLEN, SV *, SV *, const char *, STRLEN);
static void S_no_op(const char * const, char *);
static OP *S_parse_expr(I32, U32);
static OP *S_parse_recdescent_for_op(int, I32);
static char S_pmflag(const char * const, U32 *, char **, char *);
static void S_printbuf(const char * const, const char * const);
static void S_readpipe_override(void);
static char *S_scan_ident(char *, const char *, char *, STRLEN, I32);
static char *S_scan_pat(char *, I32);
static char *S_scan_str(char *, int, int);
static char *S_scan_trans(char *);
static char *S_scan_word(char *, char *, STRLEN, int, STRLEN *);
static char *S_skipspace(char *);
static I32 S_sublex_done(void);
static I32 S_sublex_start(void);
static char *S_tokenize_use(int, char *);
static SV *S_tokeq(SV *);
static int S_tokereport(I32, const YYSTYPE *);
static void S_update_debugger_info(SV *, const char * const, STRLEN);
static I32 S_utf16_textfilter(int, SV *, int);
static char S_word_takes_any_delimeter(char *, STRLEN);

File perly.c:
int Perl_yyparse(int);
static void S_clear_yystack(const yy_parser *);
static void yy_stack_print(const yy_parser *);
static void yysymprint(PerlIO * const, int, const YYSTYPE * const);

File pad.c:
CV *Perl_cv_clone(CV *);
void Perl_cv_undef(CV *);
void Perl_do_dump_pad(I32, PerlIO *, PADLIST *, int);
SV *Perl_find_rundefsv(void);
PADOFFSET Perl_find_rundefsvoffset(void);
U32 Perl_intro_my(void);
PADOFFSET Perl_pad_add_anon(SV *, U16);
PADOFFSET Perl_pad_add_name(const char *, const STRLEN, const U32, HV *, HV *);
PADOFFSET Perl_pad_alloc(I32, U32);
void Perl_pad_block_start(int);
HV *Perl_pad_compname_type(const PADOFFSET);
PADOFFSET Perl_pad_findmy(const char *, STRLEN, U32);
void Perl_pad_fixup_inner_anons(PADLIST *, CV *, CV *);
void Perl_pad_free(PADOFFSET);
void Perl_pad_leavemy(void);
PADLIST *Perl_pad_new(int);
void Perl_pad_push(PADLIST *, int);
void Perl_pad_setsv(PADOFFSET, SV *);
SV *Perl_pad_sv(PADOFFSET);
void Perl_pad_swipe(PADOFFSET, char);
void Perl_pad_tidy(padtidy_type);
static void S_cv_dump(const CV *, const char *);
static PADOFFSET S_pad_add_name_sv(SV *, const U32, HV *, HV *);
static PADOFFSET S_pad_findlex(const char *, const CV *, U32, int, SV **, SV **, int *);

File regcomp.c:
void Perl__append_range_to_invlist(HV * const, const UV, const UV);
HV *Perl__new_invlist(IV);
REGEXP *Perl_pregcomp(SV * const, const U32);
void Perl_pregfree(REGEXP *);
void Perl_pregfree2(REGEXP *);
REGEXP *Perl_re_compile(SV * const, U32);
SV *Perl_re_intuit_string(REGEXP * const);
SV *Perl_reg_named_buff(REGEXP * const, SV * const, SV * const, const U32);
SV *Perl_reg_named_buff_all(REGEXP * const, const U32);
char Perl_reg_named_buff_exists(REGEXP * const, SV * const, const U32);
SV *Perl_reg_named_buff_fetch(REGEXP * const, SV * const, const U32);
SV *Perl_reg_named_buff_firstkey(REGEXP * const, const U32);
SV *Perl_reg_named_buff_iter(REGEXP * const, const SV * const, const U32);
SV *Perl_reg_named_buff_nextkey(REGEXP * const, const U32);
SV *Perl_reg_named_buff_scalar(REGEXP * const, const U32);
void Perl_reg_numbered_buff_fetch(REGEXP * const, const I32, SV * const);
I32 Perl_reg_numbered_buff_length(REGEXP * const, const SV * const, const I32);
void Perl_reg_numbered_buff_store(REGEXP * const, const I32, const SV * const);
SV *Perl_reg_qr_package(REGEXP * const);
REGEXP *Perl_reg_temp_copy(REGEXP *, REGEXP *);
void Perl_regdump(const regexp *);
void Perl_regfree_internal(REGEXP * const);
void Perl_reginitcolors(void);
regnode *Perl_regnext(regnode *);
void Perl_regprop(const regexp *, SV *, const regnode *);
void Perl_save_re_context(void);
static void S_add_alternate(AV **, U8 *, STRLEN);
static U32 S_add_data(RExC_state_t *, U32, const char *);
static HV *S_add_range_to_invlist(HV *, const UV, const UV);
static void S_cl_and(struct regnode_charclass_class *, const struct regnode_charclass_class *);
static void S_cl_anything(const RExC_state_t *, struct regnode_charclass_class *);
static void S_cl_init(const RExC_state_t *, struct regnode_charclass_class *);
static int S_cl_is_anything(const struct regnode_charclass_class *);
static void S_cl_or(const RExC_state_t *, struct regnode_charclass_class *, const struct regnode_charclass_class *);
static const regnode *S_dumpuntil(const regexp *, const regnode *, const regnode *, const regnode *, const regnode *, SV *, I32, U32);

File dquote_static.c:
static char S_grok_bslash_c(const char, const char, const char);
static char S_grok_bslash_o(const char *, UV *, STRLEN *, const char **, const char);

File regcomp.c:
static void S_invlist_extend(HV * const, const UV);
static UV S_invlist_len(HV * const);
static UV S_invlist_max(HV * const);
static HV *S_invlist_union(HV * const, HV * const);
static I32 S_make_trie(RExC_state_t *, regnode *, regnode *, regnode *, regnode *, U32, U32, U32);
static char *S_nextchar(RExC_state_t *);
static void S_put_byte(SV *, int);
static void S_re_croak2(const char *, const char *, ...);
static regnode *S_reg(RExC_state_t *, I32, I32 *, U32);
static regnode *S_reg_namedseq(RExC_state_t *, UV *, I32 *, U32);
static regnode *S_reg_node(RExC_state_t *, U8);
static UV S_reg_recode(const char, SV **);
static SV *S_reg_scan_name(RExC_state_t *, U32);
static char S_reg_skipcomment(RExC_state_t *);
static regnode *S_reganode(RExC_state_t *, U8, U32);
static regnode *S_regbranch(RExC_state_t *, I32 *, I32, U32);
static regnode *S_regclass(RExC_state_t *, U32);

File dquote_static.c:
static I32 S_regcurly(const char *);

File regcomp.c:
static void S_reginsert(RExC_state_t *, U8, regnode *, U32);
static regnode *S_regpiece(RExC_state_t *, I32 *, U32);
static void S_regtail(RExC_state_t *, regnode *, const regnode *, U32);
static U8 S_regtail_study(RExC_state_t *, regnode *, const regnode *, U32);
static STRLEN S_reguni(const RExC_state_t *, UV, char *);
static char *S_regwhite(RExC_state_t *, char *);
static void S_scan_commit(const RExC_state_t *, scan_data_t *, I32 *, int);
static U8 S_set_regclass_bit(RExC_state_t *, regnode *, const U8, HV **, AV **);
static U8 S_set_regclass_bit_fold(RExC_state_t *, regnode *, const U8, HV **, AV **);
static I32 S_study_chunk(RExC_state_t *, regnode **, I32 *, I32 *, regnode *, scan_data_t *, I32, U8 *, U32, U32, struct regnode_charclass_class *);
static void clear_re(void *);

File dump.c:
I32 Perl_debop(const OP *);
void Perl_debprofdump(void);
void Perl_do_gv_dump(I32, PerlIO *, const char *, GV *);
void Perl_do_gvgv_dump(I32, PerlIO *, const char *, GV *);
void Perl_do_hv_dump(I32, PerlIO *, const char *, HV *);
void Perl_do_magic_dump(I32, PerlIO *, const MAGIC *, I32, I32, char, STRLEN);
void Perl_do_op_dump(I32, PerlIO *, const OP *);
void Perl_do_pmop_dump(I32, PerlIO *, const PMOP *);
void Perl_do_sv_dump(I32, PerlIO *, SV *, I32, I32, char, STRLEN);
void Perl_dump_all(void);
void Perl_dump_all_perl(char);
void Perl_dump_eval(void);
void Perl_dump_form(const GV *);
void Perl_dump_indent(I32, PerlIO *, const char *, ...);
void Perl_dump_packsubs(const HV *);
void Perl_dump_packsubs_perl(const HV *, char);
void Perl_dump_sub(const GV *);
void Perl_dump_sub_perl(const GV *, char);
void Perl_dump_vindent(I32, PerlIO *, const char *, va_list *);
void Perl_gv_dump(GV *);
void Perl_magic_dump(const MAGIC *);
void Perl_op_dump(const OP *);
void Perl_pmop_dump(PMOP *);
char *Perl_pv_display(SV *, const char *, STRLEN, STRLEN, STRLEN);
char *Perl_pv_escape(SV *, const char * const, const size_t, const size_t, STRLEN * const, const U32);
char *Perl_pv_pretty(SV *, const char * const, const size_t, const size_t, const char * const, const char * const, const U32);
int Perl_runops_debug(void);
void Perl_sv_dump(SV *);
char *Perl_sv_peek(SV *);
void Perl_watch(char **);
static void S_append_flags(SV *, U32, const struct flag_to_name *, const struct flag_to_name * const);
static void S_sequence(const OP *);
static UV S_sequence_num(const OP *);
static void S_sequence_tail(const OP *);

File util.c:
void Perl_atfork_lock(void);
void Perl_atfork_unlock(void);
void *Perl_calloc(size_t, size_t);
void Perl_ck_warner(U32, const char *, ...);
void Perl_ck_warner_d(U32, const char *, ...);
char Perl_ckwarn(U32);
char Perl_ckwarn_d(U32);
void Perl_croak(const char *, ...);
void Perl_croak_no_modify(void);
void Perl_croak_sv(SV *);
char *Perl_delimcpy(char *, const char *, const char *, const char *, int, I32 *);
OP *Perl_die(const char *, ...);
OP *Perl_die_sv(SV *);
void Perl_fbm_compile(SV *, U32);
char *Perl_fbm_instr(unsigned char *, unsigned char *, SV *, U32);
char *Perl_find_script(const char *, char, const char * const * const, I32);
I32 Perl_foldEQ(const char *, const char *, I32);
I32 Perl_foldEQ_latin1(const char *, const char *, I32);
I32 Perl_foldEQ_locale(const char *, const char *, I32);
char *Perl_form(const char *, ...);
void *Perl_get_context(void);
void Perl_get_db_sub(SV **, CV *);
UV Perl_get_hash_seed(void);
const char *Perl_get_no_modify(void);
char **Perl_get_op_descs(void);
char **Perl_get_op_names(void);
U32 *Perl_get_opargs(void);
PPADDR_t *Perl_get_ppaddr(void);
REGEXP *Perl_get_re_arg(SV *);
MGVTBL *Perl_get_vtbl(int);
int Perl_getcwd_sv(SV *);
char *Perl_getenv_len(const char *, long unsigned int *);
void Perl_init_tm(struct tm *);
char *Perl_instr(const char *, const char *);
void *Perl_malloc(size_t);
SV *Perl_mess(const char *, ...);
SV *Perl_mess_sv(SV *, char);
void Perl_mfree(void *);
void Perl_mini_mktime(struct tm *);
void Perl_my_clearenv(void);
int Perl_my_dirfd(DIR *);
I32 Perl_my_fflush_all(void);
pid_t Perl_my_fork(void);
I32 Perl_my_pclose(PerlIO *);
PerlIO *Perl_my_popen(const char *, const char *);
PerlIO *Perl_my_popen_list(const char *, int, SV **);
void Perl_my_setenv(const char *, const char *);
int Perl_my_snprintf(char *, const size_t, const char *, ...);
int Perl_my_socketpair(int, int, int, int *);
char *Perl_my_strftime(const char *, int, int, int, int, int, int, int, int, int);
size_t Perl_my_strlcat(char *, const char *, size_t);
size_t Perl_my_strlcpy(char *, const char *, size_t);
void Perl_my_swabn(void *, int);
int Perl_my_vsnprintf(char *, const size_t, const char *, va_list);
SV *Perl_new_version(SV *);
STRLEN *Perl_new_warnings_bitfield(STRLEN *, const char * const, STRLEN);
char *Perl_ninstr(const char *, const char *, const char *, const char *);
U32 Perl_parse_unicode_opts(const char **);
const char *Perl_prescan_version(const char *, char, const char **, char *, int *, int *, char *);
void *Perl_realloc(void *, size_t);
void Perl_repeatcpy(char *, const char *, I32, I32);
void Perl_report_evil_fh(const GV *);
void Perl_report_wrongway_fh(const GV *, const char);
char *Perl_rninstr(const char *, const char *, const char *, const char *);
Sighandler_t Perl_rsignal(int, Sighandler_t);
int Perl_rsignal_restore(int, Sigsave_t *);
int Perl_rsignal_save(int, Sighandler_t, Sigsave_t *);
Sighandler_t Perl_rsignal_state(int);
void *Perl_safesyscalloc(size_t, size_t);
void Perl_safesysfree(void *);
void *Perl_safesysmalloc(size_t);
void *Perl_safesysrealloc(void *, size_t);
char *Perl_savepv(const char *);
char *Perl_savepvn(const char *, I32);
char *Perl_savesharedpv(const char *);
char *Perl_savesharedpvn(const char * const, const STRLEN);
char *Perl_savesharedsvpv(SV *);
char *Perl_savesvpv(SV *);
const char *Perl_scan_version(const char *, SV *, char);
char *Perl_screaminstr(SV *, SV *, I32, I32, I32 *, I32);
U32 Perl_seed(void);
void Perl_set_context(void *);
char Perl_sv_destroyable(SV *);
void Perl_sv_nosharing(SV *);
SV *Perl_upg_version(SV *, char);
int Perl_vcmp(SV *, SV *);
void Perl_vcroak(const char *, va_list *);
char *Perl_vform(const char *, va_list *);
SV *Perl_vmess(const char *, va_list *);
SV *Perl_vnormal(SV *);
SV *Perl_vnumify(SV *);
SV *Perl_vstringify(SV *);
SV *Perl_vverify(SV *);
void Perl_vwarn(const char *, va_list *);
void Perl_vwarner(U32, const char *, va_list *);
I32 Perl_wait4pid(pid_t, int *, int);
void Perl_warn(const char *, ...);
void Perl_warn_sv(SV *);
void Perl_warner(U32, const char *, ...);
void Perl_write_to_stderr(SV *);
void Perl_xs_apiversion_bootcheck(SV *, const char *, STRLEN);
void Perl_xs_version_bootcheck(U32, U32, const char *, STRLEN);
static char S_ckwarn_common(U32);
static const COP *S_closest_cop(const COP *, const OP *);
static char S_invoke_exception_hook(SV *, char);
static SV *S_mess_alloc(void);
static SV *S_with_queued_errors(SV *);
static char *S_write_no_mem(void);

File mg.c:
void Perl_csighandler(int, siginfo_t *, void *);
void Perl_despatch_signals(void);
void Perl_emulate_cop_io(const COP * const, SV * const);
int Perl_magic_clear_all_env(SV *, MAGIC *);
int Perl_magic_clearenv(SV *, MAGIC *);
int Perl_magic_clearhint(SV *, MAGIC *);
int Perl_magic_clearhints(SV *, MAGIC *);
int Perl_magic_clearisa(SV *, MAGIC *);
int Perl_magic_clearpack(SV *, MAGIC *);
int Perl_magic_clearsig(SV *, MAGIC *);
int Perl_magic_existspack(SV *, const MAGIC *);
int Perl_magic_freearylen_p(SV *, MAGIC *);
int Perl_magic_get(SV *, MAGIC *);
int Perl_magic_getarylen(SV *, const MAGIC *);
int Perl_magic_getdefelem(SV *, MAGIC *);
int Perl_magic_getnkeys(SV *, MAGIC *);
int Perl_magic_getpack(SV *, MAGIC *);
int Perl_magic_getpos(SV *, MAGIC *);
int Perl_magic_getsig(SV *, MAGIC *);
int Perl_magic_getsubstr(SV *, MAGIC *);
int Perl_magic_gettaint(SV *, MAGIC *);
int Perl_magic_getuvar(SV *, MAGIC *);
int Perl_magic_getvec(SV *, MAGIC *);
int Perl_magic_killbackrefs(SV *, MAGIC *);
U32 Perl_magic_len(SV *, MAGIC *);
SV *Perl_magic_methcall(SV *, const MAGIC *, const char *, U32, U32, ...);
int Perl_magic_nextpack(SV *, MAGIC *, SV *);
U32 Perl_magic_regdata_cnt(SV *, MAGIC *);
int Perl_magic_regdatum_get(SV *, MAGIC *);
int Perl_magic_regdatum_set(SV *, MAGIC *);
SV *Perl_magic_scalarpack(HV *, MAGIC *);
int Perl_magic_set(SV *, MAGIC *);
int Perl_magic_set_all_env(SV *, MAGIC *);
int Perl_magic_setamagic(SV *, MAGIC *);
int Perl_magic_setarylen(SV *, MAGIC *);
int Perl_magic_setcollxfrm(SV *, MAGIC *);
int Perl_magic_setdbline(SV *, MAGIC *);
int Perl_magic_setdefelem(SV *, MAGIC *);
int Perl_magic_setenv(SV *, MAGIC *);
int Perl_magic_sethint(SV *, MAGIC *);
int Perl_magic_setisa(SV *, MAGIC *);
int Perl_magic_setmglob(SV *, MAGIC *);
int Perl_magic_setnkeys(SV *, MAGIC *);
int Perl_magic_setpack(SV *, MAGIC *);
int Perl_magic_setpos(SV *, MAGIC *);
int Perl_magic_setregexp(SV *, MAGIC *);
int Perl_magic_setsig(SV *, MAGIC *);
int Perl_magic_setsubstr(SV *, MAGIC *);
int Perl_magic_settaint(SV *, MAGIC *);
int Perl_magic_setutf8(SV *, MAGIC *);
int Perl_magic_setuvar(SV *, MAGIC *);
int Perl_magic_setvec(SV *, MAGIC *);
U32 Perl_magic_sizepack(SV *, MAGIC *);
int Perl_magic_wipepack(SV *, MAGIC *);
int Perl_mg_clear(SV *);
int Perl_mg_copy(SV *, SV *, const char *, I32);
MAGIC *Perl_mg_find(const SV *, int);
MAGIC *Perl_mg_findext(const SV *, int, const MGVTBL *);
int Perl_mg_free(SV *);
void Perl_mg_free_type(SV *, int);
int Perl_mg_get(SV *);
U32 Perl_mg_length(SV *);
void Perl_mg_localize(SV *, SV *, char);
void Perl_mg_magical(SV *);
int Perl_mg_set(SV *);
I32 Perl_mg_size(SV *);
void Perl_sighandler(int, siginfo_t *, void *);
void Perl_vivify_defelem(SV *);
I32 Perl_whichsig(const char *);
MAGIC *S_mg_findext_flags(const SV *, int, const MGVTBL *, U32);
static SV *S_magic_methcall1(SV *, const MAGIC *, const char *, U32, int, SV *);
static int S_magic_methpack(SV *, const MAGIC *, const char *);
static void S_mg_free_struct(SV *, MAGIC *);
static void S_restore_magic(const void *);
static void S_save_magic(I32, SV *);
static void S_unwind_handler_stack(const void *);
static void restore_sigmask(SV *);
static void unblock_sigmask(void *);

File mro.c:
void Perl_boot_core_mro(void);
const struct mro_alg *Perl_mro_get_from_name(SV *);
AV *Perl_mro_get_linear_isa(HV *);
SV *Perl_mro_get_private_data(struct mro_meta * const, const struct mro_alg * const);
void Perl_mro_isa_changed_in(HV *);
struct mro_meta *Perl_mro_meta_init(HV *);
void Perl_mro_method_changed_in(HV *);
void Perl_mro_package_moved(HV * const, HV * const, const GV * const, U32);
void Perl_mro_register(const struct mro_alg *);
void Perl_mro_set_mro(struct mro_meta * const, SV * const);
SV *Perl_mro_set_private_data(struct mro_meta * const, const struct mro_alg * const, SV * const);
void XS_mro_method_changed_in(CV *);
static void S_mro_clean_isarev(HV * const, const char * const, const STRLEN, HV * const);
static void S_mro_gather_and_rename(HV * const, HV * const, HV *, HV *, SV *);
static AV *S_mro_get_linear_isa_dfs(HV *, U32);

File keywords.c:
I32 Perl_keyword(const char *, I32, char);

File hv.c:
const char *Perl_fetch_cop_label(COP * const, STRLEN *, U32 *);
void Perl_free_tied_hv_pool(void);
void Perl_hv_assert(HV *);
AV **Perl_hv_backreferences_p(HV *);
void Perl_hv_clear(HV *);
void Perl_hv_clear_placeholders(HV *);
void *Perl_hv_common(HV *, SV *, const char *, STRLEN, int, int, SV *, U32);
void *Perl_hv_common_key_len(HV *, const char *, I32, const int, SV *, const U32);
HV *Perl_hv_copy_hints_hv(HV * const);
void Perl_hv_delayfree_ent(HV *, HE *);
HE **Perl_hv_eiter_p(HV *);
void Perl_hv_eiter_set(HV *, HE *);
void Perl_hv_ename_add(HV *, const char *, U32, U32);
void Perl_hv_ename_delete(HV *, const char *, U32, U32);
STRLEN Perl_hv_fill(const HV * const);
void Perl_hv_free_ent(HV *, HE *);
I32 Perl_hv_iterinit(HV *);
char *Perl_hv_iterkey(HE *, I32 *);
SV *Perl_hv_iterkeysv(HE *);
HE *Perl_hv_iternext_flags(HV *, I32);
SV *Perl_hv_iternextsv(HV *, char **, I32 *);
SV *Perl_hv_iterval(HV *, HE *);
void Perl_hv_kill_backrefs(HV *);
void Perl_hv_ksplit(HV *, IV);
void Perl_hv_name_set(HV *, const char *, U32, U32);
I32 Perl_hv_placeholders_get(const HV *);
I32 *Perl_hv_placeholders_p(HV *);
void Perl_hv_placeholders_set(HV *, I32);
I32 *Perl_hv_riter_p(HV *);
void Perl_hv_riter_set(HV *, I32);
SV *Perl_hv_scalar(HV *);
void Perl_hv_undef_flags(HV *, U32);
HV *Perl_newHVhv(HV *);
HV *Perl_refcounted_he_chain_2hv(const struct refcounted_he *, U32);
SV *Perl_refcounted_he_fetch_pv(const struct refcounted_he *, const char *, U32, U32);
SV *Perl_refcounted_he_fetch_pvn(const struct refcounted_he *, const char *, STRLEN, U32, U32);
SV *Perl_refcounted_he_fetch_sv(const struct refcounted_he *, SV *, U32, U32);
void Perl_refcounted_he_free(struct refcounted_he *);
struct refcounted_he *Perl_refcounted_he_inc(struct refcounted_he *);
struct refcounted_he *Perl_refcounted_he_new_pv(struct refcounted_he *, const char *, U32, SV *, U32);
struct refcounted_he *Perl_refcounted_he_new_pvn(struct refcounted_he *, const char *, STRLEN, U32, SV *, U32);
struct refcounted_he *Perl_refcounted_he_new_sv(struct refcounted_he *, SV *, U32, SV *, U32);
HEK *Perl_share_hek(const char *, I32, U32);
void Perl_store_cop_label(COP * const, const char *, STRLEN, U32);
void Perl_unshare_hek(HEK *);
void Perl_unsharepvn(const char *, I32, U32);
static void S_clear_placeholders(HV *, U32);
static void S_hfreeentries(HV *);
static void S_hsplit(HV *);
static struct xpvhv_aux *S_hv_auxinit(HV *);
static void S_hv_magic_check(HV *, char *, char *);
static void S_hv_notallowed(int, const char *, I32, const char *);
static HE *S_new_he(void);
static SV *S_refcounted_he_value(const struct refcounted_he *);
static HEK *S_save_hek_flags(const char *, I32, U32, int);
static HEK *S_share_hek_flags(const char *, I32, U32, int);
static void S_unshare_hek_or_pvn(const HEK *, const char *, I32, U32);

File av.c:
SV **Perl_av_arylen_p(AV *);
void Perl_av_clear(AV *);
void Perl_av_create_and_push(AV ** const, SV * const);
SV **Perl_av_create_and_unshift_one(AV ** const, SV * const);
SV *Perl_av_delete(AV *, I32, I32);
char Perl_av_exists(AV *, I32);
void Perl_av_extend(AV *, I32);
SV **Perl_av_fetch(AV *, I32, I32);
void Perl_av_fill(AV *, I32);
IV *Perl_av_iter_p(AV *);
I32 Perl_av_len(AV *);
AV *Perl_av_make(I32, SV **);
SV *Perl_av_pop(AV *);
void Perl_av_push(AV *, SV *);
void Perl_av_reify(AV *);
SV *Perl_av_shift(AV *);
SV **Perl_av_store(AV *, I32, SV *);
void Perl_av_undef(AV *);
void Perl_av_unshift(AV *, I32);
static MAGIC *S_get_aux_mg(AV *);

File pp_hot.c:
OP *Perl_do_readline(void);
OP *Perl_pp_aassign(void);
OP *Perl_pp_add(void);
OP *Perl_pp_aelem(void);
OP *Perl_pp_aelemfast(void);
OP *Perl_pp_and(void);
OP *Perl_pp_concat(void);
OP *Perl_pp_cond_expr(void);
OP *Perl_pp_const(void);
OP *Perl_pp_defined(void);
OP *Perl_pp_enter(void);
OP *Perl_pp_entersub(void);
OP *Perl_pp_eq(void);
OP *Perl_pp_grepwhile(void);
OP *Perl_pp_gv(void);
OP *Perl_pp_gvsv(void);
OP *Perl_pp_helem(void);
OP *Perl_pp_iter(void);
OP *Perl_pp_join(void);
OP *Perl_pp_leave(void);
OP *Perl_pp_leavesub(void);
OP *Perl_pp_leavesublv(void);
OP *Perl_pp_match(void);
OP *Perl_pp_method(void);
OP *Perl_pp_method_named(void);
OP *Perl_pp_nextstate(void);
OP *Perl_pp_null(void);
OP *Perl_pp_or(void);
OP *Perl_pp_padsv(void);
OP *Perl_pp_preinc(void);
OP *Perl_pp_print(void);
OP *Perl_pp_pushmark(void);
OP *Perl_pp_pushre(void);
OP *Perl_pp_qr(void);
OP *Perl_pp_readline(void);
OP *Perl_pp_rv2av(void);
OP *Perl_pp_sassign(void);
OP *Perl_pp_stringify(void);
OP *Perl_pp_subst(void);
OP *Perl_pp_unstack(void);
void Perl_sub_crush_depth(CV *);
void Perl_vivify_ref(SV *, U32);
static SV *S_method_common(SV *, U32 *);

File sv.c:
I32 Perl_looks_like_number(SV * const);
void *Perl_more_bodies(const svtype, const size_t, const size_t);
SV *Perl_newRV(SV * const);
SV *Perl_newRV_noinc(SV * const);
SV *Perl_newSV(const size_t);
SV *Perl_newSV_type(const svtype);
SV *Perl_newSVhek(const HEK * const);
SV *Perl_newSViv(const IV);
SV *Perl_newSVnv(const NV);
SV *Perl_newSVpv(const char * const, const size_t);
SV *Perl_newSVpv_share(const char *, U32);
SV *Perl_newSVpvf(const char * const, ...);
SV *Perl_newSVpvn(const char * const, const size_t);
SV *Perl_newSVpvn_flags(const char * const, const size_t, const U32);
SV *Perl_newSVpvn_share(const char *, I32, U32);
SV *Perl_newSVrv(SV * const, const char * const);
SV *Perl_newSVsv(SV * const);
SV *Perl_newSVuv(const UV);
void Perl_ptr_table_clear(PTR_TBL_t * const);
void *Perl_ptr_table_fetch(PTR_TBL_t * const, const void * const);
void Perl_ptr_table_free(PTR_TBL_t * const);
PTR_TBL_t *Perl_ptr_table_new(void);
void Perl_ptr_table_split(PTR_TBL_t * const);
void Perl_ptr_table_store(PTR_TBL_t * const, const void * const, void * const);
void Perl_report_uninit(const SV *);
char Perl_sv_2bool_flags(SV * const, const I32);
CV *Perl_sv_2cv(SV *, HV ** const, GV ** const, const I32);
IO *Perl_sv_2io(SV * const);
IV Perl_sv_2iv_flags(SV * const, const I32);
SV *Perl_sv_2mortal(SV * const);
SV *Perl_sv_2num(SV * const);
NV Perl_sv_2nv_flags(SV * const, const I32);
char *Perl_sv_2pv_flags(SV * const, STRLEN * const, const I32);
char *Perl_sv_2pvbyte(SV * const, STRLEN * const);
char *Perl_sv_2pvutf8(SV * const, STRLEN * const);
UV Perl_sv_2uv_flags(SV * const, const I32);
void Perl_sv_add_backref(SV * const, SV * const);
int Perl_sv_backoff(SV * const);
SV *Perl_sv_bless(SV * const, HV * const);
char Perl_sv_cat_decode(SV *, SV *, SV *, int *, char *, int);
void Perl_sv_catpv(SV * const, const char *);
void Perl_sv_catpv_flags(SV *, const char *, const I32);
void Perl_sv_catpv_mg(SV * const, const char * const);
void Perl_sv_catpvf(SV * const, const char * const, ...);
void Perl_sv_catpvf_mg(SV * const, const char * const, ...);
void Perl_sv_catpvn_flags(SV * const, const char *, const size_t, const I32);
void Perl_sv_catsv_flags(SV * const, SV * const, const I32);
void Perl_sv_chop(SV * const, const char * const);
I32 Perl_sv_clean_all(void);
void Perl_sv_clean_objs(void);
void Perl_sv_clear(SV * const);
I32 Perl_sv_cmp(SV * const, SV * const);
I32 Perl_sv_cmp_flags(SV * const, SV * const, const U32);
I32 Perl_sv_cmp_locale(SV * const, SV * const);
I32 Perl_sv_cmp_locale_flags(SV * const, SV * const, const U32);
char *Perl_sv_collxfrm_flags(SV * const, STRLEN * const, const I32);
void Perl_sv_copypv(SV * const, SV * const);
void Perl_sv_dec(SV * const);
void Perl_sv_dec_nomg(SV * const);
void Perl_sv_del_backref(SV * const, SV * const);
I32 Perl_sv_eq_flags(SV *, SV *, const U32);
void Perl_sv_force_normal_flags(SV * const, const U32);
void Perl_sv_free(SV * const);
void Perl_sv_free2(SV * const);
void Perl_sv_free_arenas(void);
char *Perl_sv_gets(SV * const, PerlIO * const, I32);
char *Perl_sv_grow(SV * const, STRLEN);
void Perl_sv_inc(SV * const);
void Perl_sv_inc_nomg(SV * const);
void Perl_sv_insert_flags(SV * const, const size_t, const size_t, const char * const, const size_t, const U32);
int Perl_sv_isa(SV *, const char * const);
int Perl_sv_isobject(SV *);
void Perl_sv_kill_backrefs(SV * const, AV * const);
STRLEN Perl_sv_len(SV * const);
STRLEN Perl_sv_len_utf8(SV * const);
void Perl_sv_magic(SV * const, SV * const, const int, const char * const, const I32);
MAGIC *Perl_sv_magicext(SV * const, SV * const, const int, const MGVTBL * const, const char * const, const I32);
SV *Perl_sv_mortalcopy(SV * const);
SV *Perl_sv_newmortal(void);
SV *Perl_sv_newref(SV * const);
void Perl_sv_pos_b2u(SV * const, I32 * const);
void Perl_sv_pos_u2b(SV * const, I32 * const, I32 * const);
STRLEN Perl_sv_pos_u2b_flags(SV * const, STRLEN, STRLEN * const, U32);
char *Perl_sv_pvbyten_force(SV * const, STRLEN * const);
char *Perl_sv_pvn_force_flags(SV * const, STRLEN * const, const I32);
char *Perl_sv_pvutf8n_force(SV * const, STRLEN * const);
char *Perl_sv_recode_to_utf8(SV *, SV *);
const char *Perl_sv_reftype(const SV * const, const int);
void Perl_sv_replace(SV * const, SV * const);
void Perl_sv_report_used(void);
void Perl_sv_reset(const char *, HV * const);
SV *Perl_sv_rvweaken(SV * const);
void Perl_sv_setiv(SV * const, const IV);
void Perl_sv_setiv_mg(SV * const, const IV);
void Perl_sv_setnv(SV * const, const NV);
void Perl_sv_setnv_mg(SV * const, const NV);
void Perl_sv_setpv(SV * const, const char * const);
void Perl_sv_setpv_mg(SV * const, const char * const);
void Perl_sv_setpvf(SV * const, const char * const, ...);
void Perl_sv_setpvf_mg(SV * const, const char * const, ...);
void Perl_sv_setpviv(SV * const, const IV);
void Perl_sv_setpviv_mg(SV * const, const IV);
void Perl_sv_setpvn(SV * const, const char * const, const size_t);
void Perl_sv_setpvn_mg(SV * const, const char * const, const size_t);
SV *Perl_sv_setref_iv(SV * const, const char * const, const IV);
SV *Perl_sv_setref_nv(SV * const, const char * const, const NV);
SV *Perl_sv_setref_pv(SV * const, const char * const, void * const);
SV *Perl_sv_setref_pvn(SV * const, const char * const, const char * const, const size_t);
SV *Perl_sv_setref_uv(SV * const, const char * const, const UV);
void Perl_sv_setsv_flags(SV *, SV *, const I32);
void Perl_sv_setsv_mg(SV * const, SV * const);
void Perl_sv_setuv(SV * const, const UV);
void Perl_sv_setuv_mg(SV * const, const UV);
char Perl_sv_tainted(SV * const);
I32 Perl_sv_true(SV * const);
int Perl_sv_unmagic(SV * const, const int);
int Perl_sv_unmagicext(SV * const, const int, MGVTBL *);
void Perl_sv_unref_flags(SV * const, const U32);
void Perl_sv_untaint(SV * const);
void Perl_sv_upgrade(SV * const, svtype);
void Perl_sv_usepvn_flags(SV * const, char *, const size_t, const U32);
char Perl_sv_utf8_decode(SV * const);
char Perl_sv_utf8_downgrade(SV * const, const char);
void Perl_sv_utf8_encode(SV * const);
STRLEN Perl_sv_utf8_upgrade_flags_grow(SV * const, const I32, STRLEN);
void Perl_sv_vcatpvf(SV * const, const char * const, va_list * const);
void Perl_sv_vcatpvf_mg(SV * const, const char * const, va_list * const);
void Perl_sv_vcatpvfn(SV * const, const char * const, const size_t, va_list * const, SV ** const, const I32, char * const);
void Perl_sv_vsetpvf(SV * const, const char * const, va_list * const);
void Perl_sv_vsetpvf_mg(SV * const, const char * const, va_list * const);
void Perl_sv_vsetpvfn(SV * const, const char * const, const size_t, va_list * const, SV ** const, const I32, char * const);
SV *Perl_vnewSVpvf(const char * const, va_list * const);
int S_sv_unmagicext_flags(SV * const, const int, MGVTBL *, const U32);
static char *S_F0convert(NV, char * const, STRLEN * const);
static void S_assert_uft8_cache_coherent(const char * const, STRLEN, STRLEN, SV * const);
static void S_del_sv(SV *);
static I32 S_expect_number(char ** const);
static I32 S_find_array_subscript(const AV * const, const SV * const);
static SV *S_find_hash_subscript(const HV * const, const SV * const);
static SV *S_find_uninit_var(const OP * const, const SV * const, char);
static char S_glob_2number(GV * const);
static void S_glob_assign_glob(SV * const, SV * const, const int);
static SV *S_more_sv(void);
static void S_not_a_number(SV * const);
static PTR_TBL_ENT_t *S_ptr_table_find(PTR_TBL_t * const, const void * const);
static char S_sv_2iuv_common(SV * const);
static STRLEN S_sv_pos_b2u_midway(const U8 * const, const U8 * const, const U8 *, STRLEN);
static STRLEN S_sv_pos_u2b_cached(SV * const, MAGIC ** const, const U8 * const, const U8 * const, STRLEN, STRLEN, STRLEN);
static STRLEN S_sv_pos_u2b_forwards(const U8 * const, const U8 * const, STRLEN * const, char * const);
static STRLEN S_sv_pos_u2b_midway(const U8 * const, const U8 *, STRLEN, const size_t);
static char *S_uiv_2buf(char * const, const IV, UV, const int, char ** const);
static void S_utf8_mg_len_cache_update(SV * const, MAGIC ** const, const size_t);
static void S_utf8_mg_pos_cache_update(SV * const, MAGIC ** const, const size_t, const size_t, const size_t);
static SV *S_varname(const GV * const, const char, PADOFFSET, const SV * const, I32, int);
static SV *S_vcatpvfn_missing_argument(void);
static I32 S_visit(SVFUNC_t, const U32, const U32);
static void do_clean_all(SV * const);
static void do_clean_named_io_objs(SV * const);
static void do_clean_named_objs(SV * const);
static void do_clean_objs(SV * const);
static void do_report_used(SV * const);

File pp.c:
OP *Perl_pp_abs(void);
OP *Perl_pp_aeach(void);
OP *Perl_pp_akeys(void);
OP *Perl_pp_anoncode(void);
OP *Perl_pp_anonhash(void);
OP *Perl_pp_anonlist(void);
OP *Perl_pp_aslice(void);
OP *Perl_pp_atan2(void);
OP *Perl_pp_av2arylen(void);
OP *Perl_pp_bit_and(void);
OP *Perl_pp_bit_or(void);
OP *Perl_pp_bless(void);
OP *Perl_pp_boolkeys(void);
OP *Perl_pp_chop(void);
OP *Perl_pp_chr(void);
OP *Perl_pp_complement(void);
OP *Perl_pp_crypt(void);
OP *Perl_pp_delete(void);
OP *Perl_pp_divide(void);
OP *Perl_pp_each(void);
OP *Perl_pp_exists(void);
OP *Perl_pp_ge(void);
OP *Perl_pp_gelem(void);
OP *Perl_pp_gt(void);
OP *Perl_pp_hslice(void);
OP *Perl_pp_i_add(void);
OP *Perl_pp_i_divide(void);
OP *Perl_pp_i_eq(void);
OP *Perl_pp_i_ge(void);
OP *Perl_pp_i_gt(void);
OP *Perl_pp_i_le(void);
OP *Perl_pp_i_lt(void);
OP *Perl_pp_i_modulo(void);
OP *Perl_pp_i_multiply(void);
OP *Perl_pp_i_ncmp(void);
OP *Perl_pp_i_ne(void);
OP *Perl_pp_i_negate(void);
OP *Perl_pp_i_subtract(void);
OP *Perl_pp_index(void);
OP *Perl_pp_int(void);
OP *Perl_pp_lc(void);
OP *Perl_pp_le(void);
OP *Perl_pp_left_shift(void);
OP *Perl_pp_length(void);
OP *Perl_pp_list(void);
OP *Perl_pp_lock(void);
OP *Perl_pp_lslice(void);
OP *Perl_pp_lt(void);
OP *Perl_pp_modulo(void);
OP *Perl_pp_multiply(void);
OP *Perl_pp_ncmp(void);
OP *Perl_pp_ne(void);
OP *Perl_pp_negate(void);
OP *Perl_pp_not(void);
OP *Perl_pp_oct(void);
OP *Perl_pp_once(void);
OP *Perl_pp_ord(void);
OP *Perl_pp_padav(void);
OP *Perl_pp_padhv(void);
OP *Perl_pp_pos(void);
OP *Perl_pp_postdec(void);
OP *Perl_pp_postinc(void);
OP *Perl_pp_pow(void);
OP *Perl_pp_predec(void);
OP *Perl_pp_prototype(void);
OP *Perl_pp_push(void);
OP *Perl_pp_quotemeta(void);
OP *Perl_pp_rand(void);
OP *Perl_pp_ref(void);
OP *Perl_pp_refgen(void);
OP *Perl_pp_repeat(void);
OP *Perl_pp_reverse(void);
OP *Perl_pp_right_shift(void);
OP *Perl_pp_rkeys(void);
OP *Perl_pp_rv2cv(void);
OP *Perl_pp_rv2gv(void);
OP *Perl_pp_rv2sv(void);
OP *Perl_pp_schop(void);
OP *Perl_pp_scmp(void);
OP *Perl_pp_seq(void);
OP *Perl_pp_shift(void);
OP *Perl_pp_sin(void);
OP *Perl_pp_sle(void);
OP *Perl_pp_sne(void);
OP *Perl_pp_splice(void);
OP *Perl_pp_split(void);
OP *Perl_pp_sprintf(void);
OP *Perl_pp_srand(void);
OP *Perl_pp_srefgen(void);
OP *Perl_pp_stub(void);
OP *Perl_pp_study(void);
OP *Perl_pp_substr(void);
OP *Perl_pp_subtract(void);
OP *Perl_pp_trans(void);
OP *Perl_pp_uc(void);
OP *Perl_pp_ucfirst(void);
OP *Perl_pp_undef(void);
OP *Perl_pp_unshift(void);
OP *Perl_pp_vec(void);
GV *Perl_softref2xv(SV * const, const char * const, const svtype, SV ***);
OP *Perl_unimplemented_op(void);
static AV *S_deref_plain_array(AV *);
static void S_do_chomp(SV *, SV *, char);
static SV *S_refto(SV *);

File scope.c:
void Perl_cx_dump(PERL_CONTEXT *);
I32 Perl_cxinc(void);
void Perl_free_tmps(void);
void Perl_leave_scope(I32);
void Perl_markstack_grow(void);
PERL_SI *Perl_new_stackinfo(I32, I32);
void Perl_pop_scope(void);
void Perl_push_scope(void);
void Perl_save_I16(I16 *);
void Perl_save_I32(I32 *);
void Perl_save_I8(I8 *);
void Perl_save_adelete(AV *, I32);
void Perl_save_aelem_flags(AV *, I32, SV **, const U32);
I32 Perl_save_alloc(I32, I32);
void Perl_save_aptr(AV **);
AV *Perl_save_ary(GV *);
void Perl_save_bool(char *);
void Perl_save_clearsv(SV **);
void Perl_save_delete(HV *, char *, I32);
void Perl_save_destructor(DESTRUCTORFUNC_NOCONTEXT_t, void *);
void Perl_save_destructor_x(DESTRUCTORFUNC_t, void *);
void Perl_save_generic_pvref(char **);
void Perl_save_generic_svref(SV **);
void Perl_save_gp(GV *, I32);
HV *Perl_save_hash(GV *);
void Perl_save_hdelete(HV *, SV *);
void Perl_save_helem_flags(HV *, SV *, SV **, const U32);
void Perl_save_hints(void);
void Perl_save_hptr(HV **);
void Perl_save_int(int *);
void Perl_save_item(SV *);
void Perl_save_padsv_and_mortalize(PADOFFSET);
void Perl_save_pptr(char **);
void Perl_save_pushi32ptr(const I32, void * const, const int);
void Perl_save_pushptr(void * const, const int);
void Perl_save_pushptrptr(void * const, void * const, const int);
SV *Perl_save_scalar(GV *);
void Perl_save_set_svflags(SV *, U32, U32);
void Perl_save_shared_pvref(char **);
void Perl_save_sptr(SV **);
SV *Perl_save_svref(SV **);
void Perl_save_vptr(void *);
void Perl_savestack_grow(void);
void Perl_savestack_grow_cnt(I32);
SV **Perl_stack_grow(SV **, SV **, int);
void Perl_tmps_grow(I32);
static void S_save_pushptri32ptr(void * const, const I32, void * const, const int);
static SV *S_save_scalar_at(SV **, const U32);

File pp_ctl.c:
I32 Perl_block_gimme(void);
const PERL_CONTEXT *Perl_caller_cx(I32, const PERL_CONTEXT **);
PERL_CONTEXT *Perl_create_eval_scope(U32);
void Perl_delete_eval_scope(void);
void Perl_die_unwind(SV *);
void Perl_dounwind(I32);
I32 Perl_dowantarray(void);
CV *Perl_find_runcv(U32 *);
I32 Perl_is_lvalue_sub(void);
OP *Perl_pp_break(void);
OP *Perl_pp_caller(void);
OP *Perl_pp_continue(void);
OP *Perl_pp_dbstate(void);
OP *Perl_pp_entereval(void);
OP *Perl_pp_entergiven(void);
OP *Perl_pp_enteriter(void);
OP *Perl_pp_enterloop(void);
OP *Perl_pp_entertry(void);
OP *Perl_pp_enterwhen(void);
OP *Perl_pp_exit(void);
OP *Perl_pp_flip(void);
OP *Perl_pp_flop(void);
OP *Perl_pp_formline(void);
OP *Perl_pp_goto(void);
OP *Perl_pp_grepstart(void);
OP *Perl_pp_hintseval(void);
OP *Perl_pp_last(void);
OP *Perl_pp_leaveeval(void);
OP *Perl_pp_leavegiven(void);
OP *Perl_pp_leaveloop(void);
OP *Perl_pp_leavetry(void);
OP *Perl_pp_leavewhen(void);
OP *Perl_pp_mapwhile(void);
OP *Perl_pp_next(void);
OP *Perl_pp_range(void);
OP *Perl_pp_redo(void);
OP *Perl_pp_regcomp(void);
OP *Perl_pp_regcreset(void);
OP *Perl_pp_require(void);
OP *Perl_pp_reset(void);
OP *Perl_pp_return(void);
OP *Perl_pp_smartmatch(void);
OP *Perl_pp_substcont(void);
OP *Perl_pp_wantarray(void);
OP *Perl_pp_xor(void);
void Perl_qerror(SV *);
void Perl_rxres_save(void **, REGEXP *);
OP *Perl_sv_compile_2op(SV *, OP **, const char *, PAD **);
OP *Perl_sv_compile_2op_is_broken(SV *, OP **, const char *, PAD **);
static PerlIO *S_check_type_and_open(SV *);
static void S_destroy_matcher(PMOP *);
static OP *S_do_smartmatch(HV *, HV *);
static OP *S_docatch(OP *);
static char S_doeval(int, OP **, CV *, U32);
static OP *S_dofindlabel(OP *, const char *, OP **, OP **);
static PerlIO *S_doopen_pm(SV *);
static OP *S_doparseform(SV *);
static I32 S_dopoptolabel(const char *);
static I32 S_dopoptoloop(I32);
static I32 S_dopoptosub_at(const PERL_CONTEXT *, I32);
static PMOP *S_make_matcher(REGEXP *);
static char S_matcher_matches_sv(PMOP *, SV *);
static char S_path_is_absolute(const char *);
static I32 S_run_user_filter(int, SV *, int);
static void S_rxres_free(void **);
static int S_try_yyparse(int);

File pp_sys.c:
OP *Perl_pp_accept(void);
OP *Perl_pp_alarm(void);
OP *Perl_pp_backtick(void);
OP *Perl_pp_bind(void);
OP *Perl_pp_binmode(void);
OP *Perl_pp_chdir(void);
OP *Perl_pp_chown(void);
OP *Perl_pp_chroot(void);
OP *Perl_pp_close(void);
OP *Perl_pp_closedir(void);
OP *Perl_pp_dbmopen(void);
OP *Perl_pp_die(void);
OP *Perl_pp_ehostent(void);
OP *Perl_pp_enterwrite(void);
OP *Perl_pp_eof(void);
OP *Perl_pp_exec(void);
OP *Perl_pp_fileno(void);
OP *Perl_pp_flock(void);
OP *Perl_pp_fork(void);
OP *Perl_pp_ftis(void);
OP *Perl_pp_ftlink(void);
OP *Perl_pp_ftrowned(void);
OP *Perl_pp_ftrread(void);
OP *Perl_pp_fttext(void);
OP *Perl_pp_fttty(void);
OP *Perl_pp_getc(void);
OP *Perl_pp_getlogin(void);
OP *Perl_pp_getpeername(void);
OP *Perl_pp_getpgrp(void);
OP *Perl_pp_getppid(void);
OP *Perl_pp_getpriority(void);
OP *Perl_pp_ggrent(void);
OP *Perl_pp_ghostent(void);
OP *Perl_pp_glob(void);
OP *Perl_pp_gmtime(void);
OP *Perl_pp_gnetent(void);
OP *Perl_pp_gprotoent(void);
OP *Perl_pp_gpwent(void);
OP *Perl_pp_gservent(void);
OP *Perl_pp_ioctl(void);
OP *Perl_pp_leavewrite(void);
OP *Perl_pp_link(void);
OP *Perl_pp_listen(void);
OP *Perl_pp_mkdir(void);
OP *Perl_pp_open(void);
OP *Perl_pp_open_dir(void);
OP *Perl_pp_pipe_op(void);
OP *Perl_pp_prtf(void);
OP *Perl_pp_rcatline(void);
OP *Perl_pp_readdir(void);
OP *Perl_pp_readlink(void);
OP *Perl_pp_rename(void);
OP *Perl_pp_rewinddir(void);
OP *Perl_pp_rmdir(void);
OP *Perl_pp_seekdir(void);
OP *Perl_pp_select(void);
OP *Perl_pp_semctl(void);
OP *Perl_pp_semget(void);
OP *Perl_pp_setpgrp(void);
OP *Perl_pp_setpriority(void);
OP *Perl_pp_shmwrite(void);
OP *Perl_pp_shostent(void);
OP *Perl_pp_shutdown(void);
OP *Perl_pp_sleep(void);
OP *Perl_pp_socket(void);
OP *Perl_pp_sockpair(void);
OP *Perl_pp_sselect(void);
OP *Perl_pp_ssockopt(void);
OP *Perl_pp_stat(void);
OP *Perl_pp_syscall(void);
OP *Perl_pp_sysopen(void);
OP *Perl_pp_sysread(void);
OP *Perl_pp_sysseek(void);
OP *Perl_pp_system(void);
OP *Perl_pp_syswrite(void);
OP *Perl_pp_tell(void);
OP *Perl_pp_telldir(void);
OP *Perl_pp_tie(void);
OP *Perl_pp_tied(void);
OP *Perl_pp_time(void);
OP *Perl_pp_tms(void);
OP *Perl_pp_truncate(void);
OP *Perl_pp_umask(void);
OP *Perl_pp_untie(void);
OP *Perl_pp_wait(void);
OP *Perl_pp_waitpid(void);
OP *Perl_pp_warn(void);
void Perl_setdefout(GV *);
OP *Perl_tied_method(const char * const, SV **, SV * const, const MAGIC * const, const U32, U32, ...);

File time64.c:
static int S_check_tm(struct TM64 *);
static void S_copy_little_tm_to_big_TM(const struct tm *, struct TM64 *);

File pp_sys.c:
static OP *S_doform(CV *, GV *, OP *);

File time64.c:
static struct TM64 *S_gmtime64_r(const Time64_T *, struct TM64 *);
static struct tm *S_localtime_r(const time_t *, struct tm *);

File pp_sys.c:
static SV *S_space_join_names_mortal(char * const *);
static char S_try_amagic_ftest(char);

File doop.c:
void Perl_do_join(SV *, SV *, SV **, SV **);
OP *Perl_do_kv(void);
void Perl_do_sprintf(SV *, I32, SV **);
I32 Perl_do_trans(SV *);
UV Perl_do_vecget(SV *, I32, I32);
void Perl_do_vecset(SV *);
void Perl_do_vop(I32, SV *, SV *, SV *);
static I32 S_do_trans_complex(SV * const);
static I32 S_do_trans_complex_utf8(SV * const);
static I32 S_do_trans_simple(SV * const);

File doio.c:
I32 Perl_apply(I32, SV **, SV **);
char Perl_cando(mode_t, char, const struct stat *);
char Perl_do_aexec5(SV *, SV **, SV **, int, int);
char Perl_do_close(GV *, char);
char Perl_do_eof(GV *);
char Perl_do_exec3(const char *, int, int);
void Perl_do_execfree(void);
I32 Perl_do_ipcctl(I32, SV **, SV **);
I32 Perl_do_ipcget(I32, SV **, SV **);
I32 Perl_do_msgrcv(SV **, SV **);
I32 Perl_do_msgsnd(SV **, SV **);
char Perl_do_openn(GV *, const char *, I32, int, int, int, PerlIO *, SV **, I32);
char Perl_do_print(SV *, PerlIO *);
char Perl_do_seek(GV *, off_t, int);
I32 Perl_do_semop(SV **, SV **);
I32 Perl_do_shmio(I32, SV **, SV **);
off_t Perl_do_sysseek(GV *, off_t, int);
off_t Perl_do_tell(GV *);
char Perl_io_close(IO *, char);
int Perl_mode_from_discipline(const char *, STRLEN);
I32 Perl_my_lstat_flags(const U32);
I32 Perl_my_stat_flags(const U32);
PerlIO *Perl_nextargv(GV *);
PerlIO *Perl_start_glob(SV *, IO *);
static void S_exec_failed(const char *, int, int);

File regexec.c:
I32 Perl_pregexec(REGEXP * const, char *, char *, char *, I32, SV *, U32);
char *Perl_re_intuit_start(REGEXP * const, SV *, char *, char *, const U32, re_scream_pos_data *);
SV *Perl_regclass_swash(const regexp *, const regnode *, char, SV **, SV **);
I32 Perl_regexec_flags(REGEXP * const, char *, char *, char *, I32, SV *, void *, U32);
static void S_clear_backtrack_stack(void *);
static void S_debug_start_match(const REGEXP *, const char, const char *, const char *, const char *);
static void S_dump_exec_pos(const char *, const regnode *, const char *, const char *, const char *, const char);
static char *S_find_byclass(regexp *, const regnode *, char *, const char *, regmatch_info *);
static I32 S_reg_check_named_buff_matched(const regexp *, const regnode *);
static char *S_regcppop(const regexp *);
static CHECKPOINT S_regcppush(I32);
static U8 *S_reghop3(U8 *, I32, const U8 *);
static U8 *S_reghopmaybe3(U8 *, I32, const U8 *);
static char S_reginclass(const regexp * const, const regnode * const, const U8 * const, STRLEN *, const char);
static I32 S_regrepeat(const regexp *, const regnode *, I32, int);
static I32 S_regtry(regmatch_info *, char **);
static void S_to_byte_substr(regexp *);
static void S_to_utf8_substr(regexp *);
static void restore_pos(void *);

File utf8.c:
HV *Perl__swash_inversion_hash(SV * const);
HV *Perl__swash_to_invlist(SV * const);
int Perl_bytes_cmp_utf8(const U8 *, STRLEN, const U8 *, STRLEN);
U8 *Perl_bytes_from_utf8(const U8 *, STRLEN *, char *);
U8 *Perl_bytes_to_utf8(const U8 *, STRLEN *);
char Perl_check_utf8_print(const U8 *, const STRLEN);
I32 Perl_foldEQ_utf8_flags(const char *, char **, UV, char, const char *, char **, UV, char, U32);
char Perl_is_ascii_string(const U8 *, STRLEN);
char Perl_is_uni_alnum(UV);
char Perl_is_uni_alnum_lc(UV);
char Perl_is_uni_alpha(UV);
char Perl_is_uni_alpha_lc(UV);
char Perl_is_uni_ascii(UV);
char Perl_is_uni_ascii_lc(UV);
char Perl_is_uni_cntrl(UV);
char Perl_is_uni_cntrl_lc(UV);
char Perl_is_uni_digit(UV);
char Perl_is_uni_digit_lc(UV);
char Perl_is_uni_graph(UV);
char Perl_is_uni_graph_lc(UV);
char Perl_is_uni_idfirst(UV);
char Perl_is_uni_idfirst_lc(UV);
char Perl_is_uni_lower(UV);
char Perl_is_uni_lower_lc(UV);
char Perl_is_uni_print(UV);
char Perl_is_uni_print_lc(UV);
char Perl_is_uni_punct(UV);
char Perl_is_uni_punct_lc(UV);
char Perl_is_uni_space(UV);
char Perl_is_uni_space_lc(UV);
char Perl_is_uni_upper(UV);
char Perl_is_uni_upper_lc(UV);
char Perl_is_uni_xdigit(UV);
char Perl_is_uni_xdigit_lc(UV);
char Perl_is_utf8_X_L(const U8 *);
char Perl_is_utf8_X_LV(const U8 *);
char Perl_is_utf8_X_LVT(const U8 *);
char Perl_is_utf8_X_LV_LVT_V(const U8 *);
char Perl_is_utf8_X_T(const U8 *);
char Perl_is_utf8_X_V(const U8 *);
char Perl_is_utf8_X_begin(const U8 *);
char Perl_is_utf8_X_extend(const U8 *);
char Perl_is_utf8_X_non_hangul(const U8 *);
char Perl_is_utf8_X_prepend(const U8 *);
char Perl_is_utf8_alnum(const U8 *);
char Perl_is_utf8_alpha(const U8 *);
char Perl_is_utf8_ascii(const U8 *);
STRLEN Perl_is_utf8_char(const U8 *);
char Perl_is_utf8_cntrl(const U8 *);
char Perl_is_utf8_digit(const U8 *);
char Perl_is_utf8_graph(const U8 *);
char Perl_is_utf8_idcont(const U8 *);
char Perl_is_utf8_idfirst(const U8 *);
char Perl_is_utf8_lower(const U8 *);
char Perl_is_utf8_mark(const U8 *);
char Perl_is_utf8_perl_space(const U8 *);
char Perl_is_utf8_perl_word(const U8 *);
char Perl_is_utf8_posix_digit(const U8 *);
char Perl_is_utf8_print(const U8 *);
char Perl_is_utf8_punct(const U8 *);
char Perl_is_utf8_space(const U8 *);
char Perl_is_utf8_string(const U8 *, STRLEN);
char Perl_is_utf8_string_loclen(const U8 *, STRLEN, const U8 **, STRLEN *);
char Perl_is_utf8_upper(const U8 *);
char Perl_is_utf8_xdigit(const U8 *);
char Perl_is_utf8_xidcont(const U8 *);
char Perl_is_utf8_xidfirst(const U8 *);
char *Perl_pv_uni_display(SV *, const U8 *, STRLEN, STRLEN, UV);
char *Perl_sv_uni_display(SV *, SV *, STRLEN, UV);
UV Perl_swash_fetch(SV *, const U8 *, char);
SV *Perl_swash_init(const char *, const char *, SV *, I32, I32);
UV Perl_to_uni_fold(UV, U8 *, STRLEN *);
UV Perl_to_uni_lower(UV, U8 *, STRLEN *);
U32 Perl_to_uni_lower_lc(U32);
UV Perl_to_uni_title(UV, U8 *, STRLEN *);
U32 Perl_to_uni_title_lc(U32);
UV Perl_to_uni_upper(UV, U8 *, STRLEN *);
U32 Perl_to_uni_upper_lc(U32);
UV Perl_to_utf8_case(const U8 *, U8 *, STRLEN *, SV **, const char *, const char *);
UV Perl_to_utf8_fold(const U8 *, U8 *, STRLEN *);
UV Perl_to_utf8_lower(const U8 *, U8 *, STRLEN *);
UV Perl_to_utf8_title(const U8 *, U8 *, STRLEN *);
UV Perl_to_utf8_upper(const U8 *, U8 *, STRLEN *);
U8 *Perl_utf16_to_utf8(U8 *, U8 *, I32, I32 *);
U8 *Perl_utf16_to_utf8_reversed(U8 *, U8 *, I32, I32 *);
IV Perl_utf8_distance(const U8 *, const U8 *);
U8 *Perl_utf8_hop(const U8 *, I32);
STRLEN Perl_utf8_length(const U8 *, const U8 *);
U8 *Perl_utf8_to_bytes(U8 *, STRLEN *);
UV Perl_utf8_to_uvchr(const U8 *, STRLEN *);
UV Perl_utf8_to_uvuni(const U8 *, STRLEN *);
UV Perl_utf8n_to_uvchr(const U8 *, STRLEN, STRLEN *, U32);
UV Perl_utf8n_to_uvuni(const U8 *, STRLEN, STRLEN *, U32);
U8 *Perl_uvchr_to_utf8(U8 *, UV);
U8 *Perl_uvchr_to_utf8_flags(U8 *, UV, UV);
U8 *Perl_uvuni_to_utf8_flags(U8 *, UV, UV);
static STRLEN S_is_utf8_char_slow(const U8 *, const STRLEN);
static char S_is_utf8_common(const U8 * const, SV **, const char * const);
static SV *S_swash_get(SV *, UV, UV);
static U8 *S_swash_scan_list_line(U8 *, U8 * const, UV *, UV *, UV *, const char, const U8 * const);

File taint.c:
void Perl_taint_env(void);
void Perl_taint_proper(const char *, const char * const);

File deb.c:
void Perl_deb(const char *, ...);
void Perl_deb_stack_all(void);
I32 Perl_debstack(void);
I32 Perl_debstackptrs(void);
void Perl_vdeb(const char *, va_list *);
static void S_deb_stack_n(SV **, I32, I32, I32, I32);

File universal.c:
void Perl_boot_core_UNIVERSAL(void);
void Perl_croak_xs_usage(const CV * const, const char * const);
char Perl_sv_derived_from(SV *, const char * const);
char Perl_sv_does(SV *, const char * const);
void XS_Internals_HvREHASH(CV *);
void XS_Internals_SvREADONLY(CV *);
void XS_Internals_SvREFCNT(CV *);
void XS_Internals_hash_seed(CV *);
void XS_Internals_hv_clear_placehold(CV *);
void XS_Internals_rehash_seed(CV *);
void XS_PerlIO_get_layers(CV *);
void XS_UNIVERSAL_DOES(CV *);
void XS_UNIVERSAL_VERSION(CV *);
void XS_UNIVERSAL_can(CV *);
void XS_UNIVERSAL_isa(CV *);
void XS_re_is_regexp(CV *);
void XS_re_regexp_pattern(CV *);
void XS_re_regname(CV *);
void XS_re_regnames(CV *);
void XS_re_regnames_count(CV *);
void XS_utf8_decode(CV *);
void XS_utf8_downgrade(CV *);
void XS_utf8_encode(CV *);
void XS_utf8_is_utf8(CV *);
void XS_utf8_native_to_unicode(CV *);
void XS_utf8_unicode_to_native(CV *);
void XS_utf8_upgrade(CV *);
void XS_utf8_valid(CV *);
void XS_version_boolean(CV *);
void XS_version_is_alpha(CV *);
void XS_version_is_qv(CV *);
void XS_version_new(CV *);
void XS_version_noop(CV *);
void XS_version_normal(CV *);
void XS_version_numify(CV *);
void XS_version_qv(CV *);
void XS_version_stringify(CV *);
void XS_version_vcmp(CV *);

File perlio.c:
IV PerlIOBase_binmode(PerlIO *);
void PerlIOBase_clearerr(PerlIO *);
IV PerlIOBase_close(PerlIO *);
PerlIO *PerlIOBase_dup(PerlIO *, PerlIO *, CLONE_PARAMS *, int);
IV PerlIOBase_eof(PerlIO *);
IV PerlIOBase_error(PerlIO *);
IV PerlIOBase_fileno(PerlIO *);
void PerlIOBase_flush_linebuf(void);
IV PerlIOBase_noop_fail(PerlIO *);
IV PerlIOBase_noop_ok(PerlIO *);
PerlIO *PerlIOBase_open(PerlIO_funcs *, PerlIO_list_t *, IV, const char *, int, int, int, PerlIO *, int, SV **);
IV PerlIOBase_popped(PerlIO *);
IV PerlIOBase_pushed(PerlIO *, const char *, SV *, PerlIO_funcs *);
ssize_t PerlIOBase_read(PerlIO *, void *, size_t);
void PerlIOBase_setlinebuf(PerlIO *);
ssize_t PerlIOBase_unread(PerlIO *, const void *, size_t);
size_t PerlIOBuf_bufsiz(PerlIO *);
IV PerlIOBuf_close(PerlIO *);
PerlIO *PerlIOBuf_dup(PerlIO *, PerlIO *, CLONE_PARAMS *, int);
IV PerlIOBuf_fill(PerlIO *);
IV PerlIOBuf_flush(PerlIO *);
char *PerlIOBuf_get_base(PerlIO *);
ssize_t PerlIOBuf_get_cnt(PerlIO *);
char *PerlIOBuf_get_ptr(PerlIO *);
PerlIO *PerlIOBuf_open(PerlIO_funcs *, PerlIO_list_t *, IV, const char *, int, int, int, PerlIO *, int, SV **);
IV PerlIOBuf_popped(PerlIO *);
IV PerlIOBuf_pushed(PerlIO *, const char *, SV *, PerlIO_funcs *);
ssize_t PerlIOBuf_read(PerlIO *, void *, size_t);
IV PerlIOBuf_seek(PerlIO *, off_t, int);
void PerlIOBuf_set_ptrcnt(PerlIO *, char *, ssize_t);
off_t PerlIOBuf_tell(PerlIO *);
ssize_t PerlIOBuf_unread(PerlIO *, const void *, size_t);
ssize_t PerlIOBuf_write(PerlIO *, const void *, size_t);
IV PerlIOCrlf_binmode(PerlIO *);
IV PerlIOCrlf_flush(PerlIO *);
ssize_t PerlIOCrlf_get_cnt(PerlIO *);
IV PerlIOCrlf_pushed(PerlIO *, const char *, SV *, PerlIO_funcs *);
void PerlIOCrlf_set_ptrcnt(PerlIO *, char *, ssize_t);
ssize_t PerlIOCrlf_unread(PerlIO *, const void *, size_t);
ssize_t PerlIOCrlf_write(PerlIO *, const void *, size_t);
IV PerlIOMmap_close(PerlIO *);
PerlIO *PerlIOMmap_dup(PerlIO *, PerlIO *, CLONE_PARAMS *, int);
IV PerlIOMmap_fill(PerlIO *);
IV PerlIOMmap_flush(PerlIO *);
char *PerlIOMmap_get_base(PerlIO *);
IV PerlIOMmap_map(PerlIO *);
IV PerlIOMmap_unmap(PerlIO *);
ssize_t PerlIOMmap_unread(PerlIO *, const void *, size_t);
ssize_t PerlIOMmap_write(PerlIO *, const void *, size_t);
IV PerlIOPending_close(PerlIO *);
IV PerlIOPending_fill(PerlIO *);
IV PerlIOPending_flush(PerlIO *);
IV PerlIOPending_pushed(PerlIO *, const char *, SV *, PerlIO_funcs *);
ssize_t PerlIOPending_read(PerlIO *, void *, size_t);
IV PerlIOPending_seek(PerlIO *, off_t, int);
void PerlIOPending_set_ptrcnt(PerlIO *, char *, ssize_t);
IV PerlIOPop_pushed(PerlIO *, const char *, SV *, PerlIO_funcs *);
IV PerlIORaw_pushed(PerlIO *, const char *, SV *, PerlIO_funcs *);
void PerlIOStdio_clearerr(PerlIO *);
IV PerlIOStdio_close(PerlIO *);
PerlIO *PerlIOStdio_dup(PerlIO *, PerlIO *, CLONE_PARAMS *, int);
IV PerlIOStdio_eof(PerlIO *);
IV PerlIOStdio_error(PerlIO *);
IV PerlIOStdio_fileno(PerlIO *);
IV PerlIOStdio_fill(PerlIO *);
IV PerlIOStdio_flush(PerlIO *);
char *PerlIOStdio_get_base(PerlIO *);
size_t PerlIOStdio_get_bufsiz(PerlIO *);
ssize_t PerlIOStdio_get_cnt(PerlIO *);
char *PerlIOStdio_get_ptr(PerlIO *);
char *PerlIOStdio_mode(const char *, char *);
PerlIO *PerlIOStdio_open(PerlIO_funcs *, PerlIO_list_t *, IV, const char *, int, int, int, PerlIO *, int, SV **);
IV PerlIOStdio_pushed(PerlIO *, const char *, SV *, PerlIO_funcs *);
ssize_t PerlIOStdio_read(PerlIO *, void *, size_t);
IV PerlIOStdio_seek(PerlIO *, off_t, int);
void PerlIOStdio_set_ptrcnt(PerlIO *, char *, ssize_t);
void PerlIOStdio_setlinebuf(PerlIO *);
off_t PerlIOStdio_tell(PerlIO *);
ssize_t PerlIOStdio_unread(PerlIO *, const void *, size_t);
ssize_t PerlIOStdio_write(PerlIO *, const void *, size_t);
IV PerlIOUnix_close(PerlIO *);
PerlIO *PerlIOUnix_dup(PerlIO *, PerlIO *, CLONE_PARAMS *, int);
IV PerlIOUnix_fileno(PerlIO *);
int PerlIOUnix_oflags(const char *);
PerlIO *PerlIOUnix_open(PerlIO_funcs *, PerlIO_list_t *, IV, const char *, int, int, int, PerlIO *, int, SV **);
IV PerlIOUnix_pushed(PerlIO *, const char *, SV *, PerlIO_funcs *);
ssize_t PerlIOUnix_read(PerlIO *, void *, size_t);
int PerlIOUnix_refcnt(int);
int PerlIOUnix_refcnt_dec(int);
void PerlIOUnix_refcnt_inc(int);
IV PerlIOUnix_seek(PerlIO *, off_t, int);
off_t PerlIOUnix_tell(PerlIO *);
ssize_t PerlIOUnix_write(PerlIO *, const void *, size_t);
IV PerlIOUtf8_pushed(PerlIO *, const char *, SV *, PerlIO_funcs *);
int PerlIO__close(PerlIO *);
PerlIO *PerlIO_allocate(void);
int PerlIO_apply_layera(PerlIO *, const char *, PerlIO_list_t *, IV, IV);
int PerlIO_apply_layers(PerlIO *, const char *, const char *);
SV *PerlIO_arg_fetch(PerlIO_list_t *, IV);
int PerlIO_binmode(PerlIO *, int, int, const char *);
int PerlIO_canset_cnt(PerlIO *);
void PerlIO_cleantable(PerlIOl **);
void PerlIO_cleanup(void);
void PerlIO_clone(PerlInterpreter *, CLONE_PARAMS *);
PerlIO_list_t *PerlIO_clone_list(PerlIO_list_t *, CLONE_PARAMS *);
void PerlIO_debug(const char *, ...);
void PerlIO_default_buffer(PerlIO_list_t *);
PerlIO_funcs *PerlIO_default_layer(I32);
PerlIO_list_t *PerlIO_default_layers(void);
void PerlIO_define_layer(PerlIO_funcs *);
void PerlIO_destruct(void);
FILE *PerlIO_exportFILE(PerlIO *, const char *);
int PerlIO_fast_gets(PerlIO *);
PerlIO *PerlIO_fdopen(int, const char *);
PerlIO *PerlIO_fdupopen(PerlIO *, CLONE_PARAMS *, int);
FILE *PerlIO_findFILE(PerlIO *);
PerlIO_funcs *PerlIO_find_layer(const char *, STRLEN, int);
AV *PerlIO_get_layers(PerlIO *);
int PerlIO_getc(PerlIO *);
char *PerlIO_getname(PerlIO *, char *);
int PerlIO_getpos(PerlIO *, SV *);
int PerlIO_has_base(PerlIO *);
int PerlIO_has_cntptr(PerlIO *);
PerlIO *PerlIO_importFILE(FILE *, const char *);
void PerlIO_init(void);
int PerlIO_intmode2str(int, char *, int *);
int PerlIO_isutf8(PerlIO *);
PerlIO_funcs *PerlIO_layer_fetch(PerlIO_list_t *, IV, PerlIO_funcs *);
PerlIO_list_t *PerlIO_list_alloc(void);
void PerlIO_list_free(PerlIO_list_t *);
void PerlIO_list_push(PerlIO_list_t *, PerlIO_funcs *, SV *);
char *PerlIO_modestr(PerlIO *, char *);
PerlIO *PerlIO_open(const char *, const char *);
PerlIO *PerlIO_openn(const char *, const char *, int, int, int, PerlIO *, int, SV **);
int PerlIO_parse_layers(PerlIO_list_t *, const char *);
void PerlIO_pop(PerlIO *);
int PerlIO_printf(PerlIO *, const char *, ...);
PerlIO *PerlIO_push(PerlIO *, PerlIO_funcs *, const char *, SV *);
int PerlIO_putc(PerlIO *, int);
int PerlIO_puts(PerlIO *, const char *);
void PerlIO_releaseFILE(PerlIO *, FILE *);
PerlIO *PerlIO_reopen(const char *, const char *, PerlIO *);
PerlIO_list_t *PerlIO_resolve_layers(const char *, const char *, int, SV **);
void PerlIO_rewind(PerlIO *);
int PerlIO_setpos(PerlIO *, SV *);
int PerlIO_sprintf(char *, int, const char *, ...);
int PerlIO_stdoutf(const char *, ...);
void PerlIO_stdstreams(void);
SV *PerlIO_sv_dup(SV *, CLONE_PARAMS *);
SV *PerlIO_tab_sv(PerlIO_funcs *);
void PerlIO_teardown(void);
PerlIO *PerlIO_tmpfile(void);
int PerlIO_ungetc(PerlIO *, int);
int PerlIO_vprintf(PerlIO *, const char *, va_list);
int PerlIO_vsprintf(char *, int, const char *, va_list);
void Perl_PerlIO_clearerr(PerlIO *);
int Perl_PerlIO_close(PerlIO *);
const char *Perl_PerlIO_context_layers(const char *);
int Perl_PerlIO_eof(PerlIO *);
int Perl_PerlIO_error(PerlIO *);
int Perl_PerlIO_fileno(PerlIO *);
int Perl_PerlIO_fill(PerlIO *);
int Perl_PerlIO_flush(PerlIO *);
char *Perl_PerlIO_get_base(PerlIO *);
int Perl_PerlIO_get_bufsiz(PerlIO *);
int Perl_PerlIO_get_cnt(PerlIO *);
char *Perl_PerlIO_get_ptr(PerlIO *);
ssize_t Perl_PerlIO_read(PerlIO *, void *, size_t);
int Perl_PerlIO_seek(PerlIO *, off_t, int);
void Perl_PerlIO_set_cnt(PerlIO *, int);
void Perl_PerlIO_set_ptrcnt(PerlIO *, char *, int);
void Perl_PerlIO_setlinebuf(PerlIO *);
PerlIO *Perl_PerlIO_stderr(void);
PerlIO *Perl_PerlIO_stdin(void);
PerlIO *Perl_PerlIO_stdout(void);
off_t Perl_PerlIO_tell(PerlIO *);
ssize_t Perl_PerlIO_unread(PerlIO *, const void *, size_t);
ssize_t Perl_PerlIO_write(PerlIO *, const void *, size_t);
void Perl_boot_core_PerlIO(void);
void XS_PerlIO__Layer__NoWarnings(CV *);
void XS_PerlIO__Layer__find(CV *);
int perlsio_binmode(FILE *, int, int);
static void PerlIO_verify_head(PerlIO *);
static void S_lockcnt_dec(const void *);
static char S_perlio_async_run(PerlIO *);

File numeric.c:
I32 Perl_cast_i32(NV);
IV Perl_cast_iv(NV);
U32 Perl_cast_ulong(NV);
UV Perl_cast_uv(NV);
UV Perl_grok_bin(const char *, STRLEN *, I32 *, NV *);
UV Perl_grok_hex(const char *, STRLEN *, I32 *, NV *);
int Perl_grok_number(const char *, STRLEN, UV *);
char Perl_grok_numeric_radix(const char **, const char *);
UV Perl_grok_oct(const char *, STRLEN *, I32 *, NV *);
NV Perl_my_atof(const char *);
char *Perl_my_atof2(const char *, NV *);
NV Perl_scan_bin(const char *, STRLEN, STRLEN *);
NV Perl_scan_hex(const char *, STRLEN, STRLEN *);
NV Perl_scan_oct(const char *, STRLEN, STRLEN *);
static NV S_mulexp10(NV, I32);

File mathoms.c:
const char *Perl_custom_op_desc(const OP *);
const char *Perl_custom_op_name(const OP *);
char Perl_do_aexec(SV *, SV **, SV **);
int Perl_do_binmode(PerlIO *, int, int);
char Perl_do_exec(const char *);
char Perl_do_open(GV *, const char *, I32, int, int, int, PerlIO *);
char Perl_do_open9(GV *, const char *, I32, int, int, int, PerlIO *, SV *, I32);
int Perl_fprintf_nocontext(PerlIO *, const char *, ...);
GV *Perl_gv_AVadd(GV *);
GV *Perl_gv_HVadd(GV *);
GV *Perl_gv_IOadd(GV *);
GV *Perl_gv_SVadd(GV *);
void Perl_gv_efullname(SV *, const GV *);
void Perl_gv_efullname3(SV *, const GV *, const char *);
GV *Perl_gv_fetchmethod(HV *, const char *);
void Perl_gv_fullname(SV *, const GV *);
void Perl_gv_fullname3(SV *, const GV *, const char *);
NV Perl_huge(void);
SV *Perl_hv_delete(HV *, const char *, I32, I32);
SV *Perl_hv_delete_ent(HV *, SV *, I32, U32);
char Perl_hv_exists(HV *, const char *, I32);
char Perl_hv_exists_ent(HV *, SV *, U32);
SV **Perl_hv_fetch(HV *, const char *, I32, I32);
HE *Perl_hv_fetch_ent(HV *, SV *, I32, U32);
HE *Perl_hv_iternext(HV *);
void Perl_hv_magic(HV *, GV *, int);
SV **Perl_hv_store(HV *, const char *, I32, SV *, U32);
HE *Perl_hv_store_ent(HV *, SV *, SV *, U32);
SV **Perl_hv_store_flags(HV *, const char *, I32, SV *, U32, int);
int Perl_init_i18nl14n(int);
char Perl_is_utf8_string_loc(const U8 *, STRLEN, const U8 **);
I32 Perl_my_lstat(void);
I32 Perl_my_stat(void);
AV *Perl_newAV(void);
HV *Perl_newHV(void);
IO *Perl_newIO(void);
CV *Perl_newSUB(I32, OP *, OP *, OP *);
void Perl_pack_cat(SV *, const char *, const char *, SV **, SV **, SV ***, U32);
int Perl_printf_nocontext(const char *, ...);
OP *Perl_ref(OP *, I32);
void Perl_save_freeop(OP *);
void Perl_save_freepv(char *);
void Perl_save_freesv(SV *);
void Perl_save_iv(IV *);
void Perl_save_list(SV **, I32);
void Perl_save_long(long int *);
void Perl_save_mortalizesv(SV *);
void Perl_save_nogv(GV *);
void Perl_save_op(void);
char Perl_sv_2bool(SV * const);
IV Perl_sv_2iv(SV *);
NV Perl_sv_2nv(SV *);
char *Perl_sv_2pv(SV *, STRLEN *);
char *Perl_sv_2pv_nolen(SV *);
char *Perl_sv_2pvbyte_nolen(SV *);
char *Perl_sv_2pvutf8_nolen(SV *);
UV Perl_sv_2uv(SV *);
void Perl_sv_catpvn(SV *, const char *, STRLEN);
void Perl_sv_catpvn_mg(SV *, const char *, STRLEN);
void Perl_sv_catsv(SV *, SV *);
void Perl_sv_catsv_mg(SV *, SV *);
char *Perl_sv_collxfrm(SV * const, STRLEN * const);
I32 Perl_sv_eq(SV *, SV *);
void Perl_sv_force_normal(SV *);
void Perl_sv_insert(SV * const, const STRLEN, const STRLEN, const char * const, const STRLEN);
IV Perl_sv_iv(SV *);
void Perl_sv_nolocking(SV *);
void Perl_sv_nounlocking(SV *);
NV Perl_sv_nv(SV *);
char *Perl_sv_pv(SV *);
char *Perl_sv_pvbyte(SV *);
char *Perl_sv_pvbyten(SV *, STRLEN *);
char *Perl_sv_pvn(SV *, STRLEN *);
char *Perl_sv_pvn_force(SV *, STRLEN *);
char *Perl_sv_pvn_nomg(SV *, STRLEN *);
char *Perl_sv_pvutf8(SV *);
char *Perl_sv_pvutf8n(SV *, STRLEN *);
void Perl_sv_setsv(SV *, SV *);
void Perl_sv_taint(SV *);
void Perl_sv_unref(SV *);
void Perl_sv_usepvn(SV *, char *, STRLEN);
void Perl_sv_usepvn_mg(SV *, char *, STRLEN);
STRLEN Perl_sv_utf8_upgrade(SV *);
UV Perl_sv_uv(SV *);
I32 Perl_unpack_str(const char *, const char *, const char *, const char *, const char *, char **, I32, U32);
U8 *Perl_uvuni_to_utf8(U8 *, UV);

File locale.c:
int Perl_init_i18nl10n(int);
char *Perl_mem_collxfrm(const char *, STRLEN, STRLEN *);
void Perl_new_collate(const char *);
void Perl_new_ctype(const char *);
void Perl_new_numeric(const char *);
void Perl_set_numeric_local(void);
void Perl_set_numeric_radix(void);
void Perl_set_numeric_standard(void);
static char *S_stdize_locale(char *);

File pp_pack.c:
void Perl_packlist(SV *, const char *, const char *, SV **, SV **);
OP *Perl_pp_pack(void);
OP *Perl_pp_unpack(void);
I32 Perl_unpackstring(const char *, const char *, const char *, const char *, U32);
static char *S_bytes_to_uni(const U8 *, STRLEN, char *);
static const char *S_get_num(const char *, I32 *);
static const char *S_group_end(const char *, const char *, char);
static I32 S_measure_struct(tempsym_t *);
static char S_next_symbol(tempsym_t *);
static SV **S_pack_rec(SV *, tempsym_t *, SV **, SV **);
static char *S_sv_exp_grow(SV *, STRLEN);
static I32 S_unpack_rec(tempsym_t *, const char *, const char *, const char *, const char **);
static U8 *doencodes(U8 *, const char *, I32);
static void marked_upgrade(SV *, tempsym_t *);
static char next_uni_uu(const char **, const char *, I32 *);
static U8 uni_to_byte(const char **, const char *, I32);
static char uni_to_bytes(const char **, const char *, const char *, int, I32);

File pp_sort.c:
OP *Perl_pp_sort(void);
void Perl_sortsv(SV **, size_t, SVCOMPARE_t);
void Perl_sortsv_flags(SV **, size_t, SVCOMPARE_t, U32);
static I32 S_amagic_cmp(SV * const, SV * const);
static I32 S_amagic_cmp_locale(SV * const, SV * const);
static I32 S_amagic_i_ncmp(SV * const, SV * const);
static I32 S_amagic_ncmp(SV * const, SV * const);
static void S_mergesortsv(gptr *, size_t, SVCOMPARE_t, U32);
static void S_qsortsv(gptr *, size_t, SVCOMPARE_t, U32);
static void S_qsortsvu(SV **, size_t, SVCOMPARE_t);
static I32 S_sortcv(SV * const, SV * const);
static I32 S_sortcv_stacked(SV * const, SV * const);
static I32 S_sortcv_xsub(SV * const, SV * const);
static I32 S_sv_i_ncmp(SV * const, SV * const);
static I32 S_sv_ncmp(SV * const, SV * const);
static I32 cmp_desc(const gptr, const gptr);
static I32 cmpindir(const gptr, const gptr);
static I32 cmpindir_desc(const gptr, const gptr);

File DynaLoader.c:
void XS_DynaLoader_dl_error(CV *);
void XS_DynaLoader_dl_find_symbol(CV *);
void XS_DynaLoader_dl_install_xsub(CV *);
void XS_DynaLoader_dl_load_file(CV *);
void XS_DynaLoader_dl_undef_symbols(CV *);
void XS_DynaLoader_dl_unload_file(CV *);
void boot_DynaLoader(CV *);

File dlutils.c:
static void SaveError(const char *, ...);

File run.c:
int Perl_runops_standard(void);

File yp_xdr.c:
bool_t xdr_domainname(XDR *, domainname *);
bool_t xdr_keydat(XDR *, keydat *);
bool_t xdr_mapname(XDR *, mapname *);
bool_t xdr_peername(XDR *, peername *);
bool_t xdr_valdat(XDR *, valdat *);
bool_t xdr_ypall(XDR *, struct ypall_callback *);
bool_t xdr_ypbind_binding(XDR *, ypbind_binding *);
bool_t xdr_ypbind_resp(XDR *, ypbind_resp *);
bool_t xdr_ypbind_resptype(XDR *, ypbind_resptype *);
bool_t xdr_ypbind_setdom(XDR *, ypbind_setdom *);
bool_t xdr_ypmap_parms(XDR *, ypmap_parms *);
bool_t xdr_ypmaplist(XDR *, ypmaplist *);
bool_t xdr_yppush_status(XDR *, yppush_status *);
bool_t xdr_yppushresp_xfr(XDR *, yppushresp_xfr *);
bool_t xdr_ypreq_key(XDR *, ypreq_key *);
bool_t xdr_ypreq_nokey(XDR *, ypreq_nokey *);
bool_t xdr_ypreq_xfr(XDR *, ypreq_xfr *);
bool_t xdr_ypresp_all(XDR *, ypresp_all *);
bool_t xdr_ypresp_key_val(XDR *, ypresp_key_val *);
bool_t xdr_ypresp_maplist(XDR *, ypresp_maplist *);
bool_t xdr_ypresp_master(XDR *, ypresp_master *);
bool_t xdr_ypresp_order(XDR *, ypresp_order *);
bool_t xdr_ypresp_val(XDR *, ypresp_val *);
bool_t xdr_ypresp_xfr(XDR *, ypresp_xfr *);
bool_t xdr_ypstat(XDR *, ypstat *);
bool_t xdr_ypxfrstat(XDR *, ypxfrstat *);

File ypclnt.c:
int __yp_check(char **);
int yp_all(const char *, const char *, const struct ypall_callback *);
int yp_bind(const char *);
int yp_first(const char *, const char *, char **, int *, char **, int *);
int yp_get_default_domain(char **);
int yp_maplist(const char *, struct ypmaplist **);
int yp_master(const char *, const char *, char **);
int yp_match(const char *, const char *, const char *, const int, char **, int *);
int yp_next(const char *, const char *, const char *, const int, char **, int *, char **, int *);
int yp_order(const char *, const char *, unsigned int *);
void yp_unbind(const char *);
int yp_update(char *, char *, unsigned int, char *, int, char *, int);
const char *ypbinderr_string(const int);
const char *yperr_string(const int);
int ypprot_err(const int);
static bool_t __xdr_ypresp_all(XDR *, struct ypresp_all_data *);
static int __yp_bind(const char *, dom_binding **);
static void __yp_unbind(dom_binding *);
static int __ypclnt_call(const char *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, dom_binding **, int);
static int do_ypcall(const char *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t);
static int do_ypcall_tr(const char *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t);
static void yp_bind_client_create(const char *, dom_binding *, struct ypbind_resp *);
static void yp_bind_file(const char *, dom_binding *);
static int yp_bind_ypbindprog(const char *, dom_binding *);
static void yp_unbind_locked(const char *);

File ypupdate_xdr.c:
bool_t xdr_yp_buf(XDR *, yp_buf *);
bool_t xdr_ypdelete_args(XDR *, ypdelete_args *);
bool_t xdr_ypupdate_args(XDR *, ypupdate_args *);

File nis_subr.c:
void nis_destroy_object(nis_object *);
name_pos nis_dir_cmp(const_nis_name, const_nis_name);
void nis_freenames(nis_name *);
nis_name *nis_getnames(const_nis_name);
nis_name nis_leaf_of(const_nis_name);
nis_name nis_leaf_of_r(const_nis_name, char *, size_t);
nis_name nis_name_of(const_nis_name);
nis_name nis_name_of_r(const_nis_name, char *, size_t);

File nis_local_names.c:
nis_name nis_local_directory(void);
nis_name nis_local_group(void);
nis_name nis_local_host(void);
nis_name nis_local_principal(void);

File nis_free.c:
void __free_fdresult(fd_result *);
void nis_free_directory(directory_obj *);
void nis_free_object(nis_object *);
void nis_free_request(ib_request *);
void nis_freeresult(nis_result *);

File nis_file.c:
nis_object *nis_read_obj(const char *);
bool_t nis_write_obj(const char *, const nis_object *);
directory_obj *readColdStartFile(void);
bool_t writeColdStartFile(const directory_obj *);
static void *read_nis_obj(const char *, iofct_t, freefct_t, size_t);
static bool_t write_nis_obj(const char *, const void *, iofct_t);

File nis_print.c:
void nis_print_directory(const directory_obj *);
void nis_print_entry(const entry_obj *);
void nis_print_group(const group_obj *);
void nis_print_link(const link_obj *);
void nis_print_object(const nis_object *);
void nis_print_result(const nis_result *);
void nis_print_rights(const unsigned int);
void nis_print_table(const table_obj *);
static void nis_print_objtype(enum zotypes);
static void print_ttl(const uint32_t);

File nis_error.c:
void nis_lerror(const nis_error, const char *);
void nis_perror(const nis_error, const char *);
const char *nis_sperrno(const nis_error);
char *nis_sperror(const nis_error, const char *);
char *nis_sperror_r(const nis_error, const char *, char *, size_t);

File nis_call.c:
nis_error __do_niscall(const_nis_name, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, unsigned int, nis_cb *);
nis_error __do_niscall2(const nis_server *, u_int, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, unsigned int, nis_cb *);
nis_error __do_niscall3(dir_binding *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, unsigned int, nis_cb *);
nis_error __nisbind_connect(dir_binding *);
nis_error __nisbind_create(dir_binding *, const nis_server *, unsigned int, unsigned int, unsigned int, unsigned int);
void __nisbind_destroy(dir_binding *);
nis_error __nisbind_next(dir_binding *);
nis_error __nisfind_server(const_nis_name, int, directory_obj **, dir_binding *, unsigned int);
nis_error __prepare_niscall(const_nis_name, directory_obj **, dir_binding *, unsigned int);
long unsigned int inetstr2int(const char *);
static directory_obj *rec_dirsearch(const_nis_name, directory_obj *, nis_error *);

File nis_lookup.c:
nis_result *nis_lookup(const_nis_name, const unsigned int);

File nis_table.c:
struct ib_request *__create_ib_request(const_nis_name, unsigned int);
nis_error __follow_path(char **, char **, struct ib_request *, dir_binding *);
nis_result *nis_add_entry(const_nis_name, const nis_object *, unsigned int);
nis_result *nis_first_entry(const_nis_name);
nis_result *nis_list(const_nis_name, unsigned int, int (*)(const_nis_name, const nis_object *, const void *), const void *);
nis_result *nis_modify_entry(const_nis_name, const nis_object *, unsigned int);
nis_result *nis_next_entry(const_nis_name, const netobj *);
nis_result *nis_remove_entry(const_nis_name, const nis_object *, unsigned int);

File nis_xdr.c:
bool_t _xdr_cp_result(XDR *, cp_result *);
bool_t _xdr_directory_obj(XDR *, directory_obj *);
bool_t _xdr_fd_args(XDR *, fd_args *);
bool_t _xdr_fd_result(XDR *, fd_result *);
bool_t _xdr_ib_request(XDR *, ib_request *);
bool_t _xdr_nis_error(XDR *, nis_error *);
bool_t _xdr_nis_name(XDR *, nis_name *);
bool_t _xdr_nis_object(XDR *, nis_object *);
bool_t _xdr_nis_result(XDR *, nis_result *);
bool_t _xdr_nis_server(XDR *, nis_server *);
bool_t _xdr_nis_tag(XDR *, nis_tag *);
bool_t _xdr_nis_taglist(XDR *, nis_taglist *);
bool_t _xdr_ns_request(XDR *, ns_request *);
bool_t _xdr_ping_args(XDR *, ping_args *);
bool_t xdr_cback_data(XDR *, cback_data *);
bool_t xdr_obj_p(XDR *, obj_p *);
static bool_t xdr_endpoint(XDR *, endpoint *);
static bool_t xdr_entry_col(XDR *, entry_col *);
static bool_t xdr_nis_attr(XDR *, nis_attr *);
static bool_t xdr_oar_mask(XDR *, oar_mask *);
static bool_t xdr_table_col(XDR *, table_col *);

File nis_server.c:
void nis_freetags(nis_tag *, const int);
nis_error nis_servstate(const nis_server *, const nis_tag *, const int, nis_tag **);
nis_error nis_stats(const nis_server *, const nis_tag *, const int, nis_tag **);

File nis_ping.c:
void nis_ping(const_nis_name, unsigned int, const nis_object *);

File nis_checkpoint.c:
nis_result *nis_checkpoint(const_nis_name);

File nis_mkdir.c:
nis_error nis_mkdir(const_nis_name, const nis_server *);

File nis_rmdir.c:
nis_error nis_rmdir(const_nis_name, const nis_server *);

File nis_getservlist.c:
void nis_freeservlist(nis_server **);
nis_server **nis_getservlist(const_nis_name);

File nis_verifygroup.c:
nis_error nis_verifygroup(const_nis_name);

File nis_ismember.c:
bool_t nis_ismember(const_nis_name, const_nis_name);
static int internal_ismember(const_nis_name, const_nis_name);

File nis_addmember.c:
nis_error nis_addmember(const_nis_name, const_nis_name);

File nis_util.c:
fd_result *__nis_finddirectory(directory_obj *, const_nis_name);

File nis_hash.c:
uint32_t __nis_hash(const void *, size_t);

File nis_removemember.c:
nis_error nis_removemember(const_nis_name, const_nis_name);

File nis_creategroup.c:
nis_error nis_creategroup(const_nis_name, unsigned int);

File nis_destroygroup.c:
nis_error nis_destroygroup(const_nis_name);

File nis_print_group_entry.c:
void nis_print_group_entry(const_nis_name);

File nis_domain_of.c:
const_nis_name __nis_domain_of(const_nis_name);
nis_name nis_domain_of(const_nis_name);

File nis_domain_of_r.c:
nis_name nis_domain_of_r(const_nis_name, char *, size_t);

File nis_modify.c:
nis_result *nis_modify(const_nis_name, const nis_object *);

File nis_remove.c:
nis_result *nis_remove(const_nis_name, const nis_object *);

File nis_add.c:
nis_result *nis_add(const_nis_name, const nis_object *);

File nis_defaults.c:
unsigned int __nis_default_access(char *, unsigned int);
nis_name __nis_default_group(char *);
nis_name __nis_default_owner(char *);
uint32_t __nis_default_ttl(char *);
static nis_name searchXYX(char *, const char *);
static unsigned int searchaccess(char *, unsigned int);
static uint32_t searchttl(char *);

File nis_findserv.c:
long int __nis_findfastest(dir_binding *);
u_short __pmap_getnisport(struct sockaddr_in *, u_long, u_long, u_int);

File nis_callback.c:
struct nis_cb *__nis_create_callback(int (*)(const_nis_name, const nis_object *, const void *), const void *, unsigned int);
nis_error __nis_destroy_callback(struct nis_cb *);
nis_error __nis_do_callback(struct dir_binding *, netobj *, struct nis_cb *);
static void cb_prog_1(struct svc_req *, SVCXPRT *);
static nis_error internal_nis_do_callback(struct dir_binding *, netobj *, struct nis_cb *);

File nis_clone_dir.c:
directory_obj *nis_clone_directory(const directory_obj *, directory_obj *);

File nis_clone_obj.c:
nis_object *nis_clone_object(const nis_object *, nis_object *);

File nis_clone_res.c:
nis_result *nis_clone_result(const nis_result *, nis_result *);

File nss-default.c:
int _nsl_default_nss(void);
static void init(void);

File dlopen.c:
void *__dlopen(const char *, int);
static void dlopen_doit(void *);

File dlclose.c:
int __dlclose(void *);
static void dlclose_doit(void *);

File dlsym.c:
void *__dlsym(void *, const char *);
static void dlsym_doit(void *);

File dlvsym.c:
void *__dlvsym(void *, const char *, const char *);
static void dlvsym_doit(void *);

File dlerror.c:
char *__dlerror(void);
int _dlerror_run(void (*)(void *), void *);
static void check_free(struct dl_action_result *);
static void fini(void);
static void free_key_mem(void *);
static void init(void);

File dladdr.c:
int __dladdr(const void *, Dl_info *);

File dladdr1.c:
int __dladdr1(const void *, Dl_info *, void **, int);

File dlinfo.c:
int __dlinfo(void *, int, void *);
static void dlinfo_doit(void *);

File dlmopen.c:
void *__dlmopen(Lmid_t, const char *, int);
static void dlmopen_doit(void *);

File dlfcn.c:
static void init(int, char **);

File dlopenold.c:
void *__dlopen_nocheck(const char *, int);
static void dlopen_doit(void *);

File ../sysdeps/ieee754/k_standard.c:
double __kernel_standard(double, double, int);

File ../sysdeps/ieee754/s_matherr.c:
int __matherr(struct exception *);

File ../sysdeps/i386/fpu/fclrexcpt.c:
int __feclearexcept(int);

File ../sysdeps/i386/fpu/fgetexcptflg.c:
int __fegetexceptflag(fexcept_t *, int);

File ../sysdeps/i386/fpu/fraiseexcpt.c:
int __feraiseexcept(int);

File ../sysdeps/i386/fpu/fsetexcptflg.c:
int __fesetexceptflag(const fexcept_t *, int);

File ../sysdeps/i386/fpu/ftestexcept.c:
int fetestexcept(int);

File ../sysdeps/i386/fpu/fegetround.c:
int fegetround(void);

File ../sysdeps/i386/fpu/fesetround.c:
int fesetround(int);

File ../sysdeps/i386/fpu/fegetenv.c:
int __fegetenv(fenv_t *);

File ../sysdeps/i386/fpu/feholdexcpt.c:
int feholdexcept(fenv_t *);

File ../sysdeps/i386/fpu/fesetenv.c:
int __fesetenv(const fenv_t *);

File ../sysdeps/i386/fpu/feupdateenv.c:
int __feupdateenv(const fenv_t *);

File ../sysdeps/i386/fpu/fedisblxcpt.c:
int fedisableexcept(int);

File ../sysdeps/i386/fpu/feenablxcpt.c:
int feenableexcept(int);

File ../sysdeps/i386/fpu/fegetexcept.c:
int fegetexcept(void);

File ../sysdeps/ieee754/dbl-64/e_cosh.c:
double __ieee754_cosh(double);

File ../sysdeps/ieee754/dbl-64/e_j0.c:
double __ieee754_j0(double);
double __ieee754_y0(double);
static double pzero(double);
static double qzero(double);

File ../sysdeps/ieee754/dbl-64/e_j1.c:
double __ieee754_j1(double);
double __ieee754_y1(double);
static double pone(double);
static double qone(double);

File ../sysdeps/ieee754/dbl-64/e_jn.c:
double __ieee754_jn(int, double);
double __ieee754_yn(int, double);

File ../sysdeps/ieee754/dbl-64/e_lgamma_r.c:
double __ieee754_lgamma_r(double, int *);

File ../sysdeps/ieee754/dbl-64/e_sinh.c:
double __ieee754_sinh(double);

File ../sysdeps/ieee754/dbl-64/e_gamma_r.c:
double __ieee754_gamma_r(double, int *);

File ../sysdeps/ieee754/dbl-64/k_tan.c:
double __kernel_tan(double, double, int);

File ../sysdeps/ieee754/dbl-64/s_erf.c:
double __erf(double);
double __erfc(double);

File s_nextafter.c:
double __nextafter(double, double);

File ../sysdeps/i386/fpu/s_nexttoward.c:
double __nexttoward(double, long double);

File ../sysdeps/ieee754/dbl-64/s_tanh.c:
double __tanh(double);

File w_acos.c:
double __acos(double);

File w_acosh.c:
double __acosh(double);

File w_asin.c:
double __asin(double);

File w_atan2.c:
double __atan2(double, double);

File w_atanh.c:
double __atanh(double);

File w_cosh.c:
double __cosh(double);

File w_drem.c:
double __drem(double, double);

File ../sysdeps/ieee754/dbl-64/w_exp.c:
double __exp(double);

File w_exp2.c:
double __exp2(double);

File w_exp10.c:
double __exp10(double);

File w_fmod.c:
double __fmod(double, double);

File w_tgamma.c:
double __tgamma(double);

File w_hypot.c:
double __hypot(double, double);

File w_j0.c:
double j0(double);
double y0(double);

File w_j1.c:
double j1(double);
double y1(double);

File w_jn.c:
double jn(int, double);
double yn(int, double);

File w_lgamma.c:
double __lgamma(double);

File w_lgamma_r.c:
double __lgamma_r(double, int *);

File w_log.c:
double __log(double);

File w_log10.c:
double __log10(double);

File w_pow.c:
double __pow(double, double);

File w_remainder.c:
double __remainder(double, double);

File w_scalb.c:
double __scalb(double, double);

File w_sinh.c:
double __sinh(double);

File w_sqrt.c:
double __sqrt(double);

File ../sysdeps/ieee754/dbl-64/s_fpclassify.c:
int __fpclassify(double);

File s_nan.c:
double __nan(const char *);

File ../sysdeps/ieee754/dbl-64/s_round.c:
double __round(double);

File conj.c:
complex double __conj(complex double);

File cimag.c:
double __cimag(complex double);

File creal.c:
double __creal(complex double);

File cabs.c:
double __cabs(complex double);

File carg.c:
double __carg(complex double);

File s_csinh.c:
complex double __csinh(complex double);

File s_ccosh.c:
complex double __ccosh(complex double);

File s_clog.c:
complex double __clog(complex double);

File s_catan.c:
complex double __catan(complex double);

File s_casin.c:
complex double __casin(complex double);

File s_ccos.c:
complex double __ccos(complex double);

File s_csin.c:
complex double __csin(complex double);

File s_ctan.c:
complex double __ctan(complex double);

File s_ctanh.c:
complex double __ctanh(complex double);

File s_cacos.c:
complex double __cacos(complex double);

File s_casinh.c:
complex double __casinh(complex double);

File s_cacosh.c:
complex double __cacosh(complex double);

File s_catanh.c:
complex double __catanh(complex double);

File s_csqrt.c:
complex double __csqrt(complex double);

File s_cpow.c:
complex double __cpow(complex double, complex double);

File s_cproj.c:
complex double __cproj(complex double);

File s_clog10.c:
complex double __clog10(complex double);

File ../math/s_fma.c:
double __fma_ia32(double, double, double);

File ../sysdeps/i386/i686/multiarch/s_fma.c:
void *__fma_ifunc(void);

File ../sysdeps/ieee754/dbl-64/s_lround.c:
long int __lround(double);

File ../sysdeps/ieee754/dbl-64/s_llround.c:
long long int __llround(double);

File w_log2.c:
double __log2(double);

File ../sysdeps/ieee754/dbl-64/s_isinf.c:
int __isinf(double);

File ../sysdeps/ieee754/dbl-64/s_isnan.c:
int __isnan(double);

File ../sysdeps/ieee754/dbl-64/s_modf.c:
double __modf(double, double *);

File s_ldexp.c:
double __ldexp(double, int);

File ../sysdeps/ieee754/dbl-64/s_signbit.c:
int __signbit(double);

File ../sysdeps/ieee754/flt-32/e_coshf.c:
float __ieee754_coshf(float);

File ../sysdeps/ieee754/flt-32/e_j0f.c:
float __ieee754_j0f(float);
float __ieee754_y0f(float);
static float pzerof(float);
static float qzerof(float);

File ../sysdeps/ieee754/flt-32/e_j1f.c:
float __ieee754_j1f(float);
float __ieee754_y1f(float);
static float ponef(float);
static float qonef(float);

File ../sysdeps/ieee754/flt-32/e_jnf.c:
float __ieee754_jnf(int, float);
float __ieee754_ynf(int, float);

File ../sysdeps/ieee754/flt-32/e_lgammaf_r.c:
float __ieee754_lgammaf_r(float, int *);

File ../sysdeps/ieee754/flt-32/e_sinhf.c:
float __ieee754_sinhf(float);

File ../sysdeps/ieee754/flt-32/e_gammaf_r.c:
float __ieee754_gammaf_r(float, int *);

File ../sysdeps/ieee754/flt-32/k_cosf.c:
float __kernel_cosf(float, float);

File ../sysdeps/ieee754/flt-32/k_sinf.c:
float __kernel_sinf(float, float, int);

File ../sysdeps/ieee754/flt-32/k_tanf.c:
float __kernel_tanf(float, float, int);

File ../sysdeps/ieee754/flt-32/s_erff.c:
float __erfcf(float);
float __erff(float);

File ../sysdeps/ieee754/flt-32/s_nextafterf.c:
float __nextafterf(float, float);

File ../sysdeps/i386/fpu/s_nexttowardf.c:
float __nexttowardf(float, long double);

File ../sysdeps/ieee754/flt-32/s_tanhf.c:
float __tanhf(float);

File w_acosf.c:
float __acosf(float);

File w_acoshf.c:
float __acoshf(float);

File w_asinf.c:
float __asinf(float);

File w_atan2f.c:
float __atan2f(float, float);

File w_atanhf.c:
float __atanhf(float);

File w_coshf.c:
float __coshf(float);

File w_dremf.c:
float __dremf(float, float);

File ../sysdeps/ieee754/flt-32/w_expf.c:
float __expf(float);

File w_exp2f.c:
float __exp2f(float);

File w_exp10f.c:
float __exp10f(float);

File w_fmodf.c:
float __fmodf(float, float);

File w_tgammaf.c:
float __tgammaf(float);

File w_hypotf.c:
float __hypotf(float, float);

File w_j0f.c:
float j0f(float);
float y0f(float);

File w_j1f.c:
float j1f(float);
float y1f(float);

File w_jnf.c:
float jnf(int, float);
float ynf(int, float);

File w_lgammaf.c:
float __lgammaf(float);

File w_lgammaf_r.c:
float __lgammaf_r(float, int *);

File w_logf.c:
float __logf(float);

File w_log10f.c:
float __log10f(float);

File w_powf.c:
float __powf(float, float);

File w_remainderf.c:
float __remainderf(float, float);

File w_scalbf.c:
float __scalbf(float, float);

File w_sinhf.c:
float __sinhf(float);

File w_sqrtf.c:
float __sqrtf(float);

File ../sysdeps/ieee754/flt-32/s_fpclassifyf.c:
int __fpclassifyf(float);

File s_nanf.c:
float __nanf(const char *);

File ../sysdeps/ieee754/flt-32/s_roundf.c:
float __roundf(float);

File conjf.c:
complex float __conjf(complex float);

File cimagf.c:
float __cimagf(complex float);

File crealf.c:
float __crealf(complex float);

File cabsf.c:
float __cabsf(complex float);

File cargf.c:
float __cargf(complex float);

File s_csinhf.c:
complex float __csinhf(complex float);

File s_ccoshf.c:
complex float __ccoshf(complex float);

File s_clogf.c:
complex float __clogf(complex float);

File s_catanf.c:
complex float __catanf(complex float);

File s_casinf.c:
complex float __casinf(complex float);

File s_ccosf.c:
complex float __ccosf(complex float);

File s_csinf.c:
complex float __csinf(complex float);

File s_ctanf.c:
complex float __ctanf(complex float);

File s_ctanhf.c:
complex float __ctanhf(complex float);

File s_cacosf.c:
complex float __cacosf(complex float);

File s_casinhf.c:
complex float __casinhf(complex float);

File s_cacoshf.c:
complex float __cacoshf(complex float);

File s_catanhf.c:
complex float __catanhf(complex float);

File s_csqrtf.c:
complex float __csqrtf(complex float);

File s_cpowf.c:
complex float __cpowf(complex float, complex float);

File s_cprojf.c:
complex float __cprojf(complex float);

File s_clog10f.c:
complex float __clog10f(complex float);

File ../math/s_fmaf.c:
float __fmaf_ia32(float, float, float);

File ../sysdeps/i386/i686/multiarch/s_fmaf.c:
void *__fmaf_ifunc(void);

File ../sysdeps/ieee754/flt-32/s_lroundf.c:
long int __lroundf(float);

File ../sysdeps/ieee754/flt-32/s_llroundf.c:
long long int __llroundf(float);

File w_log2f.c:
float __log2f(float);

File ../sysdeps/ieee754/flt-32/s_isinff.c:
int __isinff(float);

File ../sysdeps/ieee754/flt-32/s_isnanf.c:
int __isnanf(float);

File ../sysdeps/ieee754/flt-32/s_modff.c:
float __modff(float, float *);

File s_ldexpf.c:
float __ldexpf(float, int);

File ../sysdeps/ieee754/flt-32/s_signbitf.c:
int __signbitf(float);

File ../sysdeps/i386/fpu/e_acosl.c:
long double __ieee754_acosl(long double);

File ../sysdeps/ieee754/ldbl-96/e_asinl.c:
long double __ieee754_asinl(long double);

File ../sysdeps/i386/fpu/e_atan2l.c:
long double __ieee754_atan2l(long double, long double);

File ../sysdeps/ieee754/ldbl-96/e_coshl.c:
long double __ieee754_coshl(long double);

File ../sysdeps/i386/fpu/e_expl.c:
long double __ieee754_expl(long double);

File ../sysdeps/i386/fpu/e_fmodl.c:
long double __ieee754_fmodl(long double, long double);

File ../sysdeps/ieee754/ldbl-96/e_hypotl.c:
long double __ieee754_hypotl(long double, long double);

File ../sysdeps/ieee754/ldbl-96/e_j0l.c:
long double __ieee754_j0l(long double);
long double __ieee754_y0l(long double);
static long double pzero(long double);
static long double qzero(long double);

File ../sysdeps/ieee754/ldbl-96/e_j1l.c:
long double __ieee754_j1l(long double);
long double __ieee754_y1l(long double);
static long double pone(long double);
static long double qone(long double);

File ../sysdeps/ieee754/ldbl-96/e_jnl.c:
long double __ieee754_jnl(int, long double);
long double __ieee754_ynl(int, long double);

File ../sysdeps/ieee754/ldbl-96/e_lgammal_r.c:
long double __ieee754_lgammal_r(long double, int *);

File ../sysdeps/ieee754/ldbl-96/e_sinhl.c:
long double __ieee754_sinhl(long double);

File ../sysdeps/i386/fpu/e_sqrtl.c:
long double __ieee754_sqrtl(long double);

File ../sysdeps/ieee754/ldbl-96/e_gammal_r.c:
long double __ieee754_gammal_r(long double, int *);

File k_cosl.c:
long double __kernel_cosl(long double, long double);

File k_sinl.c:
long double __kernel_sinl(long double, long double, int);

File k_tanl.c:
long double __kernel_tanl(long double, long double, int);

File ../sysdeps/i386/fpu/s_atanl.c:
long double __atanl(long double);

File ../sysdeps/ieee754/ldbl-96/s_erfl.c:
long double __erfcl(long double);
long double __erfl(long double);

File ../sysdeps/i386/fpu/s_logbl.c:
long double __logbl(long double);

File ../sysdeps/i386/fpu/s_nextafterl.c:
long double __nextafterl(long double, long double);

File ../sysdeps/i386/fpu/s_rintl.c:
long double __rintl(long double);

File ../sysdeps/i386/fpu/s_significandl.c:
long double __significandl(long double);

File ../sysdeps/ieee754/ldbl-96/s_tanhl.c:
long double __tanhl(long double);

File w_acosl.c:
long double __acosl(long double);

File w_acoshl.c:
long double __acoshl(long double);

File w_asinl.c:
long double __asinl(long double);

File w_atan2l.c:
long double __atan2l(long double, long double);

File w_atanhl.c:
long double __atanhl(long double);

File w_coshl.c:
long double __coshl(long double);

File w_dreml.c:
long double __dreml(long double, long double);

File ../sysdeps/ieee754/ldbl-96/w_expl.c:
long double __expl(long double);

File w_exp2l.c:
long double __exp2l(long double);

File w_exp10l.c:
long double __exp10l(long double);

File w_fmodl.c:
long double __fmodl(long double, long double);

File w_tgammal.c:
long double __tgammal(long double);

File w_hypotl.c:
long double __hypotl(long double, long double);

File w_j0l.c:
long double __j0l(long double);
long double __y0l(long double);

File w_j1l.c:
long double __j1l(long double);
long double __y1l(long double);

File w_jnl.c:
long double __jnl(int, long double);
long double __ynl(int, long double);

File w_lgammal.c:
long double __lgammal(long double);

File w_lgammal_r.c:
long double __lgammal_r(long double, int *);

File w_logl.c:
long double __logl(long double);

File w_log10l.c:
long double __log10l(long double);

File w_powl.c:
long double __powl(long double, long double);

File w_remainderl.c:
long double __remainderl(long double, long double);

File w_scalbl.c:
long double __scalbl(long double, long double);

File w_sinhl.c:
long double __sinhl(long double);

File w_sqrtl.c:
long double __sqrtl(long double);

File ../sysdeps/i386/fpu/s_fpclassifyl.c:
int __fpclassifyl(long double);

File s_nanl.c:
long double __nanl(const char *);

File ../sysdeps/ieee754/ldbl-96/s_roundl.c:
long double __roundl(long double);

File conjl.c:
complex long double __conjl(complex long double);

File cimagl.c:
long double __cimagl(complex long double);

File creall.c:
long double __creall(complex long double);

File cabsl.c:
long double __cabsl(complex long double);

File cargl.c:
long double __cargl(complex long double);

File s_csinhl.c:
complex long double __csinhl(complex long double);

File s_ccoshl.c:
complex long double __ccoshl(complex long double);

File s_clogl.c:
complex long double __clogl(complex long double);

File s_catanl.c:
complex long double __catanl(complex long double);

File s_casinl.c:
complex long double __casinl(complex long double);

File s_ccosl.c:
complex long double __ccosl(complex long double);

File s_csinl.c:
complex long double __csinl(complex long double);

File s_ctanl.c:
complex long double __ctanl(complex long double);

File s_ctanhl.c:
complex long double __ctanhl(complex long double);

File s_cacosl.c:
complex long double __cacosl(complex long double);

File s_casinhl.c:
complex long double __casinhl(complex long double);

File s_cacoshl.c:
complex long double __cacoshl(complex long double);

File s_catanhl.c:
complex long double __catanhl(complex long double);

File s_csqrtl.c:
complex long double __csqrtl(complex long double);

File s_cpowl.c:
complex long double __cpowl(complex long double, complex long double);

File s_cprojl.c:
complex long double __cprojl(complex long double);

File s_clog10l.c:
complex long double __clog10l(complex long double);

File ../sysdeps/ieee754/ldbl-96/s_lroundl.c:
long int __lroundl(long double);

File ../sysdeps/ieee754/ldbl-96/s_llroundl.c:
long long int __llroundl(long double);

File w_log2l.c:
long double __log2l(long double);

File ../sysdeps/i386/fpu/s_isinfl.c:
int __isinfl(long double);

File ../sysdeps/i386/fpu/s_isnanl.c:
int __isnanl(long double);

File ../sysdeps/ieee754/ldbl-96/s_modfl.c:
long double __modfl(long double, long double *);

File s_ldexpl.c:
long double __ldexpl(long double, int);

File ../sysdeps/ieee754/ldbl-96/s_signbitl.c:
int __signbitl(long double);

File ../sysdeps/i386/i686/multiarch/s_fma-fma.c:
double __fma_fma(double, double, double);

File ../sysdeps/i386/i686/multiarch/s_fmaf-fma.c:
float __fmaf_fma(float, float, float);

File crypt-entry.c:
char *__crypt_r(const char *, const char *, struct crypt_data *);
char *crypt(const char *, const char *);

File md5-crypt.c:
char *__md5_crypt(const char *, const char *);
char *__md5_crypt_r(const char *, const char *, char *);

File sha256-crypt.c:
char *__sha256_crypt(const char *, const char *);
char *__sha256_crypt_r(const char *, const char *, char *);

File sha512-crypt.c:
char *__sha512_crypt(const char *, const char *);
char *__sha512_crypt_r(const char *, const char *, char *);

File crypt_util.c:
void __encrypt_r(char *, int, struct crypt_data *);
void __init_des(void);
void __init_des_r(struct crypt_data *);
void __setkey_r(const char *, struct crypt_data *);
void _ufc_dofinalperm_r(ufc_long *, struct crypt_data *);
void _ufc_mk_keytab_r(const char *, struct crypt_data *);
void _ufc_output_conversion_r(ufc_long, ufc_long, const char *, struct crypt_data *);
void _ufc_setup_salt_r(const char *, struct crypt_data *);
void encrypt(char *, int);
void setkey(const char *);

File crypt.c:
void _ufc_doit_r(ufc_long, struct crypt_data *, ufc_long *);

File md5.c:
void *__md5_buffer(const char *, size_t, void *);
void *__md5_finish_ctx(struct md5_ctx *, void *);
void __md5_init_ctx(struct md5_ctx *);
void __md5_process_block(const void *, size_t, struct md5_ctx *);
void __md5_process_bytes(const void *, size_t, struct md5_ctx *);
void *__md5_read_ctx(const struct md5_ctx *, void *);
int __md5_stream(FILE *, void *);

File sha256.c:
void *__sha256_finish_ctx(struct sha256_ctx *, void *);
void __sha256_init_ctx(struct sha256_ctx *);
void __sha256_process_bytes(const void *, size_t, struct sha256_ctx *);
static void sha256_process_block(const void *, size_t, struct sha256_ctx *);

File sha512.c:
void *__sha512_finish_ctx(struct sha512_ctx *, void *);
void __sha512_init_ctx(struct sha512_ctx *);
void __sha512_process_bytes(const void *, size_t, struct sha512_ctx *);
static void sha512_process_block(const void *, size_t, struct sha512_ctx *);

File login.c:
void login(const struct utmp *);
static int tty_name(int, char **, size_t);

File login_tty.c:
int login_tty(int);

File logout.c:
int logout(const char *);

File logwtmp.c:
void logwtmp(const char *, const char *, const char *);

File openpty.c:
int openpty(int *, int *, char *, const struct termios *, const struct winsize *);

File forkpty.c:
int forkpty(int *, char *, const struct termios *, const struct winsize *);

File soinit.c:
void __libc_fini(void);
void __libc_global_ctors(void);

File ../sysdeps/unix/sysv/linux/init-first.c:
void __libc_init_first(int, char **, char **);
void _dl_start(void);
void _init(int, char **, char **);

File libc-start.c:
int __libc_start_main(int (*)(int, char **, char **), int, char **, int (*)(int, char **, char **), void (*)(void), void (*)(void), void *);

File version.c:
const char *__gnu_get_libc_release(void);
const char *__gnu_get_libc_version(void);
void __libc_main(void);
void __libc_print_version(void);

File check_fds.c:
void __libc_check_standard_fds(void);
static void check_one_fd(int, int);

File ../sysdeps/gnu/unwind-resume.c:
void _Unwind_Resume(struct _Unwind_Exception *);
_Unwind_Reason_Code __gcc_personality_v0(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, struct _Unwind_Context *);
static void init(void);

File ../sysdeps/x86_64/multiarch/init-arch.c:
const struct cpu_features *__get_cpu_features(void);
void __init_cpu_features(void);

File errno-loc.c:
int *__errno_location(void);

File ../sysdeps/wordsize-32/divdi3.c:
DItype __divdi3(DItype, DItype);
DItype __moddi3(DItype, DItype);
UDItype __udivdi3(UDItype, UDItype);
UDItype __umoddi3(UDItype, UDItype);
static UDItype __udivmoddi4(UDItype, UDItype, UDItype *);

File iconv_open.c:
iconv_t iconv_open(const char *, const char *);

File gconv_charset.h:
static void strip(char *, const char *);

File iconv.c:
size_t iconv(iconv_t, char **, size_t *, char **, size_t *);

File iconv_close.c:
int iconv_close(iconv_t);

File gconv_open.c:
int __gconv_open(const char *, const char *, __gconv_t *, int);

File gconv.c:
int __gconv(__gconv_t, const unsigned char **, const unsigned char *, unsigned char **, unsigned char *, size_t *);

File gconv_close.c:
int __gconv_close(__gconv_t);

File gconv_db.c:
int __gconv_alias_compare(const void *, const void *);
int __gconv_close_transform(struct __gconv_step *, size_t);
int __gconv_compare_alias(const char *, const char *);
int __gconv_find_transform(const char *, const char *, struct __gconv_step **, size_t *, int);
void *__gconv_get_alias_db(void);
struct gconv_module *__gconv_get_modules_db(void);
void __gconv_release_step(struct __gconv_step *);
static int derivation_compare(const void *, const void *);
static const char *do_lookup_alias(const char *);
static int find_derivation(const char *, const char *, const char *, const char *, struct __gconv_step **, size_t *);
static void free_derivation(void *);
static void free_mem(void);
static void free_modules_db(struct gconv_module *);

File gconv_conf.c:
void __gconv_get_path(void);
void __gconv_read_conf(void);
static void add_alias2(const char *, const char *, const char *, void *);
static void add_module(char *, const char *, size_t, void **, size_t *, int);
static void free_mem(void);
static void insert_module(struct gconv_module *, int);

File gconv_builtin.c:
void __gconv_get_builtin_trans(const char *, struct __gconv_step *);

File gconv_simple.c:
wint_t __gconv_btwoc_ascii(struct __gconv_step *, unsigned char);

File ../iconv/skeleton.c:
int __gconv_transform_ascii_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ascii(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs2(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs2reverse(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs4(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs4le(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_utf8(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs2_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs2reverse_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs4_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs4le_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_utf8_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);

File gconv_trans.c:
int __gconv_translit_find(struct trans_struct *);
int __gconv_transliterate(struct __gconv_step *, struct __gconv_step_data *, void *, const unsigned char *, const unsigned char **, const unsigned char *, unsigned char **, size_t *);
static int open_translit(struct known_trans *);
static int trans_compare(const void *, const void *);

File gconv_cache.c:
int __gconv_compare_alias_cache(const char *, const char *, int *);
void *__gconv_get_cache(void);
int __gconv_load_cache(void);
int __gconv_lookup_cache(const char *, const char *, struct __gconv_step **, size_t *, int);
void __gconv_release_cache(struct __gconv_step *, size_t);
static int find_module(const char *, const char *, struct __gconv_step *);
static int find_module_idx(const char *, size_t *);
static void free_mem(void);

File gconv_dl.c:
struct __gconv_loaded_object *__gconv_find_shlib(const char *);
void __gconv_release_shlib(struct __gconv_loaded_object *);
static void do_release_all(void *);
static void do_release_shlib(void *, VISIT, int);
static void free_mem(void);
static int known_compare(const void *, const void *);

File mb_cur_max.c:
size_t __ctype_get_mb_cur_max(void);

File setlocale.c:
void _nl_locale_subfreeres(void);
char *setlocale(int, const char *);
static char *new_composite_name(int, const char **);
static void setname(int, const char *);

File findlocale.c:
struct __locale_data *_nl_find_locale(const char *, size_t, int, const char **);
void _nl_remove_locale(int, struct __locale_data *);

File ../iconv/gconv_charset.h:
static void strip(char *, const char *);

File loadlocale.c:
struct __locale_data *_nl_intern_locale_data(int, const void *, size_t);
void _nl_load_locale(struct loaded_l10nfile *, int);
void _nl_unload_locale(struct __locale_data *);

File loadarchive.c:
void _nl_archive_subfreeres(void);
struct __locale_data *_nl_load_locale_from_archive(int, const char **);
static int rangecmp(const void *, const void *);

File localeconv.c:
struct lconv *__localeconv(void);

File nl_langinfo.c:
char *nl_langinfo(nl_item);

File nl_langinfo_l.c:
char *__nl_langinfo_l(nl_item, __locale_t);

File newlocale.c:
__locale_t __newlocale(int, const char *, __locale_t);

File duplocale.c:
__locale_t __duplocale(__locale_t);

File freelocale.c:
void __freelocale(__locale_t);

File uselocale.c:
struct __locale_struct *__uselocale(locale_t);

File coll-lookup.c:
int32_t __collidx_table_lookup(const char *, uint32_t);
uint32_t __collseq_table_lookup(const char *, uint32_t);

File lc-ctype.c:
void _nl_postload_ctype(void);

File localename.c:
const char *__current_locale_name(int);

File assert.c:
void __assert_fail(const char *, const char *, unsigned int, const char *);

File assert-perr.c:
void __assert_perror_fail(int, const char *, unsigned int, const char *);

File __assert.c:
void __assert(const char *, const char *, int);

File ctype.c:
int isalnum(int);
int isalpha(int);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
int tolower(int);
int toupper(int);

File ctype-extn.c:
int __isblank_l(int, __locale_t);
int _tolower(int);
int _toupper(int);
int isascii(int);
int isblank(int);
int toascii(int);

File ctype_l.c:
int __isalnum_l(int, __locale_t);
int __isalpha_l(int, __locale_t);
int __iscntrl_l(int, __locale_t);
int __isdigit_l(int, __locale_t);
int __isgraph_l(int, __locale_t);
int __islower_l(int, __locale_t);
int __isprint_l(int, __locale_t);
int __ispunct_l(int, __locale_t);
int __isspace_l(int, __locale_t);
int __isupper_l(int, __locale_t);
int __isxdigit_l(int, __locale_t);
int __tolower_l(int, __locale_t);
int __toupper_l(int, __locale_t);

File isctype.c:
int __isctype(int, int);

File ../include/ctype.h:
const short unsigned int **__ctype_b_loc(void);
const __int32_t **__ctype_tolower_loc(void);
const __int32_t **__ctype_toupper_loc(void);

File bindtextdom.c:
char *__bind_textdomain_codeset(const char *, const char *);
char *__bindtextdomain(const char *, const char *);
static void set_binding_values(const char *, const char **, const char **);

File dcgettext.c:
char *__dcgettext(const char *, const char *, int);

File dgettext.c:
char *__dgettext(const char *, const char *);

File gettext.c:
char *__gettext(const char *);

File dcigettext.c:
char *__dcigettext(const char *, const char *, const char *, int, long unsigned int, int);
char *_nl_find_msg(struct loaded_l10nfile *, struct binding *, const char *, int, size_t *);
static void free_mem(void);

File plural-eval.c:
static long unsigned int plural_eval(const struct expression *, long unsigned int);

File dcigettext.c:
static char *plural_lookup(struct loaded_l10nfile *, long unsigned int, const char *, size_t);
static int transcmp(const void *, const void *);

File dcngettext.c:
char *__dcngettext(const char *, const char *, const char *, long unsigned int, int);

File dngettext.c:
char *__dngettext(const char *, const char *, const char *, long unsigned int);

File ngettext.c:
char *__ngettext(const char *, const char *, long unsigned int);

File finddomain.c:
struct loaded_l10nfile *_nl_find_domain(const char *, char *, const char *, struct binding *);
void _nl_finddomain_subfreeres(void);

File loadmsgcat.c:
void _nl_load_domain(struct loaded_l10nfile *, struct binding *);
void _nl_unload_domain(struct loaded_domain *);

File localealias.c:
const char *_nl_expand_alias(const char *);
static int alias_compare(const struct alias_map *, const struct alias_map *);
static size_t read_alias_file(const char *, int);

File textdomain.c:
char *__textdomain(const char *);

File l10nflist.c:
struct loaded_l10nfile *_nl_make_l10nflist(struct loaded_l10nfile **, const char *, size_t, int, const char *, const char *, const char *, const char *, const char *, const char *, int);
const char *_nl_normalize_codeset(const char *, size_t);

File explodename.c:
int _nl_explode_name(char *, const char **, const char **, const char **, const char **, const char **);

File plural.y:
void __gettext_free_exp(struct expression *);

File plural.c:
int __gettextparse(void *);

File plural.y:
static struct expression *new_exp(int, enum operator, struct expression * const *);

File plural-exp.c:
void __gettext_extract_plural(const char *, const struct expression **, long unsigned int *);

File hash-string.c:
long unsigned int __hash_string(const char *);

File catgets.c:
int catclose(nl_catd);
char *catgets(nl_catd, int, int, const char *);
nl_catd catopen(const char *, int);

File open_catalog.c:
int __open_catalog(const char *, const char *, const char *, __nl_catd);

File ../sysdeps/ieee754/dbl-64/s_isinf.c:
int __isinf(double);

File ../sysdeps/ieee754/dbl-64/s_isnan.c:
int __isnan(double);

File ../sysdeps/ieee754/dbl-64/s_modf.c:
double __modf(double, double *);

File s_ldexp.c:
double __ldexp(double, int);

File ../sysdeps/ieee754/dbl-64/s_signbit.c:
int __signbit(double);

File ../sysdeps/ieee754/flt-32/s_isinff.c:
int __isinff(float);

File ../sysdeps/ieee754/flt-32/s_isnanf.c:
int __isnanf(float);

File ../sysdeps/ieee754/flt-32/s_modff.c:
float __modff(float, float *);

File s_ldexpf.c:
float __ldexpf(float, int);

File ../sysdeps/ieee754/flt-32/s_signbitf.c:
int __signbitf(float);

File ../sysdeps/i386/fpu/s_isinfl.c:
int __isinfl(long double);

File ../sysdeps/i386/fpu/s_isnanl.c:
int __isnanl(long double);

File ../sysdeps/ieee754/ldbl-96/s_modfl.c:
long double __modfl(long double, long double *);

File s_ldexpl.c:
long double __ldexpl(long double, int);

File ../sysdeps/ieee754/ldbl-96/s_signbitl.c:
int __signbitl(long double);

File ../sysdeps/i386/setfpucw.c:
void __setfpucw(fpu_control_t);

File sigjmp.c:
int __sigjmp_save(struct __jmp_buf_tag *, int);

File longjmp.c:
void __libc_siglongjmp(struct __jmp_buf_tag *, int);

File ../nptl/sysdeps/unix/sysv/linux/jmp-unwind.c:
void _longjmp_unwind(struct __jmp_buf_tag *, int);

File ../sysdeps/posix/signal.c:
__sighandler_t __bsd_signal(int, __sighandler_t);

File ../nptl/sysdeps/unix/sysv/linux/raise.c:
int raise(int);

File ../sysdeps/posix/killpg.c:
int killpg(__pid_t, int);

File ../sysdeps/unix/sysv/linux/i386/sigaction.c:
int __libc_sigaction(int, const struct sigaction *, struct sigaction *);

File ../nptl/sigaction.c:
int __sigaction(int, const struct sigaction *, struct sigaction *);

File ../sysdeps/unix/sysv/linux/sigprocmask.c:
int __sigprocmask(int, const sigset_t *, sigset_t *);

File ../sysdeps/unix/sysv/linux/sigpending.c:
int sigpending(sigset_t *);

File ../sysdeps/unix/sysv/linux/sigsuspend.c:
int __sigsuspend(const sigset_t *);
int __sigsuspend_nocancel(const sigset_t *);

File ../nptl/sysdeps/unix/sysv/linux/../../../../../sysdeps/unix/sysv/linux/sigwait.c:
int __sigwait(const sigset_t *, int *);
static int do_sigwait(const sigset_t *, int *);

File ../sysdeps/posix/sigblock.c:
int __sigblock(int);

File ../sysdeps/posix/sigsetmask.c:
int __sigsetmask(int);

File ../sysdeps/posix/sigpause.c:
int __default_sigpause(int);
int __sigpause(int, int);
int __xpg_sigpause(int);
static int do_sigpause(int, int);

File ../sysdeps/posix/sigvec.c:
int __sigvec(int, const struct sigvec *, struct sigvec *);

File ../sysdeps/unix/sysv/linux/sigstack.c:
int sigstack(struct sigstack *, struct sigstack *);

File ../sysdeps/posix/sigintr.c:
int siginterrupt(int, int);

File ../sysdeps/unix/sysv/linux/bits/sigset.h:
int __sigaddset(__sigset_t *, int);
int __sigdelset(__sigset_t *, int);
int __sigismember(const __sigset_t *, int);

File sigempty.c:
int sigemptyset(sigset_t *);

File ../signal/sigfillset.c:
int sigfillset(sigset_t *);

File sigaddset.c:
int sigaddset(sigset_t *, int);

File sigdelset.c:
int sigdelset(sigset_t *, int);

File sigismem.c:
int sigismember(const sigset_t *, int);

File ../signal/sigreturn.c:
int __sigreturn(struct sigcontext *);

File siggetmask.c:
int siggetmask(void);

File ../sysdeps/posix/sysv_signal.c:
__sighandler_t __sysv_signal(int, __sighandler_t);

File sigisempty.c:
int sigisemptyset(const sigset_t *);

File sigandset.c:
int sigandset(sigset_t *, const sigset_t *, const sigset_t *);

File sigorset.c:
int sigorset(sigset_t *, const sigset_t *, const sigset_t *);

File ../nptl/sysdeps/unix/sysv/linux/allocrtsig.c:
int __libc_allocate_rtsig(int);
int __libc_current_sigrtmax(void);
int __libc_current_sigrtmin(void);

File ../nptl/sysdeps/unix/sysv/linux/../../../../../sysdeps/unix/sysv/linux/sigtimedwait.c:
int __sigtimedwait(const sigset_t *, siginfo_t *, const struct timespec *);
static int do_sigtimedwait(const sigset_t *, siginfo_t *, const struct timespec *);

File ../nptl/sysdeps/unix/sysv/linux/../../../../../sysdeps/unix/sysv/linux/sigwaitinfo.c:
int __sigwaitinfo(const sigset_t *, siginfo_t *);
static int do_sigwaitinfo(const sigset_t *, siginfo_t *);

File ../sysdeps/unix/sysv/linux/sigqueue.c:
int __sigqueue(pid_t, int, const union sigval);

File sighold.c:
int sighold(int);

File sigrelse.c:
int sigrelse(int);

File ../sysdeps/posix/sigignore.c:
int sigignore(int);

File ../sysdeps/posix/sigset.c:
__sighandler_t sigset(int, __sighandler_t);

File ../stdlib/gmp.h:
mp_limb_t __mpn_add(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
mp_limb_t __mpn_add_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);
mp_limb_t __mpn_sub(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
mp_limb_t __mpn_sub_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);

File cmp.c:
int __mpn_cmp(mp_srcptr, mp_srcptr, mp_size_t);

File divmod_1.c:
mp_limb_t __mpn_divmod_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);

File divrem.c:
mp_limb_t __mpn_divrem(mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr, mp_size_t);

File mod_1.c:
mp_limb_t __mpn_mod_1(mp_srcptr, mp_size_t, mp_limb_t);

File mul.c:
mp_limb_t __mpn_mul(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);

File mul_n.c:
void __mpn_impn_mul_n(mp_ptr, mp_srcptr, mp_srcptr, mp_size_t, mp_ptr);
void __mpn_impn_mul_n_basecase(mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);
void __mpn_impn_sqr_n(mp_ptr, mp_srcptr, mp_size_t, mp_ptr);
void __mpn_impn_sqr_n_basecase(mp_ptr, mp_srcptr, mp_size_t);
void __mpn_mul_n(mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

File ../sysdeps/ieee754/dbl-64/dbl2mpn.c:
mp_size_t __mpn_extract_double(mp_ptr, mp_size_t, int *, int *, double);

File ../sysdeps/i386/ldbl2mpn.c:
mp_size_t __mpn_extract_long_double(mp_ptr, mp_size_t, int *, int *, long double);

File ../sysdeps/ieee754/flt-32/mpn2flt.c:
float __mpn_construct_float(mp_srcptr, int, int);

File ../sysdeps/ieee754/dbl-64/mpn2dbl.c:
double __mpn_construct_double(mp_srcptr, int, int);

File ../sysdeps/ieee754/ldbl-96/mpn2ldbl.c:
long double __mpn_construct_long_double(mp_srcptr, int, int);

File atof.c:
double atof(const char *);

File atoi.c:
int atoi(const char *);

File atol.c:
long int atol(const char *);

File atoll.c:
long long int atoll(const char *);

File abort.c:
void abort(void);

File bsearch.c:
void *bsearch(const void *, const void *, size_t, size_t, int (*)(const void *, const void *));

File qsort.c:
void _quicksort(void * const, size_t, size_t, __compar_d_fn_t, void *);

File msort.c:
void qsort(void *, size_t, size_t, __compar_fn_t);
void qsort_r(void *, size_t, size_t, __compar_d_fn_t, void *);
static void msort_with_tmp(const struct msort_param *, void *, size_t);

File getenv.c:
char *getenv(const char *);

File putenv.c:
int putenv(char *);

File setenv.c:
int __add_to_environ(const char *, const char *, const char *, int);
int __clearenv(void);
int __setenv(const char *, const char *, int);
int __unsetenv(const char *);
static void free_mem(void);

File secure-getenv.c:
char *__secure_getenv(const char *);

File exit.c:
void __run_exit_handlers(int, struct exit_function_list **, _Bool);
void exit(int);

File on_exit.c:
int __on_exit(void (*)(int, void *), void *);

File cxa_atexit.c:
int __cxa_atexit(void (*)(void *), void *, void *);
int __internal_atexit(void (*)(void *), void *, void *, struct exit_function_list **);
struct exit_function *__new_exitfn(struct exit_function_list **);

File cxa_finalize.c:
void __cxa_finalize(void *);

File atexit.c:
int __dyn_atexit(void (*)(void));

File quick_exit.c:
void quick_exit(int);

File cxa_at_quick_exit.c:
int __cxa_at_quick_exit(void (*)(void *), void *);

File abs.c:
int abs(int);

File labs.c:
long int labs(long int);

File ../stdlib/llabs.c:
long long int llabs(long long int);

File div.c:
div_t div(int, int);

File ldiv.c:
ldiv_t ldiv(long int, long int);

File ../stdlib/lldiv.c:
lldiv_t lldiv(long long int, long long int);

File random.c:
char *__initstate(unsigned int, char *, size_t);
long int __random(void);
char *__setstate(char *);
void __srandom(unsigned int);

File random_r.c:
int __initstate_r(unsigned int, char *, size_t, struct random_data *);
int __random_r(struct random_data *, int32_t *);
int __setstate_r(char *, struct random_data *);
int __srandom_r(unsigned int, struct random_data *);

File rand.c:
int rand(void);

File rand_r.c:
int rand_r(unsigned int *);

File drand48.c:
double drand48(void);

File erand48.c:
double erand48(short unsigned int *);

File lrand48.c:
long int lrand48(void);

File nrand48.c:
long int nrand48(short unsigned int *);

File mrand48.c:
long int mrand48(void);

File jrand48.c:
long int jrand48(short unsigned int *);

File srand48.c:
void srand48(long int);

File seed48.c:
short unsigned int *seed48(short unsigned int *);

File lcong48.c:
void lcong48(short unsigned int *);

File drand48_r.c:
int drand48_r(struct drand48_data *, double *);

File erand48_r.c:
int __erand48_r(short unsigned int *, struct drand48_data *, double *);

File lrand48_r.c:
int lrand48_r(struct drand48_data *, long int *);

File nrand48_r.c:
int __nrand48_r(short unsigned int *, struct drand48_data *, long int *);

File mrand48_r.c:
int mrand48_r(struct drand48_data *, long int *);

File jrand48_r.c:
int __jrand48_r(short unsigned int *, struct drand48_data *, long int *);

File srand48_r.c:
int __srand48_r(long int, struct drand48_data *);

File seed48_r.c:
int __seed48_r(short unsigned int *, struct drand48_data *);

File lcong48_r.c:
int __lcong48_r(short unsigned int *, struct drand48_data *);

File drand48-iter.c:
int __drand48_iterate(short unsigned int *, struct drand48_data *);

File strtol.c:
long int __strtol_internal(const char *, char **, int, int);
long int strtol(const char *, char **, int);
long unsigned int __strtoul_internal(const char *, char **, int, int);
long unsigned int strtoul(const char *, char **, int);

File ./strtol.c:
long long int __strtoll_internal(const char *, char **, int, int);
long long int strtoll(const char *, char **, int);
long long unsigned int __strtoull_internal(const char *, char **, int, int);
long long unsigned int strtoull(const char *, char **, int);

File strtol_l.c:
long int ____strtol_l_internal(const char *, char **, int, int, __locale_t);
long int __strtol_l(const char *, char **, int, __locale_t);
long unsigned int ____strtoul_l_internal(const char *, char **, int, int, __locale_t);
long unsigned int __strtoul_l(const char *, char **, int, __locale_t);

File ./strtol_l.c:
long long int ____strtoll_l_internal(const char *, char **, int, int, __locale_t);
long long int __strtoll_l(const char *, char **, int, __locale_t);
long long unsigned int ____strtoull_l_internal(const char *, char **, int, int, __locale_t);
long long unsigned int __strtoull_l(const char *, char **, int, __locale_t);

File strtod.c:
float __strtof_internal(const char *, char **, int);
float strtof(const char *, char **);
double __strtod_internal(const char *, char **, int);
double strtod(const char *, char **);
long double __strtold_internal(const char *, char **, int);
long double strtold(const char *, char **);

File strtod_l.c:
float ____strtof_l_internal(const char *, char **, int, __locale_t);
float __strtof_l(const char *, char **, __locale_t);
static float round_and_return(mp_limb_t *, int, int, mp_limb_t, mp_size_t, int);
static const char *str_to_mpn(const char *, int, mp_limb_t *, mp_size_t *, int *, const char *, size_t, const char *);
double ____strtod_l_internal(const char *, char **, int, __locale_t);
double __strtod_l(const char *, char **, __locale_t);
static double round_and_return(mp_limb_t *, int, int, mp_limb_t, mp_size_t, int);
static const char *str_to_mpn(const char *, int, mp_limb_t *, mp_size_t *, int *, const char *, size_t, const char *);

File ../stdlib/strtod_l.c:
long double ____strtold_l_internal(const char *, char **, int, __locale_t);
long double __strtold_l(const char *, char **, __locale_t);
static long double round_and_return(mp_limb_t *, int, int, mp_limb_t, mp_size_t, int);
static const char *str_to_mpn(const char *, int, mp_limb_t *, mp_size_t *, int *, const char *, size_t, const char *);

File ../sysdeps/posix/system.c:
int __libc_system(const char *);

File ../sysdeps/unix/sysv/linux/system.c:
static void cancel_handler(void *);

File ../sysdeps/posix/system.c:
static int do_system(const char *);

File canonicalize.c:
char *__canonicalize_file_name(const char *);
char *__old_realpath(const char *, char *);
char *__realpath(const char *, char *);

File a64l.c:
long int a64l(const char *);

File l64a.c:
char *l64a(long int);

File getsubopt.c:
int getsubopt(char **, char * const *, char **);

File xpg_basename.c:
char *__xpg_basename(char *);

File ../sysdeps/wordsize-32/strtoimax.c:
intmax_t strtoimax(const char *, char **, int);

File ../sysdeps/wordsize-32/strtoumax.c:
uintmax_t strtoumax(const char *, char **, int);

File strfmon.c:
ssize_t __strfmon(char *, size_t, const char *, ...);

File strfmon_l.c:
ssize_t ___strfmon_l(char *, size_t, __locale_t, const char *, ...);
ssize_t __vstrfmon_l(char *, size_t, __locale_t, const char *, va_list);

File mblen.c:
int mblen(const char *, size_t);

File mbstowcs.c:
size_t mbstowcs(wchar_t *, const char *, size_t);

File mbtowc.c:
int mbtowc(wchar_t *, const char *, size_t);

File wcstombs.c:
size_t wcstombs(char *, const wchar_t *, size_t);

File wctomb.c:
int wctomb(char *, wchar_t);

File ../sysdeps/wordsize-32/wcstoimax.c:
intmax_t wcstoimax(const wchar_t *, wchar_t **, int);

File ../sysdeps/wordsize-32/wcstoumax.c:
uintmax_t wcstoumax(const wchar_t *, wchar_t **, int);

File rpmatch.c:
int rpmatch(const char *);

File fmtmsg.c:
int addseverity(int, const char *);
int fmtmsg(long int, const char *, int, const char *, const char *, const char *);
static void free_mem(void);
static void init(void);
static int internal_addseverity(int, const char *);

File grouping.c:
const char *__correctly_grouped_prefixmb(const char *, const char *, const char *, const char *);
const wchar_t *__correctly_grouped_prefixwc(const wchar_t *, const wchar_t *, wchar_t, const char *);

File ../sysdeps/posix/ctermid.c:
char *ctermid(char *);

File ../sysdeps/posix/cuserid.c:
char *cuserid(char *);

File _itoa.c:
char *_fitoa(long long unsigned int, char *, unsigned int, int);
char *_fitoa_word(long unsigned int, char *, unsigned int, int);
char *_itoa(long long unsigned int, char *, unsigned int, int);
char *_itoa_word(long unsigned int, char *, unsigned int, int);

File _itowa.c:
wchar_t *_itowa(long long unsigned int, wchar_t *, unsigned int, int);

File vfprintf.c:
int _IO_vfprintf_internal(_IO_FILE *, const char *, __gnuc_va_list);
static int _IO_helper_overflow(_IO_FILE *, int);

File _i18n_number.h:
static char *_i18n_number_rewrite(char *, char *, char *);

File vfprintf.c:
static int buffered_vfprintf(_IO_FILE *, const char *, __gnuc_va_list);
static char *group_number(char *, char *, const char *, const char *);

File vprintf.c:
int __vprintf(const char *, __gnuc_va_list);

File printf_fp.c:
int ___printf_fp(_IO_FILE *, const struct printf_info *, const void * const *);
unsigned int __guess_grouping(unsigned int, const char *);

File _i18n_number.h:
static char *_i18n_number_rewrite(char *, char *, char *);

File reg-printf.c:
int __register_printf_function(int, printf_function *, printf_arginfo_function *);
int __register_printf_specifier(int, printf_function *, printf_arginfo_size_function *);

File printf-prs.c:
size_t parse_printf_format(const char *, size_t, int *);

File ../stdio-common/printf_fphex.c:
int __printf_fphex(_IO_FILE *, const struct printf_info *, const void * const *);

File reg-modifier.c:
int __handle_registered_modifier_mb(const unsigned char **, struct printf_info *);
int __handle_registered_modifier_wc(const unsigned int **, struct printf_info *);
int __register_printf_modifier(const wchar_t *);
static void free_mem(void);

File reg-type.c:
int __register_printf_type(printf_va_arg_function *);

File printf_size.c:
int __printf_size(_IO_FILE *, const struct printf_info *, const void * const *);
int printf_size_info(const struct printf_info *, size_t, int *);

File fprintf.c:
int __fprintf(FILE *, const char *, ...);

File printf.c:
int __printf(const char *, ...);

File snprintf.c:
int __snprintf(char *, size_t, const char *, ...);

File sprintf.c:
int __sprintf(char *, const char *, ...);

File asprintf.c:
int ___asprintf(char **, const char *, ...);

File dprintf.c:
int __dprintf(int, const char *, ...);

File vfscanf.c:
int _IO_vfscanf_internal(_IO_FILE *, const char *, __gnuc_va_list, int *);
int ___vfscanf(FILE *, const char *, __gnuc_va_list);

File fscanf.c:
int __fscanf(FILE *, const char *, ...);

File scanf.c:
int __scanf(const char *, ...);

File sscanf.c:
int __sscanf(const char *, const char *, ...);

File perror.c:
void perror(const char *);
static void perror_internal(FILE *, const char *, int);

File psignal.c:
void psignal(int, const char *);

File tmpfile.c:
FILE *__new_tmpfile(void);

File ./tmpfile.c:
FILE *tmpfile64(void);

File tmpnam.c:
char *tmpnam(char *);

File tmpnam_r.c:
char *tmpnam_r(char *);

File tempnam.c:
char *tempnam(const char *, const char *);

File ../sysdeps/posix/tempname.c:
int __gen_tempname(char *, int, int, int);
int __path_search(char *, size_t, const char *, const char *, int);
static int direxists(const char *);

File getline.c:
__ssize_t __getline(char **, size_t *, FILE *);

File getw.c:
int getw(FILE *);

File putw.c:
int putw(int, FILE *);

File ../sysdeps/posix/remove.c:
int remove(const char *);

File ../sysdeps/unix/sysv/linux/renameat.c:
void __atfct_seterrno_2(int, int, const char *, int, const char *);
int renameat(int, const char *, int, const char *);

File ../nptl/sysdeps/pthread/flockfile.c:
void __flockfile(FILE *);

File ../nptl/sysdeps/pthread/ftrylockfile.c:
int __ftrylockfile(FILE *);

File ../nptl/sysdeps/pthread/funlockfile.c:
void __funlockfile(FILE *);

File isoc99_scanf.c:
int __isoc99_scanf(const char *, ...);

File isoc99_vscanf.c:
int __isoc99_vscanf(const char *, __gnuc_va_list);

File isoc99_fscanf.c:
int __isoc99_fscanf(FILE *, const char *, ...);

File isoc99_vfscanf.c:
int __isoc99_vfscanf(FILE *, const char *, __gnuc_va_list);

File isoc99_sscanf.c:
int __isoc99_sscanf(const char *, const char *, ...);

File isoc99_vsscanf.c:
int __isoc99_vsscanf(const char *, const char *, __gnuc_va_list);

File psiginfo.c:
void psiginfo(const siginfo_t *, const char *);

File vfprintf.c:
int _IO_vfwprintf(_IO_FILE *, const wchar_t *, __gnuc_va_list);
static int _IO_helper_overflow(_IO_FILE *, int);

File _i18n_number.h:
static wchar_t *_i18n_number_rewrite(wchar_t *, wchar_t *, wchar_t *);

File vfprintf.c:
static int buffered_vfprintf(_IO_FILE *, const wchar_t *, __gnuc_va_list);
static wchar_t *group_number(wchar_t *, wchar_t *, const char *, wchar_t);

File vfscanf.c:
int _IO_vfwscanf(_IO_FILE *, const wchar_t *, __gnuc_va_list, int *);
int __vfwscanf(FILE *, const wchar_t *, __gnuc_va_list);

File printf-parsemb.c:
size_t __parse_one_specmb(const unsigned char *, size_t, struct printf_spec *, size_t *);

File fxprintf.c:
int __fxprintf(FILE *, const char *, ...);

File printf-parsemb.c:
size_t __parse_one_specwc(const unsigned int *, size_t, struct printf_spec *, size_t *);

File filedoalloc.c:
int _IO_file_doallocate(_IO_FILE *);

File iofclose.c:
int _IO_new_fclose(_IO_FILE *);

File iofdopen.c:
_IO_FILE *_IO_new_fdopen(int, const char *);

File iofflush.c:
int _IO_fflush(_IO_FILE *);

File iofgetpos.c:
int _IO_new_fgetpos(_IO_FILE *, _G_fpos_t *);

File iofgets.c:
char *_IO_fgets(char *, int, _IO_FILE *);

File iofopen.c:
_IO_FILE *_IO_new_fopen(const char *, const char *);
_IO_FILE *__fopen_internal(const char *, const char *, int);
_IO_FILE *__fopen_maybe_mmap(_IO_FILE *);

File iofopncook.c:
void _IO_cookie_init(struct _IO_cookie_file *, int, void *, _IO_cookie_io_functions_t);
_IO_FILE *_IO_fopencookie(void *, const char *, _IO_cookie_io_functions_t);
_IO_FILE *_IO_old_fopencookie(void *, const char *, _IO_cookie_io_functions_t);
static int _IO_cookie_close(_IO_FILE *);
static __ssize_t _IO_cookie_read(_IO_FILE *, void *, __ssize_t);
static __off64_t _IO_cookie_seek(_IO_FILE *, __off64_t, int);
static __off64_t _IO_cookie_seekoff(_IO_FILE *, __off64_t, int, int);
static __ssize_t _IO_cookie_write(_IO_FILE *, const void *, __ssize_t);
static __off64_t _IO_old_cookie_seek(_IO_FILE *, __off64_t, int);

File iofputs.c:
int _IO_fputs(const char *, _IO_FILE *);

File iofread.c:
size_t _IO_fread(void *, size_t, size_t, _IO_FILE *);

File iofsetpos.c:
int _IO_new_fsetpos(_IO_FILE *, const _G_fpos_t *);

File ioftell.c:
long int _IO_ftell(_IO_FILE *);

File iofwrite.c:
size_t _IO_fwrite(const void *, size_t, size_t, _IO_FILE *);

File iogetdelim.c:
__ssize_t _IO_getdelim(char **, size_t *, int, _IO_FILE *);

File iogetline.c:
size_t _IO_getline(_IO_FILE *, char *, size_t, int, int);
size_t _IO_getline_info(_IO_FILE *, char *, size_t, int, int, int *);

File iogets.c:
char *_IO_gets(char *);

File iopadn.c:
__ssize_t _IO_padn(_IO_FILE *, int, __ssize_t);

File iopopen.c:
_IO_FILE *_IO_new_popen(const char *, const char *);
int _IO_new_proc_close(_IO_FILE *);
_IO_FILE *_IO_new_proc_open(_IO_FILE *, const char *, const char *);
static void unlock(void *);

File ioputs.c:
int _IO_puts(const char *);

File ioseekoff.c:
__off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int);
__off64_t _IO_seekoff_unlocked(_IO_FILE *, __off64_t, int, int);

File ioseekpos.c:
__off64_t _IO_seekpos(_IO_FILE *, __off64_t, int);
__off64_t _IO_seekpos_unlocked(_IO_FILE *, __off64_t, int);

File iosetbuffer.c:
void _IO_setbuffer(_IO_FILE *, char *, size_t);

File iosetvbuf.c:
int _IO_setvbuf(_IO_FILE *, char *, int, size_t);

File ioungetc.c:
int _IO_ungetc(int, _IO_FILE *);

File iovsprintf.c:
int __IO_vsprintf(char *, const char *, __gnuc_va_list);

File iovsscanf.c:
int _IO_vsscanf(const char *, const char *, __gnuc_va_list);

File iofgetpos64.c:
int _IO_new_fgetpos64(_IO_FILE *, _G_fpos64_t *);

File iofopen64.c:
_IO_FILE *_IO_fopen64(const char *, const char *);

File iofsetpos64.c:
int _IO_new_fsetpos64(_IO_FILE *, const _G_fpos64_t *);

File putchar.c:
int putchar(int);

File putchar_u.c:
int putchar_unlocked(int);

File iofwide.c:
int _IO_fwide(_IO_FILE *, int);
static int do_always_noconv(struct _IO_codecvt *);
static int do_encoding(struct _IO_codecvt *);
static enum __codecvt_result do_in(struct _IO_codecvt *, __mbstate_t *, const char *, const char *, const char **, wchar_t *, wchar_t *, wchar_t **);
static int do_length(struct _IO_codecvt *, __mbstate_t *, const char *, const char *, size_t);
static int do_max_length(struct _IO_codecvt *);
static enum __codecvt_result do_out(struct _IO_codecvt *, __mbstate_t *, const wchar_t *, const wchar_t *, const wchar_t **, char *, char *, char **);
static enum __codecvt_result do_unshift(struct _IO_codecvt *, __mbstate_t *, char *, char *, char **);

File clearerr.c:
void clearerr(FILE *);

File feof.c:
int _IO_feof(_IO_FILE *);

File ferror.c:
int _IO_ferror(_IO_FILE *);

File fileno.c:
int fileno(_IO_FILE *);

File fputc.c:
int fputc(int, _IO_FILE *);

File freopen.c:
FILE *freopen(const char *, const char *, FILE *);

File fseek.c:
int fseek(_IO_FILE *, long int, int);

File getc.c:
int _IO_getc(FILE *);

File getchar.c:
int getchar(void);

File memstream.c:
FILE *open_memstream(char **, size_t *);
static void _IO_mem_finish(_IO_FILE *, int);
static int _IO_mem_sync(_IO_FILE *);

File pclose.c:
int __new_pclose(FILE *);

File putc.c:
int _IO_putc(int, _IO_FILE *);

File rewind.c:
void rewind(_IO_FILE *);

File setbuf.c:
void setbuf(_IO_FILE *, char *);

File setlinebuf.c:
void setlinebuf(_IO_FILE *);

File vasprintf.c:
int _IO_vasprintf(char **, const char *, __gnuc_va_list);

File iovdprintf.c:
int _IO_vdprintf(int, const char *, __gnuc_va_list);

File vscanf.c:
int _IO_vscanf(const char *, __gnuc_va_list);

File vsnprintf.c:
int _IO_vsnprintf(char *, size_t, const char *, __gnuc_va_list);
static int _IO_strn_overflow(_IO_FILE *, int);

File obprintf.c:
int _IO_obstack_printf(struct obstack *, const char *, ...);
int _IO_obstack_vprintf(struct obstack *, const char *, va_list);
static int _IO_obstack_overflow(_IO_FILE *, int);
static size_t _IO_obstack_xsputn(_IO_FILE *, const void *, size_t);

File fcloseall.c:
int __fcloseall(void);

File fseeko.c:
int fseeko(_IO_FILE *, off_t, int);

File ftello.c:
__off_t ftello(_IO_FILE *);

File freopen64.c:
FILE *freopen64(const char *, const char *, FILE *);

File fseeko64.c:
int fseeko64(_IO_FILE *, __off64_t, int);

File ftello64.c:
__off64_t ftello64(_IO_FILE *);

File __fbufsize.c:
size_t __fbufsize(FILE *);

File __freading.c:
int __freading(FILE *);

File __fwriting.c:
int __fwriting(FILE *);

File __freadable.c:
int __freadable(FILE *);

File __fwritable.c:
int __fwritable(FILE *);

File __flbf.c:
int __flbf(FILE *);

File __fpurge.c:
void __fpurge(FILE *);

File __fpending.c:
size_t __fpending(FILE *);

File __fsetlocking.c:
int __fsetlocking(FILE *, int);

File ../sysdeps/unix/sysv/linux/libc_fatal.c:
void __libc_fatal(const char *);
void __libc_message(int, const char *, ...);

File fmemopen.c:
FILE *fmemopen(void *, size_t, const char *);
static int fmemopen_close(void *);
static ssize_t fmemopen_read(void *, char *, size_t);
static int fmemopen_seek(void *, __off64_t *, int);
static ssize_t fmemopen_write(void *, const char *, size_t);

File oldiofopen.c:
_IO_FILE *_IO_old_fopen(const char *, const char *);

File oldiofdopen.c:
_IO_FILE *_IO_old_fdopen(int, const char *);

File oldiofclose.c:
int _IO_old_fclose(_IO_FILE *);

File oldiopopen.c:
_IO_FILE *_IO_old_popen(const char *, const char *);
int _IO_old_proc_close(_IO_FILE *);
_IO_FILE *_IO_old_proc_open(_IO_FILE *, const char *, const char *);
static void unlock(void *);

File oldpclose.c:
int __old_pclose(FILE *);

File oldtmpfile.c:
FILE *__old_tmpfile(void);

File oldiofgetpos.c:
int _IO_old_fgetpos(_IO_FILE *, _G_fpos_t *);

File oldiofgetpos64.c:
int _IO_old_fgetpos64(_IO_FILE *, _G_fpos64_t *);

File oldiofsetpos.c:
int _IO_old_fsetpos(_IO_FILE *, const _G_fpos_t *);

File oldiofsetpos64.c:
int _IO_old_fsetpos64(_IO_FILE *, const _G_fpos64_t *);

File clearerr_u.c:
void clearerr_unlocked(FILE *);

File feof_u.c:
int feof_unlocked(_IO_FILE *);

File ferror_u.c:
int ferror_unlocked(_IO_FILE *);

File fputc_u.c:
int fputc_unlocked(int, _IO_FILE *);

File getc_u.c:
int __getc_unlocked(FILE *);

File getchar_u.c:
int getchar_unlocked(void);

File iofflush_u.c:
int fflush_unlocked(_IO_FILE *);

File putc_u.c:
int putc_unlocked(int, _IO_FILE *);

File peekc.c:
int _IO_peekc_locked(_IO_FILE *);

File iofread_u.c:
size_t fread_unlocked(void *, size_t, size_t, _IO_FILE *);

File iofwrite_u.c:
size_t fwrite_unlocked(const void *, size_t, size_t, _IO_FILE *);

File iofgets_u.c:
char *fgets_unlocked(char *, int, _IO_FILE *);

File iofputs_u.c:
int fputs_unlocked(const char *, _IO_FILE *);

File wfiledoalloc.c:
int _IO_wfile_doallocate(_IO_FILE *);

File iowpadn.c:
__ssize_t _IO_wpadn(_IO_FILE *, wint_t, __ssize_t);

File swprintf.c:
int __swprintf(wchar_t *, size_t, const wchar_t *, ...);

File vswprintf.c:
int _IO_vswprintf(wchar_t *, size_t, const wchar_t *, __gnuc_va_list);
static wint_t _IO_wstrn_overflow(_IO_FILE *, wint_t);

File iovswscanf.c:
int __vswscanf(const wchar_t *, const wchar_t *, __gnuc_va_list);

File swscanf.c:
int __swscanf(const wchar_t *, const wchar_t *, ...);

File wgenops.c:
unsigned int _IO_adjust_wcolumn(unsigned int, const wchar_t *, int);
void _IO_free_wbackup_area(_IO_FILE *);
void _IO_init_wmarker(struct _IO_marker *, _IO_FILE *);
__ssize_t _IO_least_wmarker(_IO_FILE *, wchar_t *);
int _IO_seekwmark(_IO_FILE *, struct _IO_marker *, int);
wint_t _IO_sputbackwc(_IO_FILE *, wint_t);
wint_t _IO_sungetwc(_IO_FILE *);
void _IO_switch_to_main_wget_area(_IO_FILE *);
void _IO_switch_to_wbackup_area(_IO_FILE *);
int _IO_switch_to_wget_mode(_IO_FILE *);
void _IO_unsave_wmarkers(_IO_FILE *);
int _IO_wdefault_doallocate(_IO_FILE *);
void _IO_wdefault_finish(_IO_FILE *, int);
wint_t _IO_wdefault_pbackfail(_IO_FILE *, wint_t);
wint_t _IO_wdefault_uflow(_IO_FILE *);
size_t _IO_wdefault_xsgetn(_IO_FILE *, void *, size_t);
size_t _IO_wdefault_xsputn(_IO_FILE *, const void *, size_t);
void _IO_wdoallocbuf(_IO_FILE *);
int _IO_wmarker_delta(struct _IO_marker *);
void _IO_wsetb(_IO_FILE *, wchar_t *, wchar_t *, int);
wint_t __woverflow(_IO_FILE *, wint_t);
wint_t __wuflow(_IO_FILE *);
wint_t __wunderflow(_IO_FILE *);
static int save_for_wbackup(_IO_FILE *, wchar_t *);

File wstrops.c:
__ssize_t _IO_wstr_count(_IO_FILE *);
void _IO_wstr_finish(_IO_FILE *, int);
void _IO_wstr_init_static(_IO_FILE *, wchar_t *, size_t, wchar_t *);
wint_t _IO_wstr_overflow(_IO_FILE *, wint_t);
wint_t _IO_wstr_pbackfail(_IO_FILE *, wint_t);
__off64_t _IO_wstr_seekoff(_IO_FILE *, __off64_t, int, int);
wint_t _IO_wstr_underflow(_IO_FILE *);
static int enlarge_userbuf(_IO_FILE *, __off64_t, int);

File wfileops.c:
int _IO_wdo_write(_IO_FILE *, const wchar_t *, size_t);
wint_t _IO_wfile_overflow(_IO_FILE *, wint_t);
__off64_t _IO_wfile_seekoff(_IO_FILE *, __off64_t, int, int);
wint_t _IO_wfile_sync(_IO_FILE *);
wint_t _IO_wfile_underflow(_IO_FILE *);
size_t _IO_wfile_xsputn(_IO_FILE *, const void *, size_t);
static wint_t _IO_wfile_underflow_maybe_mmap(_IO_FILE *);
static wint_t _IO_wfile_underflow_mmap(_IO_FILE *);

File wmemstream.c:
__FILE *open_wmemstream(wchar_t **, size_t *);
static void _IO_wmem_finish(_IO_FILE *, int);
static int _IO_wmem_sync(_IO_FILE *);

File fputwc.c:
wint_t fputwc(wchar_t, _IO_FILE *);

File fputwc_u.c:
wint_t fputwc_unlocked(wchar_t, _IO_FILE *);

File getwc.c:
wint_t _IO_getwc(FILE *);

File getwc_u.c:
wint_t __getwc_unlocked(FILE *);

File getwchar.c:
wint_t getwchar(void);

File getwchar_u.c:
wint_t getwchar_unlocked(void);

File iofgetws.c:
wchar_t *fgetws(wchar_t *, int, _IO_FILE *);

File iofgetws_u.c:
wchar_t *fgetws_unlocked(wchar_t *, int, _IO_FILE *);

File iofputws.c:
int fputws(const wchar_t *, _IO_FILE *);

File iofputws_u.c:
int fputws_unlocked(const wchar_t *, _IO_FILE *);

File iogetwline.c:
size_t _IO_getwline(_IO_FILE *, wchar_t *, size_t, wint_t, int);
size_t _IO_getwline_info(_IO_FILE *, wchar_t *, size_t, wint_t, int, wint_t *);

File ioungetwc.c:
wint_t ungetwc(wint_t, _IO_FILE *);

File putwc.c:
wint_t putwc(wchar_t, _IO_FILE *);

File putwc_u.c:
wint_t putwc_unlocked(wchar_t, _IO_FILE *);

File putwchar.c:
wint_t putwchar(wchar_t);

File putwchar_u.c:
wint_t putwchar_unlocked(wchar_t);

File fwprintf.c:
int __fwprintf(FILE *, const wchar_t *, ...);

File vwprintf.c:
int __vwprintf(const wchar_t *, __gnuc_va_list);

File wprintf.c:
int __wprintf(const wchar_t *, ...);

File wscanf.c:
int __wscanf(const wchar_t *, ...);

File fwscanf.c:
int __fwscanf(FILE *, const wchar_t *, ...);

File vwscanf.c:
int __vwscanf(const wchar_t *, __gnuc_va_list);

File fwide.c:
int fwide(_IO_FILE *, int);

File fileops.c:
int _IO_file_close(_IO_FILE *);
int _IO_file_close_mmap(_IO_FILE *);
_IO_FILE *_IO_file_open(_IO_FILE *, const char *, int, int, int, int);
__ssize_t _IO_file_read(_IO_FILE *, void *, __ssize_t);
__off64_t _IO_file_seek(_IO_FILE *, __off64_t, int);
__off64_t _IO_file_seekoff_mmap(_IO_FILE *, __off64_t, int, int);
_IO_FILE *_IO_file_setbuf_mmap(_IO_FILE *, char *, __ssize_t);
int _IO_file_stat(_IO_FILE *, void *);
int _IO_file_underflow_maybe_mmap(_IO_FILE *);
int _IO_file_underflow_mmap(_IO_FILE *);
size_t _IO_file_xsgetn(_IO_FILE *, void *, size_t);
int _IO_new_do_write(_IO_FILE *, const char *, size_t);
_IO_FILE *_IO_new_file_attach(_IO_FILE *, int);
int _IO_new_file_close_it(_IO_FILE *);
void _IO_new_file_finish(_IO_FILE *, int);
_IO_FILE *_IO_new_file_fopen(_IO_FILE *, const char *, const char *, int);
void _IO_new_file_init(struct _IO_FILE_plus *);
int _IO_new_file_overflow(_IO_FILE *, int);
__off64_t _IO_new_file_seekoff(_IO_FILE *, __off64_t, int, int);
_IO_FILE *_IO_new_file_setbuf(_IO_FILE *, char *, __ssize_t);
int _IO_new_file_sync(_IO_FILE *);
int _IO_new_file_underflow(_IO_FILE *);
__ssize_t _IO_new_file_write(_IO_FILE *, const void *, __ssize_t);
size_t _IO_new_file_xsputn(_IO_FILE *, const void *, size_t);
static __off64_t _IO_file_seekoff_maybe_mmap(_IO_FILE *, __off64_t, int, int);
static int _IO_file_sync_mmap(_IO_FILE *);
static size_t _IO_file_xsgetn_maybe_mmap(_IO_FILE *, void *, size_t);
static size_t _IO_file_xsgetn_mmap(_IO_FILE *, void *, size_t);
static void decide_maybe_mmap(_IO_FILE *);
static int mmap_remap_check(_IO_FILE *);
static size_t new_do_write(_IO_FILE *, const char *, size_t);

File genops.c:
unsigned int _IO_adjust_column(unsigned int, const char *, int);
int _IO_cleanup(void);
int _IO_default_doallocate(_IO_FILE *);
void _IO_default_finish(_IO_FILE *, int);
void _IO_default_imbue(_IO_FILE *, void *);
int _IO_default_pbackfail(_IO_FILE *, int);
__ssize_t _IO_default_read(_IO_FILE *, void *, __ssize_t);
__off64_t _IO_default_seek(_IO_FILE *, __off64_t, int);
__off64_t _IO_default_seekoff(_IO_FILE *, __off64_t, int, int);
__off64_t _IO_default_seekpos(_IO_FILE *, __off64_t, int);
_IO_FILE *_IO_default_setbuf(_IO_FILE *, char *, __ssize_t);
int _IO_default_showmanyc(_IO_FILE *);
int _IO_default_stat(_IO_FILE *, void *);
int _IO_default_sync(_IO_FILE *);
int _IO_default_uflow(_IO_FILE *);
int _IO_default_underflow(_IO_FILE *);
__ssize_t _IO_default_write(_IO_FILE *, const void *, __ssize_t);
size_t _IO_default_xsgetn(_IO_FILE *, void *, size_t);
size_t _IO_default_xsputn(_IO_FILE *, const void *, size_t);
void _IO_doallocbuf(_IO_FILE *);
int _IO_flush_all(void);
void _IO_flush_all_linebuffered(void);
int _IO_flush_all_lockp(int);
void _IO_free_backup_area(_IO_FILE *);
void _IO_init(_IO_FILE *, int);
void _IO_init_marker(struct _IO_marker *, _IO_FILE *);
_IO_ITER _IO_iter_begin(void);
_IO_ITER _IO_iter_end(void);
_IO_FILE *_IO_iter_file(_IO_ITER);
_IO_ITER _IO_iter_next(_IO_ITER);
__ssize_t _IO_least_marker(_IO_FILE *, char *);
void _IO_link_in(struct _IO_FILE_plus *);
void _IO_list_lock(void);
void _IO_list_resetlock(void);
void _IO_list_unlock(void);
int _IO_marker_delta(struct _IO_marker *);
int _IO_marker_difference(struct _IO_marker *, struct _IO_marker *);
void _IO_no_init(_IO_FILE *, int, int, struct _IO_wide_data *, const struct _IO_jump_t *);
void _IO_old_init(_IO_FILE *, int);
void _IO_remove_marker(struct _IO_marker *);
int _IO_seekmark(_IO_FILE *, struct _IO_marker *, int);
void _IO_setb(_IO_FILE *, char *, char *, int);
size_t _IO_sgetn(_IO_FILE *, void *, size_t);
int _IO_sputbackc(_IO_FILE *, int);
int _IO_sungetc(_IO_FILE *);
void _IO_switch_to_backup_area(_IO_FILE *);
int _IO_switch_to_get_mode(_IO_FILE *);
void _IO_switch_to_main_get_area(_IO_FILE *);
void _IO_un_link(struct _IO_FILE_plus *);
void _IO_unsave_markers(_IO_FILE *);
int __overflow(_IO_FILE *, int);
int __uflow(_IO_FILE *);
int __underflow(_IO_FILE *);
static void buffer_free(void);
static void flush_cleanup(void *);
static int save_for_backup(_IO_FILE *, char *);

File strops.c:
__ssize_t _IO_str_count(_IO_FILE *);
void _IO_str_finish(_IO_FILE *, int);
void _IO_str_init_readonly(_IO_strfile *, const char *, int);
void _IO_str_init_static(_IO_strfile *, char *, int, char *);
void _IO_str_init_static_internal(_IO_strfile *, char *, size_t, char *);
int _IO_str_overflow(_IO_FILE *, int);
int _IO_str_pbackfail(_IO_FILE *, int);
__off64_t _IO_str_seekoff(_IO_FILE *, __off64_t, int, int);
int _IO_str_underflow(_IO_FILE *);
static int enlarge_userbuf(_IO_FILE *, __off64_t, int);

File oldfileops.c:
int _IO_old_do_write(_IO_FILE *, const char *, size_t);
_IO_FILE *_IO_old_file_attach(_IO_FILE *, int);
int _IO_old_file_close_it(_IO_FILE *);
void _IO_old_file_finish(_IO_FILE *, int);
_IO_FILE *_IO_old_file_fopen(_IO_FILE *, const char *, const char *);
void _IO_old_file_init(struct _IO_FILE_plus *);
int _IO_old_file_overflow(_IO_FILE *, int);
__off64_t _IO_old_file_seekoff(_IO_FILE *, __off64_t, int, int);
_IO_FILE *_IO_old_file_setbuf(_IO_FILE *, char *, __ssize_t);
int _IO_old_file_sync(_IO_FILE *);
int _IO_old_file_underflow(_IO_FILE *);
__ssize_t _IO_old_file_write(_IO_FILE *, const void *, __ssize_t);
size_t _IO_old_file_xsputn(_IO_FILE *, const void *, size_t);
static int old_do_write(_IO_FILE *, const char *, size_t);

File oldstdfiles.c:
static void _IO_check_libio(void);

File malloc.c:
void *__libc_calloc(size_t, size_t);
void __libc_free(void *);
struct mallinfo __libc_mallinfo(void);
void *__libc_malloc(size_t);
int __libc_mallopt(int, int);
void *__libc_memalign(size_t, size_t);
void *__libc_pvalloc(size_t);
void *__libc_realloc(void *, size_t);
void *__libc_valloc(size_t);

File hooks.c:
void __malloc_check_init(void);
void *__malloc_get_state(void);
int __malloc_set_state(void *);

File malloc.c:
void __malloc_stats(void);
int __malloc_trim(size_t);
size_t __malloc_usable_size(void *);
int __posix_memalign(void **, size_t, size_t);
int malloc_info(int);

File arena.c:
static void *__failing_morecore(ptrdiff_t);

File malloc.c:
static void __malloc_assert(const char *, const char *, unsigned int, const char *);
static void _int_free(mstate, mchunkptr);
static void *_int_malloc(mstate, size_t);
static void *_int_memalign(mstate, size_t, size_t);
static void *_int_realloc(mstate, mchunkptr, size_t, size_t);

File arena.c:
static mstate arena_get2(mstate, size_t);
static void free_atfork(void *, const void *);

File hooks.c:
static void free_check(void *, const void *);

File malloc.c:
static struct mallinfo mALLINFo(mstate);
static int mALLOPt(int, int);

File arena.c:
static void *malloc_atfork(size_t, const void *);

File hooks.c:
static void *malloc_check(size_t, const void *);

File malloc.c:
static void malloc_consolidate(mstate);

File hooks.c:
static void *malloc_hook_ini(size_t, const void *);

File malloc.c:
static void malloc_printerr(int, const char *, void *);

File hooks.c:
static mchunkptr mem2chunk_check(void *, unsigned char **);
static void *mem2mem_check(void *, size_t);
static void *memalign_check(size_t, size_t, const void *);
static void *memalign_hook_ini(size_t, size_t, const void *);

File malloc.c:
static mchunkptr mremap_chunk(mchunkptr, size_t);
static void munmap_chunk(mchunkptr);

File arena.c:
static heap_info *new_heap(size_t, size_t);
static void ptmalloc_init(void);
static void ptmalloc_lock_all(void);
static void ptmalloc_unlock_all(void);
static void ptmalloc_unlock_all2(void);

File hooks.c:
static void *realloc_check(void *, size_t, const void *);
static void *realloc_hook_ini(void *, size_t, const void *);

File malloc.c:
static int sYSTRIm(size_t, mstate);

File hooks.c:
static int top_check(void);

File morecore.c:
void *__default_morecore(ptrdiff_t);

File mcheck.c:
int mcheck(void (*)(enum mcheck_status));
void mcheck_check_all(void);
int mcheck_pedantic(void (*)(enum mcheck_status));
enum mcheck_status mprobe(void *);
static enum mcheck_status checkhdr(const struct hdr *);
static void freehook(void *, const void *);
static void mabort(enum mcheck_status);
static void *mallochook(size_t, const void *);
static void *memalignhook(size_t, size_t, const void *);
static void *reallochook(void *, size_t, const void *);

File mtrace.c:
void mtrace(void);
void muntrace(void);
void tr_break(void);
static void release_libc_mem(void);
static void tr_freehook(void *, const void *);
static void *tr_mallochook(size_t, const void *);
static void *tr_memalignhook(size_t, size_t, const void *);
static void *tr_reallochook(void *, size_t, const void *);
static void tr_where(const void *);

File obstack.c:
int _obstack_allocated_p(struct obstack *, void *);
int _obstack_begin(struct obstack *, int, int, void *(*)(long int), void (*)(void *));
int _obstack_begin_1(struct obstack *, int, int, void *(*)(void *, long int), void (*)(void *, void *), void *);
int _obstack_memory_used(struct obstack *);
void _obstack_newchunk(struct obstack *, int);
void obstack_free(struct obstack *, void *);
static void print_and_abort(void);

File set-freeres.c:
void __libc_freeres(void);

File thread-freeres.c:
void __libc_thread_freeres(void);

File strcoll.c:
int strcoll(const char *, const char *);

File strcpy.c:
char *strcpy(char *, const char *);

File strverscmp.c:
int __strverscmp(const char *, const char *);

File strdup.c:
char *__strdup(const char *);

File strndup.c:
char *__strndup(const char *, size_t);

File strerror.c:
char *strerror(int);

File _strerror.c:
char *__strerror_r(int, char *, size_t);

File strnlen.c:
size_t __strnlen(const char *, size_t);

File strncat.c:
char *strncat(char *, const char *, size_t);

File strncpy.c:
char *strncpy(char *, const char *, size_t);

File strsignal.c:
char *strsignal(int);
static void free_key_mem(void *);
static void init(void);

File ../sysdeps/x86_64/multiarch/strstr.c:
char *__strstr_sse42(const unsigned char *, const unsigned char *);
static __m128i __m128i_strloadu(const unsigned char *);

File strxfrm.c:
size_t strxfrm(char *, const char *, size_t);

File ../sysdeps/i386/i686/ffs.c:
int __ffs(int);

File ffsll.c:
int ffsll(long long int);

File strcasecmp.c:
int __strcasecmp(const char *, const char *);

File strncase.c:
int __strncasecmp(const char *, const char *, size_t);

File strcasecmp.c:
int __strcasecmp_l(const char *, const char *, __locale_t);

File strncase.c:
int __strncasecmp_l(const char *, const char *, size_t, __locale_t);

File memccpy.c:
void *__memccpy(void *, const void *, int, size_t);

File wordcopy.c:
void _wordcopy_bwd_aligned(long int, long int, size_t);
void _wordcopy_bwd_dest_aligned(long int, long int, size_t);
void _wordcopy_fwd_aligned(long int, long int, size_t);
void _wordcopy_fwd_dest_aligned(long int, long int, size_t);

File strsep.c:
char *__strsep(char **, const char *);

File ../sysdeps/x86_64/multiarch/strstr.c:
char *__strcasestr_sse42(const unsigned char *, const unsigned char *);
static __m128i __m128i_strloadu_tolower(const unsigned char *);
static __m128i __m128i_strloadu_tolower_posix(const unsigned char *);

File swab.c:
void swab(const void *, void *, ssize_t);

File strfry.c:
char *strfry(char *);

File memfrob.c:
void *memfrob(void *, size_t);

File memmem.c:
void *memmem(const void *, size_t, const void *, size_t);

File str-two-way.h:
static size_t critical_factorization(const unsigned char *, size_t, size_t *);
static void *two_way_long_needle(const unsigned char *, size_t, const unsigned char *, size_t);

File argz-append.c:
error_t __argz_add(char **, size_t *, const char *);
error_t __argz_append(char **, size_t *, const char *, size_t);

File argz-count.c:
size_t __argz_count(const char *, size_t);

File argz-create.c:
error_t __argz_create(char * const *, char **, size_t *);

File argz-ctsep.c:
error_t __argz_create_sep(const char *, int, char **, size_t *);

File argz-next.c:
char *__argz_next(const char *, size_t, const char *);

File argz-delete.c:
void argz_delete(char **, size_t *, char *);

File argz-extract.c:
void __argz_extract(const char *, size_t, char **);

File argz-insert.c:
error_t __argz_insert(char **, size_t *, char *, const char *);

File argz-stringify.c:
void __argz_stringify(char *, size_t, int);

File argz-addsep.c:
error_t __argz_add_sep(char **, size_t *, const char *, int);

File argz-replace.c:
error_t __argz_replace(char **, size_t *, const char *, const char *, unsigned int *);
static void str_append(char **, size_t *, const char *, const size_t);

File basename.c:
char *basename(const char *);

File strcoll_l.c:
int __strcoll_l(const char *, const char *, __locale_t);

File strxfrm_l.c:
size_t __strxfrm_l(char *, const char *, size_t, __locale_t);
static int utf8_encode(char *, int);

File ../sysdeps/i386/i486/bits/string.h:
void *__memcpy_by2(void *, const void *, size_t);
void *__memcpy_by4(void *, const void *, size_t);

File ../sysdeps/i386/i486/string-inlines.c:
void *__memcpy_c(void *, const void *, size_t);

File ../sysdeps/i386/i486/bits/string.h:
void *__memcpy_g_internal(void *, const void *, size_t);
char *__mempcpy_by2(char *, const char *, size_t);
char *__mempcpy_by4(char *, const char *, size_t);
char *__mempcpy_byn(char *, const char *, size_t);

File ../string/bits/string2.h:
void *__mempcpy_small(void *, char, char, char, char, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);

File ../sysdeps/i386/i486/string-inlines.c:
void *__memset_cc(void *, long unsigned int, size_t);

File ../sysdeps/i386/i486/bits/string.h:
void *__memset_ccn_by2(void *, unsigned int, size_t);
void *__memset_ccn_by4(void *, unsigned int, size_t);
void *__memset_gcn_by2(void *, int, size_t);
void *__memset_gcn_by4(void *, int, size_t);

File ../sysdeps/i386/i486/string-inlines.c:
void *__memset_gg(void *, char, size_t);

File ../sysdeps/i386/i486/bits/string.h:
char *__stpcpy_g(char *, const char *);

File ../string/bits/string2.h:
char *__stpcpy_small(char *, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);

File ../sysdeps/i386/i486/bits/string.h:
char *__strcat_c(char *, const char *, size_t);
char *__strcat_g(char *, const char *);
char *__strchr_c(const char *, int);
char *__strchr_g_internal(const char *, int);
char *__strchrnul_c(const char *, int);
char *__strchrnul_g(const char *, int);
int __strcmp_gg(const char *, const char *);
char *__strcpy_g(char *, const char *);

File ../string/bits/string2.h:
char *__strcpy_small(char *, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);
size_t __strcspn_c1(const char *, int);
size_t __strcspn_c2(const char *, int, int);
size_t __strcspn_c3(const char *, int, int, int);

File ../sysdeps/i386/i486/bits/string.h:
size_t __strcspn_cg(const char *, const char *, size_t);
size_t __strcspn_g(const char *, const char *);
size_t __strlen_g(const char *);
char *__strncat_g(char *, const char *, size_t);
int __strncmp_g(const char *, const char *, size_t);
char *__strncpy_by2(char *, const char *, size_t, size_t);
char *__strncpy_by4(char *, const char *, size_t, size_t);
char *__strncpy_byn(char *, const char *, size_t, size_t);
char *__strncpy_gg(char *, const char *, size_t);

File ../string/bits/string2.h:
char *__strpbrk_c2(const char *, int, int);
char *__strpbrk_c3(const char *, int, int, int);

File ../sysdeps/i386/i486/bits/string.h:
char *__strpbrk_cg(const char *, const char *, size_t);
char *__strpbrk_g(const char *, const char *);
char *__strrchr_c(const char *, int);
char *__strrchr_g(const char *, int);

File ../string/bits/string2.h:
char *__strsep_1c(char **, char);
char *__strsep_2c(char **, char, char);
char *__strsep_3c(char **, char, char, char);
size_t __strspn_c1(const char *, int);
size_t __strspn_c2(const char *, int, int);
size_t __strspn_c3(const char *, int, int, int);

File ../sysdeps/i386/i486/bits/string.h:
size_t __strspn_cg(const char *, const char *, size_t);
size_t __strspn_g(const char *, const char *);
char *__strstr_cg(const char *, const char *, size_t);
char *__strstr_g(const char *, const char *);

File ../string/bits/string2.h:
char *__strtok_r_1c(char *, char, char **);

File memrchr.c:
void *__memrchr(const void *, int, size_t);

File xpg-strerror.c:
int __xpg_strerror_r(int, char *, size_t);

File strerror_l.c:
char *strerror_l(int, locale_t);
static void strerror_thread_freeres(void);
static const char *translate(const char *, locale_t);

File envz.c:
error_t envz_add(char **, size_t *, const char *, const char *);
char *envz_entry(const char *, size_t, const char *);
char *envz_get(const char *, size_t, const char *);
error_t envz_merge(char **, size_t *, const char *, size_t, int);
void envz_remove(char **, size_t *, const char *);
void envz_strip(char **, size_t *);

File ../string/strncmp.c:
int __strncmp_ia32(const char *, const char *, size_t);

File ../sysdeps/x86_64/multiarch/strcspn-c.c:
size_t __strcspn_sse42(const char *, const char *);
char *__strpbrk_sse42(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strspn-c.c:
size_t __strspn_sse42(const char *, const char *);

File ../string/strstr.c:
char *__strstr_ia32(const char *, const char *);

File ../sysdeps/i386/i686/multiarch/strstr-c.c:
void *strstr_ifunc(void);

File ../string/str-two-way.h:
static size_t critical_factorization(const unsigned char *, size_t, size_t *);
static char *two_way_long_needle(const unsigned char *, size_t, const unsigned char *, size_t);

File ../string/strcasestr.c:
char *__strcasestr_ia32(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strcasestr-c.c:
void *__strcasestr_ifunc(void);

File ../string/str-two-way.h:
static size_t critical_factorization(const unsigned char *, size_t, size_t *);
static char *two_way_long_needle(const unsigned char *, size_t, const unsigned char *, size_t);

File ../sysdeps/x86_64/cacheinfo.c:
long int __cache_sysconf(int);
static long int handle_amd(int);
static long int handle_intel(int, unsigned int);
static void init_cacheinfo(void);
static int intel_02_known_compare(const void *, const void *);
static long int intel_check_word(int, unsigned int, _Bool *, _Bool *);

File wmemcpy.c:
wchar_t *__wmemcpy(wchar_t *, const wchar_t *, size_t);

File wmemset.c:
wchar_t *wmemset(wchar_t *, wchar_t, size_t);

File wcscat.c:
wchar_t *__wcscat(wchar_t *, const wchar_t *);

File wcschr.c:
wchar_t *wcschr(const wchar_t *, const wchar_t);

File wcscmp.c:
int wcscmp(const wchar_t *, const wchar_t *);

File wcscpy.c:
wchar_t *wcscpy(wchar_t *, const wchar_t *);

File wcscspn.c:
size_t wcscspn(const wchar_t *, const wchar_t *);

File wcsdup.c:
wchar_t *wcsdup(const wchar_t *);

File wcslen.c:
size_t __wcslen(const wchar_t *);

File wcsncat.c:
wchar_t *wcsncat(wchar_t *, const wchar_t *, size_t);

File wcsncmp.c:
int wcsncmp(const wchar_t *, const wchar_t *, size_t);

File wcsncpy.c:
wchar_t *__wcsncpy(wchar_t *, const wchar_t *, size_t);

File wcspbrk.c:
wchar_t *wcspbrk(const wchar_t *, const wchar_t *);

File wcsrchr.c:
wchar_t *wcsrchr(const wchar_t *, const wchar_t);

File wcsspn.c:
size_t wcsspn(const wchar_t *, const wchar_t *);

File wcstok.c:
wchar_t *wcstok(wchar_t *, const wchar_t *, wchar_t **);

File wcsstr.c:
wchar_t *wcsstr(const wchar_t *, const wchar_t *);

File wmemchr.c:
wchar_t *wmemchr(const wchar_t *, wchar_t, size_t);

File wmemcmp.c:
int wmemcmp(const wchar_t *, const wchar_t *, size_t);

File wmemmove.c:
wchar_t *__wmemmove(wchar_t *, const wchar_t *, size_t);

File wcpcpy.c:
wchar_t *__wcpcpy(wchar_t *, const wchar_t *);

File wcpncpy.c:
wchar_t *__wcpncpy(wchar_t *, const wchar_t *, size_t);

File wmempcpy.c:
wchar_t *__wmempcpy(wchar_t *, const wchar_t *, size_t);

File btowc.c:
wint_t __btowc(int);

File wctob.c:
int wctob(wint_t);

File mbsinit.c:
int __mbsinit(const mbstate_t *);

File mbrlen.c:
size_t __mbrlen(const char *, size_t, mbstate_t *);

File mbrtowc.c:
size_t __mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);

File wcrtomb.c:
size_t __wcrtomb(char *, wchar_t, mbstate_t *);

File mbsrtowcs.c:
size_t __mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);

File wcsrtombs.c:
size_t __wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);

File mbsnrtowcs.c:
size_t __mbsnrtowcs(wchar_t *, const char **, size_t, size_t, mbstate_t *);

File wcsnrtombs.c:
size_t __wcsnrtombs(char *, const wchar_t **, size_t, size_t, mbstate_t *);

File wcsnlen.c:
size_t __wcsnlen(const wchar_t *, size_t);

File wcschrnul.c:
wchar_t *__wcschrnul(const wchar_t *, const wchar_t);

File ../stdlib/strtol.c:
long int __wcstol_internal(const wchar_t *, wchar_t **, int, int);
long int wcstol(const wchar_t *, wchar_t **, int);
long unsigned int __wcstoul_internal(const wchar_t *, wchar_t **, int, int);
long unsigned int wcstoul(const wchar_t *, wchar_t **, int);
long long int __wcstoll_internal(const wchar_t *, wchar_t **, int, int);
long long int wcstoll(const wchar_t *, wchar_t **, int);
long long unsigned int __wcstoull_internal(const wchar_t *, wchar_t **, int, int);
long long unsigned int wcstoull(const wchar_t *, wchar_t **, int);

File ../stdlib/strtod.c:
double __wcstod_internal(const wchar_t *, wchar_t **, int);
double wcstod(const wchar_t *, wchar_t **);
long double __wcstold_internal(const wchar_t *, wchar_t **, int);
long double wcstold(const wchar_t *, wchar_t **);
float __wcstof_internal(const wchar_t *, wchar_t **, int);
float wcstof(const wchar_t *, wchar_t **);

File ../stdlib/strtol_l.c:
long int ____wcstol_l_internal(const wchar_t *, wchar_t **, int, int, __locale_t);
long int __wcstol_l(const wchar_t *, wchar_t **, int, __locale_t);
long unsigned int ____wcstoul_l_internal(const wchar_t *, wchar_t **, int, int, __locale_t);
long unsigned int __wcstoul_l(const wchar_t *, wchar_t **, int, __locale_t);
long long int ____wcstoll_l_internal(const wchar_t *, wchar_t **, int, int, __locale_t);
long long int __wcstoll_l(const wchar_t *, wchar_t **, int, __locale_t);
long long unsigned int ____wcstoull_l_internal(const wchar_t *, wchar_t **, int, int, __locale_t);
long long unsigned int __wcstoull_l(const wchar_t *, wchar_t **, int, __locale_t);

File ../stdlib/strtod_l.c:
double ____wcstod_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
double __wcstod_l(const wchar_t *, wchar_t **, __locale_t);
static double round_and_return(mp_limb_t *, int, int, mp_limb_t, mp_size_t, int);
static const wchar_t *str_to_mpn(const wchar_t *, int, mp_limb_t *, mp_size_t *, int *);
long double ____wcstold_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
long double __wcstold_l(const wchar_t *, wchar_t **, __locale_t);
static long double round_and_return(mp_limb_t *, int, int, mp_limb_t, mp_size_t, int);
static const wchar_t *str_to_mpn(const wchar_t *, int, mp_limb_t *, mp_size_t *, int *);
float ____wcstof_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
float __wcstof_l(const wchar_t *, wchar_t **, __locale_t);
static float round_and_return(mp_limb_t *, int, int, mp_limb_t, mp_size_t, int);
static const wchar_t *str_to_mpn(const wchar_t *, int, mp_limb_t *, mp_size_t *, int *);

File ../string/strcoll.c:
int wcscoll(const wchar_t *, const wchar_t *);

File ../string/strxfrm.c:
size_t wcsxfrm(wchar_t *, const wchar_t *, size_t);

File wcwidth.c:
int wcwidth(wchar_t);

File wcswidth.c:
int wcswidth(const wchar_t *, size_t);

File ../string/strcoll_l.c:
int __wcscoll_l(const wchar_t *, const wchar_t *, __locale_t);

File ../string/strxfrm_l.c:
size_t __wcsxfrm_l(wchar_t *, const wchar_t *, size_t, __locale_t);

File wcscasecmp.c:
int __wcscasecmp(const wchar_t *, const wchar_t *);

File wcsncase.c:
int __wcsncasecmp(const wchar_t *, const wchar_t *, size_t);

File ./wcscasecmp.c:
int __wcscasecmp_l(const wchar_t *, const wchar_t *, __locale_t);

File ./wcsncase.c:
int __wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t, __locale_t);

File wcsmbsload.c:
void __wcsmbs_clone_conv(struct gconv_fcts *);
struct __gconv_step *__wcsmbs_getfct(const char *, const char *, size_t *);
void __wcsmbs_load_conv(struct __locale_data *);
int __wcsmbs_named_conv(struct gconv_fcts *, const char *);
void _nl_cleanup_ctype(struct __locale_data *);

File mbsrtowcs_l.c:
size_t __mbsrtowcs_l(wchar_t *, const char **, size_t, mbstate_t *, __locale_t);

File isoc99_swscanf.c:
int __isoc99_swscanf(const wchar_t *, const wchar_t *, ...);

File isoc99_vswscanf.c:
int __isoc99_vswscanf(const wchar_t *, const wchar_t *, __gnuc_va_list);

File isoc99_wscanf.c:
int __isoc99_wscanf(const wchar_t *, ...);

File isoc99_vwscanf.c:
int __isoc99_vwscanf(const wchar_t *, __gnuc_va_list);

File isoc99_fwscanf.c:
int __isoc99_fwscanf(FILE *, const wchar_t *, ...);

File isoc99_vfwscanf.c:
int __isoc99_vfwscanf(FILE *, const wchar_t *, __gnuc_va_list);

File offtime.c:
int __offtime(const time_t *, long int, struct tm *);

File asctime.c:
char *__asctime_r(const struct tm *, char *);
char *asctime(const struct tm *);
static char *asctime_internal(const struct tm *, char *, size_t);

File ../sysdeps/unix/sysv/linux/clock.c:
clock_t clock(void);

File ctime.c:
char *ctime(const time_t *);

File ctime_r.c:
char *ctime_r(const time_t *, char *);

File difftime.c:
double __difftime(time_t, time_t);

File gmtime.c:
struct tm *__gmtime_r(const time_t *, struct tm *);
struct tm *gmtime(const time_t *);

File localtime.c:
struct tm *__localtime_r(const time_t *, struct tm *);
struct tm *localtime(const time_t *);

File mktime.c:
time_t __mktime_internal(struct tm *, struct tm *(*)(const time_t *, struct tm *), time_t *);
time_t mktime(struct tm *);
static struct tm *ranged_convert(struct tm *(*)(const time_t *, struct tm *), time_t *, struct tm *);

File ../sysdeps/unix/sysv/linux/time.c:
time_t time(time_t *);

File ../sysdeps/unix/sysv/linux/adjtime.c:
int __adjtime(const struct timeval *, struct timeval *);

File tzset.c:
void __tz_compute(time_t, struct tm *, int);
struct tm *__tz_convert(const time_t *, int, struct tm *);
long int __tzname_max(void);
void __tzset(void);
void __tzset_parse_tz(const char *);
char *__tzstring(const char *);
static void compute_change(tz_rule *, int);
static unsigned int compute_offset(unsigned int, unsigned int, unsigned int);
static void free_mem(void);
static void tzset_internal(int, int);
static void update_vars(void);

File tzfile.c:
void __tzfile_compute(time_t, int, long int *, int *, struct tm *);
void __tzfile_default(const char *, const char *, long int, long int);
void __tzfile_read(const char *, size_t, char **);

File dysize.c:
int dysize(int);

File timegm.c:
time_t timegm(struct tm *);

File ../sysdeps/unix/bsd/ftime.c:
int ftime(struct timeb *);

File getdate.c:
int __getdate_r(const char *, struct tm *);
struct tm *getdate(const char *);

File strptime.c:
char *strptime(const char *, const char *, struct tm *);

File strptime_l.c:
char *__strptime_internal(const char *, const char *, struct tm *, void *, __locale_t);
char *__strptime_l(const char *, const char *, struct tm *, __locale_t);
static void day_of_the_week(struct tm *);

File strftime.c:
size_t strftime(char *, size_t, const char *, const struct tm *);

File strftime_l.c:
size_t __strftime_l(char *, size_t, const char *, const struct tm *, __locale_t);
static size_t __strftime_internal(char *, size_t, const char *, const struct tm *, _Bool *, __locale_t);

File wcsftime.c:
size_t wcsftime(wchar_t *, size_t, const wchar_t *, const struct tm *);

File strftime_l.c:
size_t __wcsftime_l(wchar_t *, size_t, const wchar_t *, const struct tm *, __locale_t);
static size_t __strftime_internal(wchar_t *, size_t, const wchar_t *, const struct tm *, _Bool *, __locale_t);
static wchar_t *memcpy_uppcase(wchar_t *, const wchar_t *, size_t, __locale_t);

File alt_digit.c:
const char *_nl_get_alt_digit(unsigned int, struct __locale_data *);
const wchar_t *_nl_get_walt_digit(unsigned int, struct __locale_data *);
int _nl_parse_alt_digit(const char **, struct __locale_data *);
static void _nl_init_alt_digit(struct __locale_data *);

File era.c:
struct era_entry *_nl_get_era_entry(const struct tm *, struct __locale_data *);
struct era_entry *_nl_select_era_entry(int, struct __locale_data *);
static void _nl_init_era_entries(struct __locale_data *);

File lc-time-cleanup.c:
void _nl_cleanup_time(struct __locale_data *);

File ../sysdeps/unix/sysv/linux/ntp_gettime.c:
int ntp_gettime(struct ntptimeval *);

File ../sysdeps/unix/sysv/linux/ntp_gettimex.c:
int ntp_gettimex(struct ntptimeval *);

File ../sysdeps/unix/opendir.c:
DIR *__alloc_dir(int, _Bool, const struct stat64 *);
DIR *__opendir(const char *);

File ../sysdeps/unix/closedir.c:
int __closedir(DIR *);

File ../sysdeps/unix/readdir.c:
struct dirent *__readdir(DIR *);

File ../sysdeps/unix/readdir_r.c:
int __readdir_r(DIR *, struct dirent *, struct dirent **);

File ../sysdeps/unix/rewinddir.c:
void rewinddir(DIR *);

File ../sysdeps/unix/seekdir.c:
void seekdir(DIR *, long int);

File ../sysdeps/unix/telldir.c:
long int telldir(DIR *);

File scandir.c:
int scandir(const char *, struct dirent ***, int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **));
static void cancel_handler(void *);

File alphasort.c:
int alphasort(const struct dirent **, const struct dirent **);

File versionsort.c:
int versionsort(const struct dirent **, const struct dirent **);

File ../sysdeps/unix/sysv/linux/getdents.c:
ssize_t __getdents(int, char *, size_t);
ssize_t __getdents64(int, char *, size_t);
ssize_t __old_getdents64(int, char *, size_t);

File ../sysdeps/unix/dirfd.c:
int dirfd(DIR *);

File ../sysdeps/unix/readdir.c:
struct __old_dirent64 *__old_readdir64(DIR *);
struct dirent64 *__readdir64(DIR *);

File ../sysdeps/unix/readdir_r.c:
int __old_readdir64_r(DIR *, struct __old_dirent64 *, struct __old_dirent64 **);
int __readdir64_r(DIR *, struct dirent64 *, struct dirent64 **);

File ../dirent/scandir.c:
int __old_scandir64(const char *, struct __old_dirent64 ***, int (*)(const struct __old_dirent64 *), int (*)(const struct __old_dirent64 **, const struct __old_dirent64 **));
int __scandir64(const char *, struct dirent64 ***, int (*)(const struct dirent64 *), int (*)(const struct dirent64 **, const struct dirent64 **));
static void cancel_handler(void *);

File ../sysdeps/unix/sysv/linux/i386/alphasort64.c:
int __alphasort64(const struct dirent64 **, const struct dirent64 **);
int __old_alphasort64(const struct __old_dirent64 **, const struct __old_dirent64 **);

File ../sysdeps/unix/sysv/linux/i386/versionsort64.c:
int __old_versionsort64(const struct __old_dirent64 **, const struct __old_dirent64 **);
int __versionsort64(const struct dirent64 **, const struct dirent64 **);

File ../sysdeps/unix/fdopendir.c:
DIR *__fdopendir(int);

File ../sysdeps/unix/sysv/linux/getdirentries.c:
ssize_t getdirentries(int, char *, size_t, off_t *);
ssize_t getdirentries64(int, char *, size_t, off64_t *);

File fgetgrent.c:
struct group *fgetgrent(FILE *);

File initgroups.c:
int getgrouplist(const char *, gid_t, gid_t *, int *);
int initgroups(const char *, gid_t);

File compat-initgroups.c:
static enum nss_status compat_call(service_user *, const char *, gid_t, long int *, long int *, gid_t **, long int, int *);

File initgroups.c:
static int internal_getgrouplist(const char *, gid_t, long int *, gid_t **, long int);

File ../sysdeps/unix/sysv/linux/i386/setgroups.c:
int setgroups(size_t, const gid_t *);

File ../nss/getXXent.c:
struct group *getgrent(void);

File ../nss/getXXbyYY.c:
struct group *getgrgid(gid_t);
struct group *getgrnam(const char *);

File putgrent.c:
int putgrent(const struct group *, FILE *);

File ../nss/getXXent_r.c:
int __getgrent_r(struct group *, char *, size_t, struct group **);
int __old_getgrent_r(struct group *, char *, size_t, struct group **);
void endgrent(void);
void setgrent(void);

File ../nss/getXXbyYY_r.c:
int __getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
int __old_getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
int __getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
int __old_getgrnam_r(const char *, struct group *, char *, size_t, struct group **);

File fgetgrent_r.c:
int __fgetgrent_r(FILE *, struct group *, char *, size_t, struct group **);
int _nss_files_parse_grent(char *, struct group *, struct parser_data *, size_t, int *);

File fgetpwent.c:
struct passwd *fgetpwent(FILE *);

File getpw.c:
int __getpw(__uid_t, char *);

File putpwent.c:
int putpwent(const struct passwd *, FILE *);

File ../nss/getXXent.c:
struct passwd *getpwent(void);

File ../nss/getXXbyYY.c:
struct passwd *getpwnam(const char *);
struct passwd *getpwuid(uid_t);

File ../nss/getXXent_r.c:
int __getpwent_r(struct passwd *, char *, size_t, struct passwd **);
int __old_getpwent_r(struct passwd *, char *, size_t, struct passwd **);
void endpwent(void);
void setpwent(void);

File ../nss/getXXbyYY_r.c:
int __getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
int __old_getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
int __getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
int __old_getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);

File fgetpwent_r.c:
int __fgetpwent_r(FILE *, struct passwd *, char *, size_t, struct passwd **);
int _nss_files_parse_pwent(char *, struct passwd *, struct parser_data *, size_t, int *);

File ../sysdeps/unix/sysv/linux/times.c:
clock_t __times(struct tms *);

File ../sysdeps/unix/sysv/linux/wait.c:
pid_t __libc_wait(int *);

File ../sysdeps/unix/bsd/bsd4.4/wait3.c:
__pid_t __wait3(__WAIT_STATUS, int, struct rusage *);

File ../sysdeps/posix/waitid.c:
int __waitid(idtype_t, id_t, siginfo_t *, int);

File ../sysdeps/unix/sysv/linux/sleep.c:
unsigned int __sleep(unsigned int);

File ../nptl/sysdeps/unix/sysv/linux/i386/../fork.c:
pid_t __libc_fork(void);

File ../sysdeps/unix/sysv/linux/execve.c:
int __execve(const char *, char * const *, char * const *);

File ../sysdeps/unix/sysv/linux/fexecve.c:
int fexecve(int, char * const *, char * const *);

File execv.c:
int execv(const char *, char * const *);

File execle.c:
int execle(const char *, const char *, ...);

File execl.c:
int execl(const char *, const char *, ...);

File execvp.c:
int execvp(const char *, char * const *);

File execlp.c:
int execlp(const char *, const char *, ...);

File execvpe.c:
int __execvpe(const char *, char * const *, char * const *);

File ../nptl/sysdeps/unix/sysv/linux/getpid.c:
pid_t __getpid(void);

File ../sysdeps/unix/sysv/linux/i386/getuid.c:
uid_t __getuid(void);

File ../sysdeps/unix/sysv/linux/i386/geteuid.c:
uid_t __geteuid(void);

File ../sysdeps/unix/sysv/linux/i386/getgid.c:
gid_t __getgid(void);

File ../sysdeps/unix/sysv/linux/i386/getegid.c:
gid_t __getegid(void);

File ../sysdeps/unix/sysv/linux/i386/getgroups.c:
int __getgroups(int, gid_t *);

File ../sysdeps/unix/sysv/linux/i386/setuid.c:
int __setuid(uid_t);

File ../sysdeps/unix/sysv/linux/i386/setgid.c:
int __setgid(gid_t);

File group_member.c:
int __group_member(gid_t);

File bsd-getpgrp.c:
pid_t __bsd_getpgrp(pid_t);

File setpgrp.c:
int setpgrp(void);

File ../sysdeps/unix/sysv/linux/i386/getresuid.c:
int __getresuid(uid_t *, uid_t *, uid_t *);

File ../sysdeps/unix/sysv/linux/i386/getresgid.c:
int __getresgid(gid_t *, gid_t *, gid_t *);

File ../sysdeps/unix/sysv/linux/i386/setresuid.c:
int __setresuid(uid_t, uid_t, uid_t);

File ../sysdeps/unix/sysv/linux/i386/setresgid.c:
int __setresgid(gid_t, gid_t, gid_t);

File ../sysdeps/unix/sysv/linux/pathconf.c:
long int __pathconf(const char *, int);
long int __statfs_chown_restricted(int, const struct statfs *);
long int __statfs_filesize_max(int, const struct statfs *);
long int __statfs_link_max(int, const struct statfs *);
long int __statfs_symlinks(int, const struct statfs *);

File ../sysdeps/unix/sysv/linux/x86_64/sysconf.c:
long int __sysconf(int);

File ../sysdeps/posix/sysconf.c:
static long int __sysconf_check_spec(const char *);

File ../sysdeps/unix/sysv/linux/fpathconf.c:
long int __fpathconf(int, int);

File glob.c:
int __glob_pattern_p(const char *, int);
int __glob_pattern_type(const char *, int);
int glob(const char *, int, int (*)(const char *, int), glob_t *);
void globfree(glob_t *);
static int collated_compare(const void *, const void *);
static int glob_in_dir(const char *, const char *, int, int (*)(const char *, int), glob_t *);
static int link_exists2_p(const char *, unsigned int, const char *, glob_t *);
static const char *next_brace_sub(const char *, int);
static int prefix_array(const char *, char **, unsigned int);

File ../posix/glob.c:
int __glob64(const char *, int, int (*)(const char *, int), glob64_t *);
int __old_glob64(const char *, int, int (*)(const char *, int), glob64_t *);
void globfree64(glob64_t *);
static int __old_glob_in_dir(const char *, const char *, int, int (*)(const char *, int), glob64_t *);
static int collated_compare(const void *, const void *);
static int glob_in_dir(const char *, const char *, int, int (*)(const char *, int), glob64_t *);
static int link_exists2_p(const char *, size_t, const char *, glob64_t *);
static const char *next_brace_sub(const char *, int);
static int prefix_array(const char *, char **, size_t);

File fnmatch.c:
int __fnmatch(const char *, const char *, int);

File fnmatch_loop.c:
static const char *end_pattern(const char *);
static const wchar_t *end_wpattern(const wchar_t *);
static int ext_match(int, const char *, const char *, const char *, int, int);
static int ext_wmatch(wint_t, const wchar_t *, const wchar_t *, const wchar_t *, int, int);
static int internal_fnmatch(const char *, const char *, const char *, int, int, struct fnmatch_struct *);
static int internal_fnwmatch(const wchar_t *, const wchar_t *, const wchar_t *, int, int, struct fnwmatch_struct *);

File confstr.c:
size_t confstr(int, char *, size_t);

File getopt.c:
int __posix_getopt(int, char * const *, const char *);
int _getopt_internal(int, char * const *, const char *, const struct option *, int *, int, int);
int _getopt_internal_r(int, char * const *, const char *, const struct option *, int *, int, struct _getopt_data *, int);
int getopt(int, char * const *, const char *);
static void exchange(char **, struct _getopt_data *);

File getopt1.c:
int _getopt_long_only_r(int, char * const *, const char *, const struct option *, int *, struct _getopt_data *);
int _getopt_long_r(int, char * const *, const char *, const struct option *, int *, struct _getopt_data *);
int getopt_long(int, char * const *, const char *, const struct option *, int *);
int getopt_long_only(int, char * const *, const char *, const struct option *, int *);

File ../sysdeps/unix/sysv/linux/sched_getaffinity.c:
int __sched_getaffinity_new(pid_t, size_t, cpu_set_t *);
int __sched_getaffinity_old(pid_t, cpu_set_t *);

File ../sysdeps/unix/sysv/linux/sched_setaffinity.c:
int __sched_setaffinity_new(pid_t, size_t, const cpu_set_t *);
int __sched_setaffinity_old(pid_t, const cpu_set_t *);

File ../sysdeps/unix/sysv/linux/pread.c:
ssize_t __libc_pread(int, void *, size_t, off_t);

File ../sysdeps/unix/sysv/linux/pwrite.c:
ssize_t __libc_pwrite(int, const void *, size_t, off_t);

File ../sysdeps/unix/sysv/linux/pread64.c:
ssize_t __libc_pread64(int, void *, size_t, off64_t);

File ../sysdeps/unix/sysv/linux/pwrite64.c:
ssize_t __libc_pwrite64(int, const void *, size_t, off64_t);

File ../sysdeps/unix/sysv/linux/posix_madvise.c:
int posix_madvise(void *, size_t, int);

File ../sysdeps/unix/get_child_max.c:
long int __get_child_max(void);

File ../sysdeps/x86_64/multiarch/sched_cpucount.c:
void *__sched_cpucount_ifunc(void);

File ../posix/sched_cpucount.c:
static int generic_cpucount(size_t, const cpu_set_t *);
static int popcount_cpucount(size_t, const cpu_set_t *);

File sched_cpualloc.c:
cpu_set_t *__sched_cpualloc(size_t);

File sched_cpufree.c:
void __sched_cpufree(cpu_set_t *);

File ../sysdeps/posix/getaddrinfo.c:
void freeaddrinfo(struct addrinfo *);
int getaddrinfo(const char *, const char *, const struct addrinfo *, struct addrinfo **);
static void fini(void);
static void gaiconf_init(void);
static int gaih_inet(const char *, const struct gaih_service *, const struct addrinfo *, struct addrinfo **, unsigned int *);
static int gaih_inet_serv(const char *, const struct gaih_typeproto *, const struct addrinfo *, struct gaih_servtuple *);
static int get_scope(const struct sockaddr_in6 *);
static int in6aicmp(const void *, const void *);
static int match_prefix(const struct sockaddr_in6 *, const struct prefixentry *, int);
static int prefixcmp(const void *, const void *);
static int rfc3484_sort(const void *, const void *, void *);
static int scopecmp(const void *, const void *);

File ../sysdeps/posix/gai_strerror.c:
const char *gai_strerror(int);

File regexec-compat.c:
int __compat_regexec(const regex_t *, const char *, size_t, regmatch_t *, int);

File regcomp.c:
int __re_compile_fastmap(struct re_pattern_buffer *);
const char *__re_compile_pattern(const char *, size_t, struct re_pattern_buffer *);

File regexec.c:
int __re_match(struct re_pattern_buffer *, const char *, int, int, struct re_registers *);
int __re_match_2(struct re_pattern_buffer *, const char *, int, const char *, int, int, struct re_registers *, int);
int __re_search(struct re_pattern_buffer *, const char *, int, int, int, struct re_registers *);
int __re_search_2(struct re_pattern_buffer *, const char *, int, const char *, int, int, int, struct re_registers *, int);
void __re_set_registers(struct re_pattern_buffer *, struct re_registers *, unsigned int, regoff_t *, regoff_t *);

File regcomp.c:
reg_syntax_t __re_set_syntax(reg_syntax_t);
int __regcomp(regex_t *, const char *, int);
size_t __regerror(int, const regex_t *, char *, size_t);

File regexec.c:
int __regexec(const regex_t *, const char *, size_t, regmatch_t *, int);

File regcomp.c:
void __regfree(regex_t *);
char *re_comp(const char *);

File regexec.c:
int re_exec(const char *);

File regcomp.c:
static reg_errcode_t build_charclass(unsigned char *, bitset_word_t *, re_charset_t *, int *, const unsigned char *, reg_syntax_t);
static bin_tree_t *build_charclass_op(re_dfa_t *, unsigned char *, const unsigned char *, const unsigned char *, int, reg_errcode_t *);

File regexec.c:
static int build_trtable(const re_dfa_t *, re_dfastate_t *);

File regex_internal.c:
static void build_upper_buffer(re_string_t *);
static void build_wcs_buffer(re_string_t *);
static reg_errcode_t build_wcs_upper_buffer(re_string_t *);

File regcomp.c:
static reg_errcode_t calc_eclosure_iter(re_node_set *, re_dfa_t *, int, int);
static reg_errcode_t calc_first(void *, bin_tree_t *);
static reg_errcode_t calc_next(void *, bin_tree_t *);

File regexec.c:
static reg_errcode_t check_arrival(re_match_context_t *, state_array_t *, int, int, int, int, int);
static reg_errcode_t check_arrival_expand_ecl(const re_dfa_t *, re_node_set *, int, int);
static reg_errcode_t check_arrival_expand_ecl_sub(const re_dfa_t *, re_node_set *, int, int, int);
static int check_dst_limits(const re_match_context_t *, re_node_set *, int, int, int, int);
static int check_dst_limits_calc_pos_1(const re_match_context_t *, int, int, int, int);
static int check_halt_state_context(const re_match_context_t *, const re_dfastate_t *, int);
static int check_node_accept(const re_match_context_t *, const re_token_t *, int);
static int check_node_accept_bytes(const re_dfa_t *, int, const re_string_t *, int);
static reg_errcode_t check_subexp_matching_top(re_match_context_t *, re_node_set *, int);
static reg_errcode_t clean_state_log_if_needed(re_match_context_t *, int);

File regcomp.c:
static bin_tree_t *create_token_tree(re_dfa_t *, bin_tree_t *, bin_tree_t *, const re_token_t *);
static bin_tree_t *create_tree(re_dfa_t *, bin_tree_t *, bin_tree_t *, re_token_type_t);
static int duplicate_node(re_dfa_t *, int, unsigned int);
static reg_errcode_t duplicate_node_closure(re_dfa_t *, int, int, int, unsigned int);
static bin_tree_t *duplicate_tree(const bin_tree_t *, re_dfa_t *);

File regexec.c:
static reg_errcode_t expand_bkref_cache(re_match_context_t *, re_node_set *, int, int, int);
static reg_errcode_t extend_buffers(re_match_context_t *);

File regcomp.c:
static int fetch_number(re_string_t *, re_token_t *, reg_syntax_t);
static void fetch_token(re_token_t *, re_string_t *, reg_syntax_t);
static void free_charset(re_charset_t *);
static void free_dfa_content(re_dfa_t *);

File regexec.c:
static reg_errcode_t free_fail_stack_return(struct re_fail_stack_t *);

File regcomp.c:
static void free_mem(void);

File regex_internal.c:
static void free_state(re_dfastate_t *);

File regcomp.c:
static void free_token(re_token_t *);
static reg_errcode_t free_tree(void *, bin_tree_t *);
static void free_workarea_compile(regex_t *);

File regexec.c:
static reg_errcode_t get_subexp_sub(re_match_context_t *, const re_sub_match_top_t *, re_sub_match_last_t *, int, int);

File regcomp.c:
static reg_errcode_t link_nfa_nodes(void *, bin_tree_t *);
static bin_tree_t *lower_subexp(reg_errcode_t *, regex_t *, bin_tree_t *);
static reg_errcode_t lower_subexps(void *, bin_tree_t *);
static reg_errcode_t mark_opt_subexp(void *, bin_tree_t *);

File regexec.c:
static void match_ctx_clean(re_match_context_t *);
static reg_errcode_t merge_state_array(const re_dfa_t *, re_dfastate_t **, re_dfastate_t **, int);
static re_dfastate_t *merge_state_with_log(reg_errcode_t *, re_match_context_t *, re_dfastate_t *);

File regcomp.c:
static reg_errcode_t optimize_subexps(void *, bin_tree_t *);
static reg_errcode_t parse_bracket_element(bracket_elem_t *, re_string_t *, re_token_t *, int, re_dfa_t *, reg_syntax_t, int);
static bin_tree_t *parse_branch(re_string_t *, regex_t *, re_token_t *, reg_syntax_t, int, reg_errcode_t *);
static bin_tree_t *parse_expression(re_string_t *, regex_t *, re_token_t *, reg_syntax_t, int, reg_errcode_t *);
static bin_tree_t *parse_reg_exp(re_string_t *, regex_t *, re_token_t *, reg_syntax_t, int, reg_errcode_t *);
static int peek_token(re_token_t *, re_string_t *, reg_syntax_t);
static int peek_token_bracket(re_token_t *, re_string_t *, reg_syntax_t);

File regexec.c:
static int pop_fail_stack(struct re_fail_stack_t *, int *, int, regmatch_t *, re_node_set *);

File regcomp.c:
static reg_errcode_t postorder(bin_tree_t *, reg_errcode_t (*)(void *, bin_tree_t *), void *);
static reg_errcode_t preorder(bin_tree_t *, reg_errcode_t (*)(void *, bin_tree_t *), void *);

File regex_internal.c:
static re_dfastate_t *re_acquire_state(reg_errcode_t *, const re_dfa_t *, const re_node_set *);
static re_dfastate_t *re_acquire_state_context(reg_errcode_t *, const re_dfa_t *, const re_node_set *, unsigned int);

File regcomp.c:
static void re_compile_fastmap_iter(regex_t *, const re_dfastate_t *, char *);
static reg_errcode_t re_compile_internal(regex_t *, const char *, size_t, reg_syntax_t);

File regex_internal.c:
static int re_dfa_add_node(re_dfa_t *, re_token_t);
static reg_errcode_t re_node_set_add_intersect(re_node_set *, const re_node_set *, const re_node_set *);
static reg_errcode_t re_node_set_alloc(re_node_set *, int);
static int re_node_set_contains(const re_node_set *, int);
static reg_errcode_t re_node_set_init_1(re_node_set *, int);
static reg_errcode_t re_node_set_init_copy(re_node_set *, const re_node_set *);
static reg_errcode_t re_node_set_init_union(re_node_set *, const re_node_set *, const re_node_set *);
static int re_node_set_insert(re_node_set *, int);
static int re_node_set_insert_last(re_node_set *, int);
static reg_errcode_t re_node_set_merge(re_node_set *, const re_node_set *);

File regexec.c:
static int re_search_2_stub(struct re_pattern_buffer *, const char *, int, const char *, int, int, int, struct re_registers *, int, int);
static reg_errcode_t re_search_internal(const regex_t *, const char *, int, int, int, int, size_t, regmatch_t *, int);
static int re_search_stub(struct re_pattern_buffer *, const char *, int, int, int, int, struct re_registers *, int);

File regex_internal.c:
static unsigned int re_string_context_at(const re_string_t *, int, int);
static void re_string_destruct(re_string_t *);
static reg_errcode_t re_string_realloc_buffers(re_string_t *, int);
static reg_errcode_t re_string_reconstruct(re_string_t *, int, int);
static reg_errcode_t register_state(const re_dfa_t *, re_dfastate_t *, unsigned int);

File regexec.c:
static int search_cur_bkref_entry(const re_match_context_t *, int);
static reg_errcode_t set_regs(const regex_t *, const re_match_context_t *, size_t, regmatch_t *, int);
static reg_errcode_t sift_states_backward(const re_match_context_t *, re_sift_context_t *);
static reg_errcode_t sub_epsilon_src_nodes(const re_dfa_t *, int, re_node_set *, const re_node_set *);
static reg_errcode_t transit_state_bkref(re_match_context_t *, const re_node_set *);
static reg_errcode_t update_cur_sifted_state(const re_match_context_t *, re_sift_context_t *, int, re_node_set *);

File spawn_faction_init.c:
int __posix_spawn_file_actions_realloc(posix_spawn_file_actions_t *);
int posix_spawn_file_actions_init(posix_spawn_file_actions_t *);

File spawn_faction_destroy.c:
int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *);

File spawn_faction_addclose.c:
int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *, int);

File spawn_faction_addopen.c:
int posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *, int, const char *, int, mode_t);

File spawn_faction_adddup2.c:
int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *, int, int);

File spawnattr_init.c:
int posix_spawnattr_init(posix_spawnattr_t *);

File spawnattr_destroy.c:
int posix_spawnattr_destroy(posix_spawnattr_t *);

File spawnattr_getdefault.c:
int posix_spawnattr_getsigdefault(const posix_spawnattr_t *, sigset_t *);

File spawnattr_setdefault.c:
int posix_spawnattr_setsigdefault(posix_spawnattr_t *, const sigset_t *);

File spawnattr_getflags.c:
int posix_spawnattr_getflags(const posix_spawnattr_t *, short int *);

File spawnattr_setflags.c:
int posix_spawnattr_setflags(posix_spawnattr_t *, short int);

File spawnattr_getpgroup.c:
int posix_spawnattr_getpgroup(const posix_spawnattr_t *, pid_t *);

File spawnattr_setpgroup.c:
int posix_spawnattr_setpgroup(posix_spawnattr_t *, pid_t);

File spawn.c:
int posix_spawn(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *);

File spawnp.c:
int posix_spawnp(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *);

File ../sysdeps/posix/spawni.c:
int __spawni(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *, int);
static void script_execute(const char *, char * const *, char * const *);

File spawnattr_getsigmask.c:
int posix_spawnattr_getsigmask(const posix_spawnattr_t *, sigset_t *);

File spawnattr_getschedpolicy.c:
int posix_spawnattr_getschedpolicy(const posix_spawnattr_t *, int *);

File spawnattr_getschedparam.c:
int posix_spawnattr_getschedparam(const posix_spawnattr_t *, struct sched_param *);

File spawnattr_setsigmask.c:
int posix_spawnattr_setsigmask(posix_spawnattr_t *, const sigset_t *);

File spawnattr_setschedpolicy.c:
int posix_spawnattr_setschedpolicy(posix_spawnattr_t *, int);

File spawnattr_setschedparam.c:
int posix_spawnattr_setschedparam(posix_spawnattr_t *, const struct sched_param *);

File ../sysdeps/unix/sysv/linux/getlogin.c:
char *getlogin(void);

File ../sysdeps/unix/getlogin.c:
static char *getlogin_fd0(void);

File ../sysdeps/unix/sysv/linux/getlogin_r.c:
int __getlogin_r_loginuid(char *, size_t);
int getlogin_r(char *, size_t);

File ../sysdeps/unix/getlogin_r.c:
static int getlogin_r_fd0(char *, size_t);

File wordexp.c:
int wordexp(const char *, wordexp_t *, int);
void wordfree(wordexp_t *);
static int eval_expr(char *, long int *);
static int eval_expr_multdiv(char **, long int *);
static int eval_expr_val(char **, long int *);
static int exec_comm(char *, char **, size_t *, size_t *, int, wordexp_t *, const char *, const char *);
static int parse_arith(char **, size_t *, size_t *, const char *, size_t *, int, int);
static int parse_backslash(char **, size_t *, size_t *, const char *, size_t *);
static int parse_backtick(char **, size_t *, size_t *, const char *, size_t *, int, wordexp_t *, const char *, const char *);
static int parse_dollars(char **, size_t *, size_t *, const char *, size_t *, int, wordexp_t *, const char *, const char *, int);
static int parse_qtd_backslash(char **, size_t *, size_t *, const char *, size_t *);
static int parse_tilde(char **, size_t *, size_t *, const char *, size_t *, size_t);
static char *w_addchar(char *, size_t *, size_t *, char);
static char *w_addmem(char *, size_t *, size_t *, const char *, size_t);
static char *w_addstr(char *, size_t *, size_t *, const char *);
static int w_addword(wordexp_t *, char *);

File setlogin.c:
int setlogin(const char *);

File ../sysdeps/unix/sysv/linux/sched_getcpu.c:
int sched_getcpu(void);

File ../sysdeps/unix/mkfifo.c:
int mkfifo(const char *, mode_t);

File ../sysdeps/unix/mkfifoat.c:
int mkfifoat(int, const char *, mode_t);

File ../sysdeps/unix/sysv/linux/i386/xstat.c:
int __xstat(int, const char *, struct stat *);

File ../sysdeps/unix/sysv/linux/i386/fxstat.c:
int __fxstat(int, int, struct stat *);

File ../sysdeps/unix/sysv/linux/i386/lxstat.c:
int __lxstat(int, const char *, struct stat *);

File ../sysdeps/unix/sysv/linux/xstat64.c:
int ___xstat64(int, const char *, struct stat64 *);

File ../sysdeps/unix/sysv/linux/fxstat64.c:
int ___fxstat64(int, int, struct stat64 *);

File ../sysdeps/unix/sysv/linux/lxstat64.c:
int ___lxstat64(int, const char *, struct stat64 *);

File ../sysdeps/unix/sysv/linux/xmknod.c:
int __xmknod(int, const char *, mode_t, dev_t *);

File ../sysdeps/unix/sysv/linux/xmknodat.c:
int __xmknodat(int, int, const char *, mode_t, dev_t *);

File ../sysdeps/unix/sysv/linux/i386/fxstatat.c:
int __fxstatat(int, int, const char *, struct stat *, int);

File ../sysdeps/unix/sysv/linux/fxstatat64.c:
int __fxstatat64(int, int, const char *, struct stat64 *, int);

File ../sysdeps/unix/sysv/linux/statfs64.c:
int __statfs64(const char *, struct statfs64 *);

File ../sysdeps/unix/sysv/linux/fstatfs64.c:
int __fstatfs64(int, struct statfs64 *);

File ../sysdeps/unix/sysv/linux/statvfs.c:
int statvfs(const char *, struct statvfs *);

File ../sysdeps/unix/sysv/linux/fstatvfs.c:
int fstatvfs(int, struct statvfs *);

File ../sysdeps/unix/sysv/linux/statvfs64.c:
int __statvfs64(const char *, struct statvfs64 *);

File ../sysdeps/unix/sysv/linux/fstatvfs64.c:
int __fstatvfs64(int, struct statvfs64 *);

File ../sysdeps/unix/sysv/linux/fchmodat.c:
int fchmodat(int, const char *, mode_t, int);

File ../sysdeps/unix/sysv/linux/mkdirat.c:
int mkdirat(int, const char *, mode_t);

File ../sysdeps/unix/sysv/linux/open64.c:
int __libc_open64(const char *, int, ...);

File ../sysdeps/unix/sysv/linux/openat.c:
void __atfct_seterrno(int, int, const char *);
int __openat(int, const char *, int, ...);
int __openat_2(int, const char *, int);
int __openat_nocancel(int, const char *, int, mode_t);
int __openat64(int, const char *, int, ...);
int __openat64_2(int, const char *, int);
int __openat64_nocancel(int, const char *, int, mode_t);

File ../sysdeps/posix/euidaccess.c:
int __euidaccess(const char *, int);

File ../sysdeps/unix/sysv/linux/faccessat.c:
int faccessat(int, const char *, int, int);

File ../sysdeps/unix/sysv/linux/i386/fcntl.c:
int __fcntl_nocancel(int, int, ...);
int __libc_fcntl(int, int, ...);

File lockf.c:
int lockf(int, int, off_t);

File ../sysdeps/unix/sysv/linux/i386/lockf64.c:
int lockf64(int, int, off64_t);

File creat64.c:
int creat64(const char *, mode_t);

File ../sysdeps/unix/sysv/linux/getcwd.c:
char *__getcwd(char *, size_t);

File getwd.c:
char *getwd(char *);

File getdirname.c:
char *get_current_dir_name(void);

File ../sysdeps/unix/sysv/linux/i386/chown.c:
int __chown_is_lchown(const char *, uid_t, gid_t);
int __real_chown(const char *, uid_t, gid_t);

File ../sysdeps/unix/sysv/linux/i386/fchown.c:
int __fchown(int, uid_t, gid_t);

File ../sysdeps/unix/sysv/linux/i386/lchown.c:
int __lchown(const char *, uid_t, gid_t);

File ../sysdeps/unix/sysv/linux/i386/fchownat.c:
int fchownat(int, const char *, uid_t, gid_t, int);

File ../sysdeps/unix/sysv/linux/ttyname.c:
char *ttyname(int);
static char *getttyname(const char *, dev_t, ino64_t, int, int *);

File ../sysdeps/unix/sysv/linux/ttyname_r.c:
int __ttyname_r(int, char *, size_t);
static int getttyname_r(char *, size_t, dev_t, ino64_t, int, int *);

File ../sysdeps/posix/isatty.c:
int __isatty(int);

File ../sysdeps/unix/sysv/linux/linkat.c:
int linkat(int, const char *, int, const char *, int);

File ../sysdeps/unix/sysv/linux/symlinkat.c:
int symlinkat(const char *, int, const char *);

File ../sysdeps/unix/sysv/linux/readlinkat.c:
ssize_t readlinkat(int, const char *, char *, size_t);

File ../sysdeps/unix/sysv/linux/unlinkat.c:
int unlinkat(int, const char *, int);

File ../sysdeps/unix/sysv/linux/poll.c:
int __poll(struct pollfd *, nfds_t, int);

File ../sysdeps/unix/sysv/linux/ppoll.c:
int ppoll(struct pollfd *, nfds_t, const struct timespec *, const sigset_t *);

File ../sysdeps/unix/sysv/linux/posix_fadvise.c:
int posix_fadvise(int, off_t, off_t, int);

File ../sysdeps/unix/sysv/linux/i386/posix_fallocate.c:
int posix_fallocate(int, __off_t, __off_t);

File ../sysdeps/posix/posix_fallocate64.c:
int __posix_fallocate64_l32(int, off64_t, size_t);

File ../sysdeps/unix/sysv/linux/i386/posix_fallocate64.c:
int __posix_fallocate64_l64(int, __off64_t, __off64_t);

File ../sysdeps/unix/sysv/linux/utimensat.c:
int utimensat(int, const char *, const struct timespec *, int);

File ../sysdeps/unix/sysv/linux/futimens.c:
int futimens(int, const struct timespec *);

File lchmod.c:
int lchmod(const char *, mode_t);

File ftw.c:
int __new_nftw(const char *, __nftw_func_t, int, int);
int __old_nftw(const char *, __nftw_func_t, int, int);
int ftw(const char *, __ftw_func_t, int);
static int add_object(struct ftw_data *, struct stat *);
static int ftw_dir(struct ftw_data *, struct stat *, struct dir_data *);
static int ftw_startup(const char *, int, void *, int, int);
static int object_compare(const void *, const void *);
static int process_entry(struct ftw_data *, struct dir_data *, const char *, size_t, int);
int __new_nftw64(const char *, __nftw64_func_t, int, int);
int __old_nftw64(const char *, __nftw64_func_t, int, int);
int ftw64(const char *, __ftw64_func_t, int);
static int add_object(struct ftw_data *, struct stat64 *);
static int ftw_dir(struct ftw_data *, struct stat64 *, struct dir_data *);
static int ftw_startup(const char *, int, void *, int, int);
static int object_compare(const void *, const void *);
static int process_entry(struct ftw_data *, struct dir_data *, const char *, size_t, int);

File fts.c:
FTSENT *fts_children(FTS *, int);
int fts_close(FTS *);
FTS *fts_open(char * const *, int, int (*)(const FTSENT **, const FTSENT **));
FTSENT *fts_read(FTS *);
int fts_set(FTS *, FTSENT *, int);
static FTSENT *fts_alloc(FTS *, const char *, size_t);
static FTSENT *fts_build(FTS *, int);
static void fts_lfree(FTSENT *);
static int fts_palloc(FTS *, size_t);
static int fts_safe_changedir(FTS *, FTSENT *, int, const char *);
static FTSENT *fts_sort(FTS *, FTSENT *, int);
static u_short fts_stat(FTS *, FTSENT *, int);

File ../sysdeps/unix/sysv/linux/xstatconv.c:
int __xstat32_conv(int, struct stat64 *, struct stat *);
int __xstat64_conv(int, struct kernel_stat *, void *);

File ../sysdeps/unix/sysv/linux/internal_statvfs.c:
void __internal_statvfs(const char *, struct statvfs *, struct statfs *, struct stat64 *);
int __statvfs_getflags(const char *, int, struct stat64 *);
void __internal_statvfs64(const char *, struct statvfs64 *, struct statfs64 *, struct stat64 *);

File ../sysdeps/unix/sysv/linux/open_2.c:
int __open_2(const char *, int);

File ../sysdeps/unix/sysv/linux/open64_2.c:
int __open64_2(const char *, int);

File ../sysdeps/unix/sysv/linux/i386/fallocate.c:
int fallocate(int, int, __off_t, __off_t);

File ../sysdeps/unix/sysv/linux/i386/fallocate64.c:
int fallocate64(int, int, __off64_t, __off64_t);

File ../sysdeps/unix/sysv/linux/speed.c:
speed_t cfgetispeed(const struct termios *);
speed_t cfgetospeed(const struct termios *);
int cfsetispeed(struct termios *, speed_t);
int cfsetospeed(struct termios *, speed_t);

File cfsetspeed.c:
int cfsetspeed(struct termios *, speed_t);

File ../sysdeps/unix/sysv/linux/tcsetattr.c:
int tcsetattr(int, int, const struct termios *);

File ../sysdeps/unix/sysv/linux/tcgetattr.c:
int __tcgetattr(int, struct termios *);

File ../sysdeps/unix/bsd/tcgetpgrp.c:
__pid_t tcgetpgrp(int);

File ../sysdeps/unix/bsd/tcsetpgrp.c:
int tcsetpgrp(int, pid_t);

File ../sysdeps/unix/sysv/linux/tcdrain.c:
int __libc_tcdrain(int);

File ../sysdeps/unix/sysv/linux/tcflow.c:
int tcflow(int, int);

File ../sysdeps/unix/sysv/linux/tcflush.c:
int tcflush(int, int);

File ../sysdeps/unix/common/tcsendbrk.c:
int tcsendbreak(int, int);

File cfmakeraw.c:
void cfmakeraw(struct termios *);

File tcgetsid.c:
__pid_t tcgetsid(int);

File ../sysdeps/unix/sysv/linux/i386/getrlimit.c:
int __new_getrlimit(enum __rlimit_resource, struct rlimit *);

File ../sysdeps/unix/sysv/linux/i386/setrlimit.c:
int __new_setrlimit(enum __rlimit_resource, const struct rlimit *);

File ../resource/getrlimit64.c:
int __new_getrlimit64(enum __rlimit_resource, struct rlimit64 *);

File setrlimit64.c:
int setrlimit64(enum __rlimit_resource, const struct rlimit64 *);

File ../sysdeps/unix/sysv/linux/ulimit.c:
long int __ulimit(int, ...);

File vlimit.c:
int vlimit(enum __vlimit_resource, int);

File vtimes.c:
int vtimes(struct vtimes *, struct vtimes *);
static int vtimes_one(struct vtimes *, enum __rusage_who);

File ../sysdeps/unix/sysv/linux/getpriority.c:
int getpriority(enum __priority_which, id_t);

File ../sysdeps/unix/nice.c:
int nice(int);

File ../sysdeps/unix/sysv/linux/i386/oldgetrlimit64.c:
int __old_getrlimit64(enum __rlimit_resource, struct rlimit64 *);

File ../sysdeps/unix/sysv/linux/i386/brk.c:
int __brk(void *);

File sbrk.c:
void *__sbrk(intptr_t);

File sstk.c:
void *sstk(int);

File ../sysdeps/unix/sysv/linux/readv.c:
ssize_t __libc_readv(int, const struct iovec *, int);

File ../sysdeps/posix/readv.c:
static ssize_t __atomic_readv_replacement(int, const struct iovec *, int);

File ../sysdeps/unix/sysv/linux/writev.c:
ssize_t __libc_writev(int, const struct iovec *, int);

File ../sysdeps/posix/writev.c:
static ssize_t __atomic_writev_replacement(int, const struct iovec *, int);

File ../sysdeps/unix/sysv/linux/preadv.c:
ssize_t preadv(int, const struct iovec *, int, off_t);

File ../sysdeps/posix/preadv.c:
static ssize_t __atomic_preadv_replacement(int, const struct iovec *, int, off_t);

File ../sysdeps/unix/sysv/linux/preadv.c:
ssize_t preadv64(int, const struct iovec *, int, off64_t);

File ../sysdeps/posix/preadv.c:
static ssize_t __atomic_preadv64_replacement(int, const struct iovec *, int, off64_t);

File ../sysdeps/unix/sysv/linux/pwritev.c:
ssize_t pwritev(int, const struct iovec *, int, off_t);

File ../sysdeps/posix/pwritev.c:
static ssize_t __atomic_pwritev_replacement(int, const struct iovec *, int, off_t);

File ../sysdeps/unix/sysv/linux/pwritev.c:
ssize_t pwritev64(int, const struct iovec *, int, off64_t);

File ../sysdeps/posix/pwritev.c:
static ssize_t __atomic_pwritev64_replacement(int, const struct iovec *, int, off64_t);

File ../sysdeps/unix/sysv/linux/i386/setreuid.c:
int __setreuid(uid_t, uid_t);

File ../sysdeps/unix/sysv/linux/i386/setregid.c:
int __setregid(gid_t, gid_t);

File ../sysdeps/unix/sysv/linux/i386/seteuid.c:
int seteuid(uid_t);

File ../sysdeps/unix/sysv/linux/i386/setegid.c:
int setegid(gid_t);

File ../sysdeps/unix/sysv/linux/getpagesize.c:
int __getpagesize(void);

File ../sysdeps/posix/getdtsz.c:
int __getdtablesize(void);

File ../sysdeps/unix/sysv/gethostname.c:
int __gethostname(char *, size_t);

File getdomain.c:
int getdomainname(char *, size_t);

File ../sysdeps/unix/sysv/linux/i386/../pselect.c:
int __pselect(int, fd_set *, fd_set *, fd_set *, const struct timespec *, const sigset_t *);

File ../sysdeps/unix/sysv/linux/reboot.c:
int reboot(int);

File ../sysdeps/unix/sysv/linux/gethostid.c:
long int gethostid(void);
int sethostid(long int);

File mktemp.c:
char *mktemp(char *);

File mkstemp.c:
int mkstemp(char *);

File mkstemp64.c:
int mkstemp64(char *);

File mkdtemp.c:
char *mkdtemp(char *);

File mkostemp.c:
int mkostemp(char *, int);

File mkostemp64.c:
int mkostemp64(char *, int);

File mkstemps.c:
int mkstemps(char *, int);

File mkstemps64.c:
int mkstemps64(char *, int);

File mkostemps.c:
int mkostemps(char *, int, int);

File mkostemps64.c:
int mkostemps64(char *, int, int);

File ../sysdeps/unix/bsd/ualarm.c:
__useconds_t ualarm(useconds_t, useconds_t);

File ../sysdeps/unix/sysv/linux/usleep.c:
int usleep(useconds_t);

File gtty.c:
int gtty(int, struct sgttyb *);

File stty.c:
int stty(int, const struct sgttyb *);

File ../sysdeps/unix/sysv/linux/ptrace.c:
long int ptrace(enum __ptrace_request, ...);

File mntent.c:
struct mntent *getmntent(FILE *);
static void allocate(void);

File mntent_r.c:
int __addmntent(FILE *, const struct mntent *);
int __endmntent(FILE *);
struct mntent *__getmntent_r(FILE *, struct mntent *, char *, int);
char *__hasmntopt(const struct mntent *, const char *);
FILE *__setmntent(const char *, const char *);
static char *decode_name(char *);

File ../sysdeps/unix/sysv/linux/utimes.c:
int __utimes(const char *, const struct timeval *);

File ../sysdeps/unix/sysv/linux/lutimes.c:
int lutimes(const char *, const struct timeval *);

File ../sysdeps/unix/sysv/linux/futimes.c:
int __futimes(int, const struct timeval *);

File ../sysdeps/unix/sysv/linux/futimesat.c:
int futimesat(int, const char *, const struct timeval *);

File ../sysdeps/unix/sysv/linux/truncate64.c:
int truncate64(const char *, off64_t);

File ../sysdeps/unix/sysv/linux/ftruncate64.c:
int __ftruncate64(int, off64_t);

File insremque.c:
void insque(void *, void *);
void remque(void *);

File getttyent.c:
int endttyent(void);
struct ttyent *getttyent(void);
struct ttyent *getttynam(const char *);
int setttyent(void);
static char *skip(char *);

File getusershell.c:
void endusershell(void);
char *getusershell(void);
void setusershell(void);
static char **initshells(void);

File getpass.c:
char *getpass(const char *);
static void call_fclose(void *);

File ttyslot.c:
int ttyslot(void);

File ../misc/syslog.c:
void __syslog(int, const char *, ...);
void __syslog_chk(int, int, const char *, ...);
void __vsyslog(int, const char *, va_list);
void __vsyslog_chk(int, int, const char *, va_list);
void closelog(void);
void openlog(const char *, int, int);
int setlogmask(int);
static void cancel_handler(void *);
static void openlog_internal(const char *, int, int);

File daemon.c:
int daemon(int, int);

File hsearch.c:
void __hdestroy(void);
int hcreate(size_t);
ENTRY *hsearch(ENTRY, ACTION);

File hsearch_r.c:
int hcreate_r(size_t, struct hsearch_data *);
void hdestroy_r(struct hsearch_data *);
int hsearch_r(ENTRY, ACTION, ENTRY **, struct hsearch_data *);

File tsearch.c:
void *__tdelete(const void *, void **, __compar_fn_t);
void __tdestroy(void *, __free_fn_t);
void *__tfind(const void *, void * const *, __compar_fn_t);
void *__tsearch(const void *, void **, __compar_fn_t);
void __twalk(const void *, __action_fn_t);
static void maybe_split_for_insert(node *, node *, node *, int, int, int);
static void tdestroy_recurse(node, __free_fn_t);
static void trecurse(const void *, __action_fn_t, int);

File lsearch.c:
void *lfind(const void *, const void *, size_t *, size_t, __compar_fn_t);
void *lsearch(const void *, void *, size_t *, size_t, __compar_fn_t);

File err.c:
void err(int, const char *, ...);
void errx(int, const char *, ...);
void verr(int, const char *, __gnuc_va_list);
void verrx(int, const char *, __gnuc_va_list);
void vwarn(const char *, __gnuc_va_list);
void vwarnx(const char *, __gnuc_va_list);
void warn(const char *, ...);
void warnx(const char *, ...);
static void convert_and_print(const char *, __gnuc_va_list);

File error.c:
void __error(int, int, const char *, ...);
void __error_at_line(int, int, const char *, unsigned int, const char *, ...);
static void error_tail(int, int, const char *, va_list);
static void print_errno_message(int);

File ../sysdeps/unix/sysv/linux/ustat.c:
int ustat(dev_t, struct ustat *);

File ../sysdeps/unix/sysv/linux/getsysstats.c:
long int __get_avphys_pages(void);
int __get_nprocs(void);
int __get_nprocs_conf(void);
long int __get_phys_pages(void);
static char *next_line(int, char * const, char **, char **, char * const);
static long int phys_pages_info(const char *);

File dirname.c:
char *dirname(char *);

File ../sysdeps/unix/sysv/linux/getloadavg.c:
int getloadavg(double *, int);

File ../sysdeps/unix/sysv/linux/getclktck.c:
int __getclktck(void);

File regexp.c:
int __advance(const char *, const char *);
int __step(const char *, const char *);

File fstab.c:
void endfsent(void);
struct fstab *getfsent(void);
struct fstab *getfsfile(const char *);
struct fstab *getfsspec(const char *);
int setfsent(void);
static struct fstab *fstab_convert(struct fstab_state *);
static void fstab_free(void);
static struct fstab_state *fstab_init(int);

File chflags.c:
int chflags(const char *, int);

File fchflags.c:
int fchflags(int, int);

File revoke.c:
int revoke(const char *);

File efgcvt.c:
char *__ecvt(double, int, int *, int *);
char *__fcvt(double, int, int *, int *);
char *__gcvt(double, int, char *);

File efgcvt_r.c:
int __ecvt_r(double, int, int *, int *, char *, size_t);
int __fcvt_r(double, int, int *, int *, char *, size_t);

File efgcvt.c:
char *__qecvt(long double, int, int *, int *);
char *__qfcvt(long double, int, int *, int *);
char *__qgcvt(long double, int, char *);

File efgcvt_r.c:
int __qecvt_r(long double, int, int *, int *, char *, size_t);
int __qfcvt_r(long double, int, int *, int *, char *, size_t);

File init-misc.c:
void __init_misc(int, char **, char **);

File ../sysdeps/unix/sysv/linux/sysctl.c:
int __sysctl(int *, int, void *, size_t *, void *, size_t);

File ../sysdeps/unix/sysv/linux/llseek.c:
loff_t __llseek(int, loff_t, int);

File ../sysdeps/unix/sysv/linux/readahead.c:
ssize_t __readahead(int, off64_t, size_t);

File ../sysdeps/unix/sysv/linux/i386/setfsuid.c:
int setfsuid(uid_t);

File ../sysdeps/unix/sysv/linux/i386/setfsgid.c:
int setfsgid(gid_t);

File ../sysdeps/unix/sysv/linux/makedev.c:
unsigned int gnu_dev_major(long long unsigned int);
long long unsigned int gnu_dev_makedev(unsigned int, unsigned int);
unsigned int gnu_dev_minor(long long unsigned int);

File ../sysdeps/unix/sysv/linux/signalfd.c:
int signalfd(int, const sigset_t *, int);

File ../sysdeps/unix/sysv/linux/eventfd.c:
int eventfd(int, int);

File ../sysdeps/unix/sysv/linux/eventfd_read.c:
int eventfd_read(int, eventfd_t *);

File ../sysdeps/unix/sysv/linux/eventfd_write.c:
int eventfd_write(int, eventfd_t);

File ../sysdeps/posix/isfdtype.c:
int isfdtype(int, int);

File ../sysdeps/unix/sysv/linux/opensock.c:
int __opensock(void);

File ../sysdeps/unix/sockatmark.c:
int sockatmark(int);

File ../sysdeps/unix/sysv/linux/recvmmsg.c:
int recvmmsg(int, struct mmsghdr *, unsigned int, int, const struct timespec *);

File ../sysdeps/unix/sysv/linux/cmsg_nxthdr.c:
struct cmsghdr *__cmsg_nxthdr(struct msghdr *, struct cmsghdr *);

File ../sysdeps/unix/sysv/linux/sa_len.c:
int __libc_sa_len(sa_family_t);

File ftok.c:
key_t ftok(const char *, int);

File ../sysdeps/unix/sysv/linux/msgsnd.c:
int __libc_msgsnd(int, const void *, size_t, int);

File ../sysdeps/unix/sysv/linux/msgrcv.c:
ssize_t __libc_msgrcv(int, void *, size_t, long int, int);

File ../sysdeps/unix/sysv/linux/msgget.c:
int msgget(key_t, int);

File ../sysdeps/unix/sysv/linux/i386/msgctl.c:
int __new_msgctl(int, int, struct msqid_ds *);
int __old_msgctl(int, int, struct __old_msqid_ds *);

File ../sysdeps/unix/sysv/linux/semop.c:
int semop(int, struct sembuf *, size_t);

File ../sysdeps/unix/sysv/linux/semget.c:
int semget(key_t, int, int);

File ../sysdeps/unix/sysv/linux/i386/semctl.c:
int __new_semctl(int, int, int, ...);
int __old_semctl(int, int, int, ...);

File ../sysdeps/unix/sysv/linux/shmat.c:
void *shmat(int, const void *, int);

File ../sysdeps/unix/sysv/linux/shmdt.c:
int shmdt(const void *);

File ../sysdeps/unix/sysv/linux/shmget.c:
int shmget(key_t, size_t, int);

File ../sysdeps/unix/sysv/linux/i386/shmctl.c:
int __new_shmctl(int, int, struct shmid_ds *);
int __old_shmctl(int, int, struct __old_shmid_ds *);

File gmon.c:
void __moncontrol(int);
void __monstartup(u_long, u_long);
void __write_profiling(void);
void _mcleanup(void);
static void write_gmon(void);

File mcount.c:
void __mcount_internal(u_long, u_long);

File ../sysdeps/posix/profil.c:
int __profil(u_short *, size_t, size_t, u_int);

File ../sysdeps/unix/sysv/linux/i386/profil-counter.h:
static void profil_counter(int, const struct sigcontext);

File ../sysdeps/posix/sprofil.c:
int __sprofil(struct prof *, int, struct timeval *, unsigned int);
static int insert(int, long unsigned int, long unsigned int, struct prof *, int);
static long unsigned int pc_to_index(size_t, size_t, unsigned int, int);
static int pcmp(const void *, const void *);
static void profil_count(void *, int);

File ../sysdeps/unix/sysv/linux/i386/profil-counter.h:
static void profil_counter_uint(int, const struct sigcontext);
static void profil_counter_ushort(int, const struct sigcontext);

File ../sysdeps/unix/sysv/linux/prof-freq.c:
int __profile_frequency(void);

File wctrans.c:
wctrans_t __wctrans(const char *);

File towctrans.c:
wint_t __towctrans(wint_t, wctrans_t);

File towctrans_l.c:
wint_t __towctrans_l(wint_t, wctrans_t, __locale_t);

File wcfuncs.c:
int __iswalnum(wint_t);
int __iswalpha(wint_t);
int __iswblank(wint_t);
int __iswcntrl(wint_t);
int __iswdigit(wint_t);
int __iswgraph(wint_t);
int __iswlower(wint_t);
int __iswprint(wint_t);
int __iswpunct(wint_t);
int __iswspace(wint_t);
int __iswupper(wint_t);
int __iswxdigit(wint_t);
wint_t towlower(wint_t);
wint_t towupper(wint_t);

File wctype.c:
wctype_t __wctype(const char *);

File iswctype.c:
int __iswctype(wint_t, wctype_t);

File wcfuncs_l.c:
int __iswalnum_l(wint_t, __locale_t);
int __iswalpha_l(wint_t, __locale_t);
int __iswblank_l(wint_t, __locale_t);
int __iswcntrl_l(wint_t, __locale_t);
int __iswdigit_l(wint_t, __locale_t);
int __iswgraph_l(wint_t, __locale_t);
int __iswlower_l(wint_t, __locale_t);
int __iswprint_l(wint_t, __locale_t);
int __iswpunct_l(wint_t, __locale_t);
int __iswspace_l(wint_t, __locale_t);
int __iswupper_l(wint_t, __locale_t);
int __iswxdigit_l(wint_t, __locale_t);
wint_t __towlower_l(wint_t, __locale_t);
wint_t __towupper_l(wint_t, __locale_t);

File wctype_l.c:
wctype_t __wctype_l(const char *, __locale_t);

File iswctype_l.c:
int __iswctype_l(wint_t, wctype_t, __locale_t);

File wctrans_l.c:
wctrans_t __wctrans_l(const char *, __locale_t);

File ../nss/getXXent.c:
struct spwd *getspent(void);

File ../nss/getXXbyYY.c:
struct spwd *getspnam(const char *);

File sgetspent.c:
struct spwd *sgetspent(const char *);

File fgetspent.c:
struct spwd *fgetspent(FILE *);

File putspent.c:
int putspent(const struct spwd *, FILE *);

File ../nss/getXXent_r.c:
int __getspent_r(struct spwd *, char *, size_t, struct spwd **);
int __old_getspent_r(struct spwd *, char *, size_t, struct spwd **);
void endspent(void);
void setspent(void);

File ../nss/getXXbyYY_r.c:
int __getspnam_r(const char *, struct spwd *, char *, size_t, struct spwd **);
int __old_getspnam_r(const char *, struct spwd *, char *, size_t, struct spwd **);

File sgetspent_r.c:
int __sgetspent_r(const char *, struct spwd *, char *, size_t, struct spwd **);
int _nss_files_parse_spent(char *, struct spwd *, struct parser_data *, size_t, int *);

File fgetspent_r.c:
int __fgetspent_r(FILE *, struct spwd *, char *, size_t, struct spwd **);

File lckpwdf.c:
int __lckpwdf(void);
int __ulckpwdf(void);
static void noop_handler(int);

File ../nss/getXXent.c:
struct sgrp *getsgent(void);

File ../nss/getXXbyYY.c:
struct sgrp *getsgnam(const char *);

File sgetsgent.c:
struct sgrp *sgetsgent(const char *);

File fgetsgent.c:
struct sgrp *fgetsgent(FILE *);

File putsgent.c:
int putsgent(const struct sgrp *, FILE *);

File ../nss/getXXent_r.c:
int __getsgent_r(struct sgrp *, char *, size_t, struct sgrp **);
void endsgent(void);
void setsgent(void);

File ../nss/getXXbyYY_r.c:
int __getsgnam_r(const char *, struct sgrp *, char *, size_t, struct sgrp **);

File sgetsgent_r.c:
int __sgetsgent_r(const char *, struct sgrp *, char *, size_t, struct sgrp **);
int _nss_files_parse_sgent(char *, struct sgrp *, struct parser_data *, size_t, int *);

File fgetsgent_r.c:
int __fgetsgent_r(FILE *, struct sgrp *, char *, size_t, struct sgrp **);

File argp-fmtstream.c:
int __argp_fmtstream_ensure(struct argp_fmtstream *, size_t);
void __argp_fmtstream_free(argp_fmtstream_t);
ssize_t __argp_fmtstream_printf(struct argp_fmtstream *, const char *, ...);
void __argp_fmtstream_update(argp_fmtstream_t);
argp_fmtstream_t __argp_make_fmtstream(FILE *, size_t, size_t, ssize_t);

File argp-fmtstream.h:
size_t __argp_fmtstream_point(argp_fmtstream_t);
int __argp_fmtstream_putc(argp_fmtstream_t, int);
int __argp_fmtstream_puts(argp_fmtstream_t, const char *);
size_t __argp_fmtstream_set_lmargin(argp_fmtstream_t, size_t);
size_t __argp_fmtstream_set_rmargin(argp_fmtstream_t, size_t);
size_t __argp_fmtstream_set_wmargin(argp_fmtstream_t, size_t);
size_t __argp_fmtstream_write(argp_fmtstream_t, const char *, size_t);

File argp-help.c:
void __argp_error(const struct argp_state *, const char *, ...);
void __argp_failure(const struct argp_state *, int, int, const char *, ...);
void __argp_help(const struct argp *, FILE *, unsigned int, char *);
void __argp_state_help(const struct argp_state *, FILE *, unsigned int);
static void _help(const struct argp *, const struct argp_state *, FILE *, unsigned int, char *);
static int add_argless_short_opt(const struct argp_option *, const struct argp_option *, const char *, void *);
static void arg(const struct argp_option *, const char *, const char *, const char *, argp_fmtstream_t);
static size_t argp_args_levels(const struct argp *);
static int argp_args_usage(const struct argp *, const struct argp_state *, char **, int, argp_fmtstream_t);
static int argp_doc(const struct argp *, const struct argp_state *, int, int, int, argp_fmtstream_t);
static struct hol *argp_hol(const struct argp *, struct hol_cluster *);
static int canon_doc_option(const char **);
static void comma(unsigned int, struct pentry_state *);
static const char *filter_doc(const char *, int, const struct argp *, const struct argp_state *);
static int hol_entry_qcmp(const void *, const void *);
static int hol_entry_short_iterate(const struct hol_entry *, int (*)(const struct argp_option *, const struct argp_option *, const char *, void *), const char *, void *);
static void hol_free(struct hol *);
static void hol_set_group(struct hol *, const char *, int);
static void hol_usage(struct hol *, argp_fmtstream_t);
static void indent_to(argp_fmtstream_t, unsigned int);
static void print_header(const char *, const struct argp *, struct pentry_state *);
static void space(argp_fmtstream_t, size_t);
static int until_short(const struct argp_option *, const struct argp_option *, const char *, void *);
static int usage_argful_short_opt(const struct argp_option *, const struct argp_option *, const char *, void *);
static int usage_long_opt(const struct argp_option *, const struct argp_option *, const char *, void *);

File argp-parse.c:
void *__argp_input(const struct argp *, const struct argp_state *);
error_t __argp_parse(const struct argp *, int, char **, unsigned int, int *, void *);
static error_t argp_default_parser(int, char *, struct argp_state *);
static error_t argp_version_parser(int, char *, struct argp_state *);
static void calc_sizes(const struct argp *, struct parser_sizes *);
static struct group *convert_options(const struct argp *, struct group *, unsigned int, struct group *, struct parser_convert_state *);
static error_t group_parse(struct group *, struct argp_state *, int, char *);

File argp.h:
void __argp_usage(const struct argp_state *);
int __option_is_end(const struct argp_option *);
int __option_is_short(const struct argp_option *);

File alloca_cutoff.c:
int __libc_alloca_cutoff(size_t);

File forward.c:
int __pthread_attr_init_2_0(pthread_attr_t *);
int __pthread_attr_init_2_1(pthread_attr_t *);
int __pthread_cond_broadcast(pthread_cond_t *);
int __pthread_cond_broadcast_2_0(pthread_cond_2_0_t *);
int __pthread_cond_destroy(pthread_cond_t *);
int __pthread_cond_destroy_2_0(pthread_cond_2_0_t *);
int __pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
int __pthread_cond_init_2_0(pthread_cond_2_0_t *, const pthread_condattr_t *);
int __pthread_cond_signal(pthread_cond_t *);
int __pthread_cond_signal_2_0(pthread_cond_2_0_t *);
int __pthread_cond_timedwait(pthread_cond_t *, pthread_mutex_t *, const struct timespec *);
int __pthread_cond_timedwait_2_0(pthread_cond_2_0_t *, pthread_mutex_t *, const struct timespec *);
int __pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
int __pthread_cond_wait_2_0(pthread_cond_2_0_t *, pthread_mutex_t *);
void __pthread_exit(void *);
void __pthread_unwind(__pthread_unwind_buf_t *);
int pthread_attr_destroy(pthread_attr_t *);
int pthread_attr_getdetachstate(const pthread_attr_t *, int *);
int pthread_attr_getinheritsched(const pthread_attr_t *, int *);
int pthread_attr_getschedparam(const pthread_attr_t *, struct sched_param *);
int pthread_attr_getschedpolicy(const pthread_attr_t *, int *);
int pthread_attr_getscope(const pthread_attr_t *, int *);
int pthread_attr_setdetachstate(pthread_attr_t *, int);
int pthread_attr_setinheritsched(pthread_attr_t *, int);
int pthread_attr_setschedparam(pthread_attr_t *, const struct sched_param *);
int pthread_attr_setschedpolicy(pthread_attr_t *, int);
int pthread_attr_setscope(pthread_attr_t *, int);
int pthread_condattr_destroy(pthread_condattr_t *);
int pthread_condattr_init(pthread_condattr_t *);
int pthread_equal(pthread_t, pthread_t);
int pthread_getschedparam(pthread_t, int *, struct sched_param *);
int pthread_mutex_destroy(pthread_mutex_t *);
int pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
int pthread_mutex_lock(pthread_mutex_t *);
int pthread_mutex_unlock(pthread_mutex_t *);
pthread_t pthread_self(void);
int pthread_setcancelstate(int, int *);
int pthread_setcanceltype(int, int *);
int pthread_setschedparam(pthread_t, int, const struct sched_param *);

File ../nptl/cancellation.c:
void __libc_disable_asynccancel(int);
int __libc_enable_asynccancel(void);

File libc-cleanup.c:
void __libc_cleanup_routine(struct __pthread_cleanup_frame *);

File ../nptl/sysdeps/unix/sysv/linux/register-atfork.c:
void __linkin_atfork(struct fork_handler *);
int __register_atfork(void (*)(void), void (*)(void), void (*)(void), void *);
static void free_mem(void);

File ../nptl/sysdeps/unix/sysv/linux/unregister-atfork.c:
void __unregister_atfork(void *);

File ../nptl/sysdeps/unix/sysv/linux/libc_pthread_init.c:
void __libc_pthread_init(long unsigned int *, void (*)(void), const struct pthread_functions *);
static void freeres_libptread(void);

File herror.c:
void herror(const char *);
const char *hstrerror(int);

File inet_addr.c:
int __inet_aton(const char *, struct in_addr *);
in_addr_t inet_addr(const char *);

File inet_ntop.c:
const char *inet_ntop(int, const void *, char *, socklen_t);
static const char *inet_ntop4(const u_char *, char *, socklen_t);

File inet_pton.c:
int inet_pton(int, const char *, void *);
static int inet_pton4(const char *, u_char *);

File nsap_addr.c:
u_int inet_nsap_addr(const char *, u_char *, int);
char *inet_nsap_ntoa(int, const u_char *, char *);

File res_init.c:
void __res_iclose(res_state, _Bool);
void __res_nclose(res_state);
int __res_ninit(res_state);
u_int __res_randomid(void);
int __res_vinit(res_state, int);
static void res_setoptions(res_state, const char *, const char *);
static void res_thread_freeres(void);

File res_hconf.c:
void _res_hconf_init(void);
void _res_hconf_reorder_addrs(struct hostent *);
void _res_hconf_trim_domain(char *);
void _res_hconf_trim_domains(struct hostent *);
static const char *arg_bool(const char *, int, const char *, unsigned int);
static const char *arg_spoof(const char *, int, const char *);
static const char *arg_trimdomain_list(const char *, int, const char *);
static void do_init(void);

File res_libc.c:
int __res_init(void);
int __res_maybe_init(res_state, int);

File res-state.c:
struct __res_state *__res_state(void);

File ../sysdeps/unix/sysv/linux/gai_sigqueue.c:
int __gai_sigqueue(int, const union sigval, pid_t);

File nsswitch.c:
int __nss_configure_lookup(const char *, const char *);
int __nss_database_lookup(const char *, const char *, const char *, service_user **);
void __nss_disable_nscd(void);
int __nss_lookup(service_user **, const char *, const char *, void **);
void *__nss_lookup_function(service_user *, const char *);
int __nss_next(service_user **, const char *, void **, int, int);
int __nss_next2(service_user **, const char *, const char *, void **, int, int);
static void free_mem(void);
static int known_compare(const void *, const void *);
static service_user *nss_parse_service_list(const char *);

File getnssent.c:
void *__nss_getent(getent_r_function, void **, char **, size_t, size_t *, int *);

File getnssent_r.c:
void __nss_endent(const char *, db_lookup_function, service_user **, service_user **, service_user **, int);
int __nss_getent_r(const char *, const char *, db_lookup_function, service_user **, service_user **, service_user **, int *, int, void *, char *, size_t, void **, int *);
void __nss_setent(const char *, db_lookup_function, service_user **, service_user **, service_user **, int, int *, int);
static int setup(const char *, db_lookup_function, void **, service_user **, service_user **, int);

File XXX-lookup.c:
int __nss_group_lookup(service_user **, const char *, void **);
int __nss_group_lookup2(service_user **, const char *, const char *, void **);
int __nss_passwd_lookup(service_user **, const char *, void **);
int __nss_passwd_lookup2(service_user **, const char *, const char *, void **);
int __nss_shadow_lookup(service_user **, const char *, void **);
int __nss_shadow_lookup2(service_user **, const char *, const char *, void **);
int __nss_gshadow_lookup(service_user **, const char *, void **);
int __nss_gshadow_lookup2(service_user **, const char *, const char *, void **);
int __nss_protocols_lookup(service_user **, const char *, void **);
int __nss_protocols_lookup2(service_user **, const char *, const char *, void **);
int __nss_services_lookup2(service_user **, const char *, const char *, void **);
int __nss_hosts_lookup(service_user **, const char *, void **);
int __nss_hosts_lookup2(service_user **, const char *, const char *, void **);
int __nss_networks_lookup(service_user **, const char *, void **);
int __nss_networks_lookup2(service_user **, const char *, const char *, void **);
int __nss_rpc_lookup(service_user **, const char *, void **);
int __nss_rpc_lookup2(service_user **, const char *, const char *, void **);
int __nss_ethers_lookup(service_user **, const char *, void **);
int __nss_ethers_lookup2(service_user **, const char *, const char *, void **);
int __nss_netgroup_lookup(service_user **, const char *, void **);
int __nss_netgroup_lookup2(service_user **, const char *, const char *, void **);
int __nss_publickey_lookup(service_user **, const char *, void **);
int __nss_publickey_lookup2(service_user **, const char *, const char *, void **);
int __nss_aliases_lookup(service_user **, const char *, void **);
int __nss_aliases_lookup2(service_user **, const char *, const char *, void **);

File digits_dots.c:
int __nss_hostname_digits_dots(const char *, struct hostent *, char **, size_t *, size_t, struct hostent **, enum nss_status *, int, int *);

File noophooks.c:
void __cyg_profile_func_enter(void *, void *);

File stpcpy_chk.c:
char *__stpcpy_chk(char *, const char *, size_t);

File strcat_chk.c:
char *__strcat_chk(char *, const char *, size_t);

File strcpy_chk.c:
char *__strcpy_chk(char *, const char *, size_t);

File strncat_chk.c:
char *__strncat_chk(char *, const char *, size_t, size_t);

File strncpy_chk.c:
char *__strncpy_chk(char *, const char *, size_t, size_t);

File stpncpy_chk.c:
char *__stpncpy_chk(char *, const char *, size_t, size_t);

File sprintf_chk.c:
int ___sprintf_chk(char *, int, size_t, const char *, ...);

File vsprintf_chk.c:
int ___vsprintf_chk(char *, int, size_t, const char *, va_list);
static int _IO_str_chk_overflow(_IO_FILE *, int);

File snprintf_chk.c:
int ___snprintf_chk(char *, size_t, int, size_t, const char *, ...);

File vsnprintf_chk.c:
int ___vsnprintf_chk(char *, size_t, int, size_t, const char *, va_list);

File printf_chk.c:
int ___printf_chk(int, const char *, ...);

File fprintf_chk.c:
int ___fprintf_chk(FILE *, int, const char *, ...);

File vprintf_chk.c:
int ___vprintf_chk(int, const char *, va_list);

File vfprintf_chk.c:
int ___vfprintf_chk(FILE *, int, const char *, va_list);

File gets_chk.c:
char *__gets_chk(char *, size_t);

File chk_fail.c:
void __chk_fail(void);

File ../sysdeps/unix/sysv/linux/readonly-area.c:
int __readonly_area(const char *, size_t);

File fgets_chk.c:
char *__fgets_chk(char *, size_t, int, _IO_FILE *);

File fgets_u_chk.c:
char *__fgets_unlocked_chk(char *, size_t, int, _IO_FILE *);

File read_chk.c:
ssize_t __read_chk(int, void *, size_t, size_t);

File pread_chk.c:
ssize_t __pread_chk(int, void *, size_t, off_t, size_t);

File pread64_chk.c:
ssize_t __pread64_chk(int, void *, size_t, off64_t, size_t);

File recv_chk.c:
ssize_t __recv_chk(int, void *, size_t, size_t, int);

File recvfrom_chk.c:
ssize_t __recvfrom_chk(int, void *, size_t, size_t, int, __SOCKADDR_ARG, socklen_t *);

File readlink_chk.c:
ssize_t __readlink_chk(const char *, void *, size_t, size_t);

File readlinkat_chk.c:
ssize_t __readlinkat_chk(int, const char *, void *, size_t, size_t);

File getwd_chk.c:
char *__getwd_chk(char *, size_t);

File getcwd_chk.c:
char *__getcwd_chk(char *, size_t, size_t);

File realpath_chk.c:
char *__realpath_chk(const char *, char *, size_t);

File ptsname_r_chk.c:
int __ptsname_r_chk(int, char *, size_t, size_t);

File fread_chk.c:
size_t __fread_chk(void *, size_t, size_t, size_t, FILE *);

File fread_u_chk.c:
size_t __fread_unlocked_chk(void *, size_t, size_t, size_t, FILE *);

File confstr_chk.c:
size_t __confstr_chk(int, char *, size_t, size_t);

File getgroups_chk.c:
int __getgroups_chk(int, __gid_t *, size_t);

File ttyname_r_chk.c:
int __ttyname_r_chk(int, char *, size_t, size_t);

File gethostname_chk.c:
int __gethostname_chk(char *, size_t, size_t);

File getdomainname_chk.c:
int __getdomainname_chk(char *, size_t, size_t);

File asprintf_chk.c:
int __asprintf_chk(char **, int, const char *, ...);

File vasprintf_chk.c:
int __vasprintf_chk(char **, int, const char *, va_list);

File dprintf_chk.c:
int __dprintf_chk(int, int, const char *, ...);

File vdprintf_chk.c:
int __vdprintf_chk(int, int, const char *, va_list);

File obprintf_chk.c:
int __obstack_printf_chk(struct obstack *, int, const char *, ...);
int __obstack_vprintf_chk(struct obstack *, int, const char *, va_list);

File ../setjmp/longjmp.c:
void __longjmp_chk(struct __jmp_buf_tag *, int);

File stack_chk_fail.c:
void __stack_chk_fail(void);

File fortify_fail.c:
void __fortify_fail(const char *);

File getlogin_r_chk.c:
int __getlogin_r_chk(char *, size_t, size_t);

File ../sysdeps/i386/backtrace.c:
int __backtrace(void **, int);
static _Unwind_Reason_Code backtrace_helper(struct _Unwind_Context *, void *);
static void free_mem(void);
static void init(void);

File ../sysdeps/generic/elf/backtracesyms.c:
char **__backtrace_symbols(void * const *, int);

File ../sysdeps/generic/elf/backtracesymsfd.c:
void __backtrace_symbols_fd(void * const *, int, int);

File wprintf_chk.c:
int __wprintf_chk(int, const wchar_t *, ...);

File fwprintf_chk.c:
int __fwprintf_chk(FILE *, int, const wchar_t *, ...);

File vwprintf_chk.c:
int __vwprintf_chk(int, const wchar_t *, va_list);

File vfwprintf_chk.c:
int __vfwprintf_chk(FILE *, int, const wchar_t *, va_list);

File fgetws_chk.c:
wchar_t *__fgetws_chk(wchar_t *, size_t, int, _IO_FILE *);

File fgetws_u_chk.c:
wchar_t *__fgetws_unlocked_chk(wchar_t *, size_t, int, _IO_FILE *);

File wctomb_chk.c:
int __wctomb_chk(char *, wchar_t, size_t);

File wcscpy_chk.c:
wchar_t *__wcscpy_chk(wchar_t *, const wchar_t *, size_t);

File wmemcpy_chk.c:
wchar_t *__wmemcpy_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wmemmove_chk.c:
wchar_t *__wmemmove_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wmempcpy_chk.c:
wchar_t *__wmempcpy_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wcpcpy_chk.c:
wchar_t *__wcpcpy_chk(wchar_t *, const wchar_t *, size_t);

File wcsncpy_chk.c:
wchar_t *__wcsncpy_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wcscat_chk.c:
wchar_t *__wcscat_chk(wchar_t *, const wchar_t *, size_t);

File wcsncat_chk.c:
wchar_t *__wcsncat_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wmemset_chk.c:
wchar_t *__wmemset_chk(wchar_t *, wchar_t, size_t, size_t);

File wcpncpy_chk.c:
wchar_t *__wcpncpy_chk(wchar_t *, const wchar_t *, size_t, size_t);

File swprintf_chk.c:
int __swprintf_chk(wchar_t *, size_t, int, size_t, const wchar_t *, ...);

File vswprintf_chk.c:
int __vswprintf_chk(wchar_t *, size_t, int, size_t, const wchar_t *, va_list);

File wcrtomb_chk.c:
size_t __wcrtomb_chk(char *, wchar_t, mbstate_t *, size_t);

File mbsnrtowcs_chk.c:
size_t __mbsnrtowcs_chk(wchar_t *, const char **, size_t, size_t, mbstate_t *, size_t);

File wcsnrtombs_chk.c:
size_t __wcsnrtombs_chk(char *, const wchar_t **, size_t, size_t, mbstate_t *, size_t);

File mbsrtowcs_chk.c:
size_t __mbsrtowcs_chk(wchar_t *, const char **, size_t, mbstate_t *, size_t);

File wcsrtombs_chk.c:
size_t __wcsrtombs_chk(char *, const wchar_t **, size_t, mbstate_t *, size_t);

File mbstowcs_chk.c:
size_t __mbstowcs_chk(wchar_t *, const char *, size_t, size_t);

File wcstombs_chk.c:
size_t __wcstombs_chk(char *, const wchar_t *, size_t, size_t);

File idn-stub.c:
int __idna_to_ascii_lz(const char *, char **, int);
int __idna_to_unicode_lzlz(const char *, char **, int);
static void load_dso(void);
static void unload_libidn(void);

File inet_lnaof.c:
in_addr_t inet_lnaof(struct in_addr);

File inet_mkadr.c:
struct in_addr inet_makeaddr(in_addr_t, in_addr_t);

File inet_netof.c:
in_addr_t inet_netof(struct in_addr);

File inet_ntoa.c:
char *inet_ntoa(struct in_addr);

File inet_net.c:
in_addr_t inet_network(const char *);

File herrno-loc.c:
int *__h_errno_location(void);

File ../nss/getXXbyYY.c:
struct hostent *gethostbyaddr(const void *, socklen_t, int);

File ../nss/getXXbyYY_r.c:
int __gethostbyaddr_r(const void *, socklen_t, int, struct hostent *, char *, size_t, struct hostent **, int *);
int __old_gethostbyaddr_r(const void *, socklen_t, int, struct hostent *, char *, size_t, struct hostent **, int *);

File ../nss/getXXbyYY.c:
struct hostent *gethostbyname(const char *);
struct hostent *gethostbyname2(const char *, int);

File ../nss/getXXbyYY_r.c:
int __gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, struct hostent **, int *);
int __old_gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, struct hostent **, int *);
int __gethostbyname_r(const char *, struct hostent *, char *, size_t, struct hostent **, int *);
int __old_gethostbyname_r(const char *, struct hostent *, char *, size_t, struct hostent **, int *);

File ../nss/getXXent.c:
struct hostent *gethostent(void);

File ../nss/getXXent_r.c:
int __gethostent_r(struct hostent *, char *, size_t, struct hostent **, int *);
int __old_gethostent_r(struct hostent *, char *, size_t, struct hostent **, int *);
void endhostent(void);
void sethostent(int);

File ../nss/getXXbyYY.c:
struct netent *getnetbyaddr(uint32_t, int);

File ../nss/getXXbyYY_r.c:
int __getnetbyaddr_r(uint32_t, int, struct netent *, char *, size_t, struct netent **, int *);
int __old_getnetbyaddr_r(uint32_t, int, struct netent *, char *, size_t, struct netent **, int *);

File ../nss/getXXbyYY.c:
struct netent *getnetbyname(const char *);

File ../nss/getXXent.c:
struct netent *getnetent(void);

File ../nss/getXXent_r.c:
int __getnetent_r(struct netent *, char *, size_t, struct netent **, int *);
int __old_getnetent_r(struct netent *, char *, size_t, struct netent **, int *);
void endnetent(void);
void setnetent(int);

File ../nss/getXXbyYY_r.c:
int __getnetbyname_r(const char *, struct netent *, char *, size_t, struct netent **, int *);
int __old_getnetbyname_r(const char *, struct netent *, char *, size_t, struct netent **, int *);

File ../nss/getXXbyYY.c:
struct protoent *getprotobynumber(int);

File ../nss/getXXbyYY_r.c:
int __getprotobynumber_r(int, struct protoent *, char *, size_t, struct protoent **);
int __old_getprotobynumber_r(int, struct protoent *, char *, size_t, struct protoent **);

File ../nss/getXXent.c:
struct protoent *getprotoent(void);

File ../nss/getXXent_r.c:
int __getprotoent_r(struct protoent *, char *, size_t, struct protoent **);
int __old_getprotoent_r(struct protoent *, char *, size_t, struct protoent **);
void endprotoent(void);
void setprotoent(int);

File ../nss/getXXbyYY.c:
struct protoent *getprotobyname(const char *);

File ../nss/getXXbyYY_r.c:
int __getprotobyname_r(const char *, struct protoent *, char *, size_t, struct protoent **);
int __old_getprotobyname_r(const char *, struct protoent *, char *, size_t, struct protoent **);

File ../nss/getXXbyYY.c:
struct servent *getservbyname(const char *, const char *);

File ../nss/getXXbyYY_r.c:
int __getservbyname_r(const char *, const char *, struct servent *, char *, size_t, struct servent **);
int __old_getservbyname_r(const char *, const char *, struct servent *, char *, size_t, struct servent **);

File ../nss/getXXbyYY.c:
struct servent *getservbyport(int, const char *);

File ../nss/getXXbyYY_r.c:
int __getservbyport_r(int, const char *, struct servent *, char *, size_t, struct servent **);
int __old_getservbyport_r(int, const char *, struct servent *, char *, size_t, struct servent **);

File ../nss/getXXent.c:
struct servent *getservent(void);

File ../nss/getXXent_r.c:
int __getservent_r(struct servent *, char *, size_t, struct servent **);
int __old_getservent_r(struct servent *, char *, size_t, struct servent **);
void endservent(void);
void setservent(int);

File ../nss/getXXent.c:
struct rpcent *getrpcent(void);

File ../nss/getXXbyYY.c:
struct rpcent *getrpcbyname(const char *);
struct rpcent *getrpcbynumber(int);

File ../nss/getXXent_r.c:
int __getrpcent_r(struct rpcent *, char *, size_t, struct rpcent **);
int __old_getrpcent_r(struct rpcent *, char *, size_t, struct rpcent **);
void endrpcent(void);
void setrpcent(int);

File ../nss/getXXbyYY_r.c:
int __getrpcbyname_r(const char *, struct rpcent *, char *, size_t, struct rpcent **);
int __old_getrpcbyname_r(const char *, struct rpcent *, char *, size_t, struct rpcent **);
int __getrpcbynumber_r(int, struct rpcent *, char *, size_t, struct rpcent **);
int __old_getrpcbynumber_r(int, struct rpcent *, char *, size_t, struct rpcent **);

File ether_aton.c:
struct ether_addr *ether_aton(const char *);

File ether_aton_r.c:
struct ether_addr *ether_aton_r(const char *, struct ether_addr *);

File ether_hton.c:
int ether_hostton(const char *, struct ether_addr *);

File ether_line.c:
int ether_line(const char *, struct ether_addr *, char *);

File ether_ntoa.c:
char *ether_ntoa(const struct ether_addr *);

File ether_ntoa_r.c:
char *ether_ntoa_r(const struct ether_addr *, char *);

File ether_ntoh.c:
int ether_ntohost(char *, const struct ether_addr *);

File getnetgrent_r.c:
int __getnetgrent_r(char **, char **, char **, char *, size_t);
void endnetgrent(void);
int innetgr(const char *, const char *, const char *, const char *);
void internal_endnetgrent(struct __netgrent *);
int internal_getnetgrent_r(char **, char **, char **, struct __netgrent *, char *, size_t, int *);
int internal_setnetgrent(const char *, struct __netgrent *);
int setnetgrent(const char *);
static int __internal_setnetgrent_reuse(const char *, struct __netgrent *, int *);
static void endnetgrent_hook(struct __netgrent *);
static void free_memory(struct __netgrent *);
static int setup(void **, service_user **);

File getnetgrent.c:
int getnetgrent(char **, char **, char **);
static void allocate(void);

File getnameinfo.c:
int getnameinfo(const struct sockaddr *, socklen_t, char *, socklen_t, char *, socklen_t, unsigned int);
static char *nrl_domainname(void);

File ../sysdeps/unix/sysv/linux/if_index.c:
void if_freenameindex(struct if_nameindex *);
char *if_indextoname(unsigned int, char *);
struct if_nameindex *if_nameindex(void);
unsigned int if_nametoindex(const char *);

File ../sysdeps/unix/sysv/linux/ifaddrs.c:
void __netlink_close(struct netlink_handle *);
void __netlink_free_handle(struct netlink_handle *);
int __netlink_open(struct netlink_handle *);
int __netlink_request(struct netlink_handle *, int);
void freeifaddrs(struct ifaddrs *);
int getifaddrs(struct ifaddrs **);
static int getifaddrs_internal(struct ifaddrs **);

File ../sysdeps/unix/sysv/linux/getipv4sourcefilter.c:
int getipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t *, uint32_t *, struct in_addr *);

File ../sysdeps/unix/sysv/linux/setipv4sourcefilter.c:
int setipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t, uint32_t, const struct in_addr *);

File ../sysdeps/unix/sysv/linux/getsourcefilter.c:
int __get_sol(int, socklen_t);
int getsourcefilter(int, uint32_t, const struct sockaddr *, socklen_t, uint32_t *, uint32_t *, struct sockaddr_storage *);

File ../sysdeps/unix/sysv/linux/setsourcefilter.c:
int setsourcefilter(int, uint32_t, const struct sockaddr *, socklen_t, uint32_t, uint32_t, const struct sockaddr_storage *);

File rcmd.c:
int __ivaliduser(FILE *, u_int32_t, const char *, const char *);
int iruserok(u_int32_t, int, const char *, const char *);
int iruserok_af(const void *, int, const char *, const char *, sa_family_t);
int rcmd(char **, u_short, const char *, const char *, const char *, int *);
int rcmd_af(char **, u_short, const char *, const char *, const char *, int *, sa_family_t);
int rresvport(int *);
int rresvport_af(int *, sa_family_t);
int ruserok(const char *, int, const char *, const char *);
int ruserok_af(const char *, int, const char *, const char *, sa_family_t);
static int __validuser2_sa(FILE *, struct sockaddr *, size_t, const char *, const char *, const char *);
static FILE *iruserfopen(const char *, uid_t);
static int ruserok2_sa(struct sockaddr *, size_t, int, const char *, const char *, const char *);

File rexec.c:
int rexec(char **, int, const char *, const char *, const char *, int *);
int rexec_af(char **, int, const char *, const char *, const char *, int *, sa_family_t);

File ruserpass.c:
int ruserpass(const char *, const char **, const char **);
static int token(void);

File ../nss/getXXent_r.c:
int __getaliasent_r(struct aliasent *, char *, size_t, struct aliasent **);
int __old_getaliasent_r(struct aliasent *, char *, size_t, struct aliasent **);
void endaliasent(void);
void setaliasent(void);

File ../nss/getXXent.c:
struct aliasent *getaliasent(void);

File ../nss/getXXbyYY.c:
struct aliasent *getaliasbyname(const char *);

File ../nss/getXXbyYY_r.c:
int __getaliasbyname_r(const char *, struct aliasent *, char *, size_t, struct aliasent **);
int __old_getaliasbyname_r(const char *, struct aliasent *, char *, size_t, struct aliasent **);

File inet6_option.c:
uint8_t *inet6_option_alloc(struct cmsghdr *, int, int, int);
int inet6_option_append(struct cmsghdr *, const uint8_t *, int, int);
int inet6_option_find(const struct cmsghdr *, uint8_t **, int);
int inet6_option_init(void *, struct cmsghdr **, int);
int inet6_option_next(const struct cmsghdr *, uint8_t **);
int inet6_option_space(int);
static void add_pad(struct cmsghdr *, int);
static uint8_t *option_alloc(struct cmsghdr *, int, int, int);

File inet6_opt.c:
int inet6_opt_append(void *, socklen_t, int, uint8_t, socklen_t, uint8_t, void **);
int inet6_opt_find(void *, socklen_t, int, uint8_t, socklen_t *, void **);
int inet6_opt_finish(void *, socklen_t, int);
int inet6_opt_get_val(void *, int, void *, socklen_t);
int inet6_opt_init(void *, socklen_t);
int inet6_opt_next(void *, socklen_t, int, uint8_t *, socklen_t *, void **);
int inet6_opt_set_val(void *, int, void *, socklen_t);

File inet6_rth.c:
int inet6_rth_add(void *, const struct in6_addr *);
struct in6_addr *inet6_rth_getaddr(const void *, int);
void *inet6_rth_init(void *, socklen_t, int, int);
int inet6_rth_reverse(const void *, void *);
int inet6_rth_segments(const void *);
socklen_t inet6_rth_space(int, int);

File ../sysdeps/unix/sysv/linux/check_pf.c:
void __check_pf(_Bool *, _Bool *, struct in6addrinfo **, size_t *);
static int make_request(int, pid_t, _Bool *, _Bool *, struct in6addrinfo **, size_t *);

File ../sysdeps/unix/sysv/linux/check_native.c:
void __check_native(uint32_t, int *, uint32_t, int *);

File ../sysdeps/unix/sysv/linux/ifreq.c:
void __ifreq(struct ifreq **, int *, int);

File auth_none.c:
AUTH *authnone_create(void);
static void authnone_create_once(void);
static void authnone_destroy(AUTH *);
static bool_t authnone_marshal(AUTH *, XDR *);
static bool_t authnone_refresh(AUTH *);
static bool_t authnone_validate(AUTH *, struct opaque_auth *);
static void authnone_verf(AUTH *);

File auth_unix.c:
AUTH *authunix_create(char *, uid_t, gid_t, int, gid_t *);
AUTH *authunix_create_default(void);
static void authunix_destroy(AUTH *);
static bool_t authunix_marshal(AUTH *, XDR *);
static void authunix_nextverf(AUTH *);
static bool_t authunix_refresh(AUTH *);
static bool_t authunix_validate(AUTH *, struct opaque_auth *);
static bool_t marshal_new_auth(AUTH *);

File authuxprot.c:
bool_t xdr_authunix_parms(XDR *, struct authunix_parms *);

File bindrsvprt.c:
int bindresvport(int, struct sockaddr_in *);

File clnt_gen.c:
CLIENT *clnt_create(const char *, u_long, u_long, const char *);

File clnt_perr.c:
void clnt_pcreateerror(const char *);
void clnt_perrno(enum clnt_stat);
void clnt_perror(CLIENT *, const char *);
char *clnt_spcreateerror(const char *);
char *clnt_sperrno(enum clnt_stat);
char *clnt_sperror(CLIENT *, const char *);
static void free_mem(void);

File clnt_raw.c:
CLIENT *clntraw_create(u_long, u_long);
static void clntraw_abort(void);
static enum clnt_stat clntraw_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
static bool_t clntraw_control(CLIENT *, int, char *);
static void clntraw_destroy(CLIENT *);
static bool_t clntraw_freeres(CLIENT *, xdrproc_t, caddr_t);
static void clntraw_geterr(CLIENT *, struct rpc_err *);

File clnt_simp.c:
void __rpc_thread_clnt_cleanup(void);
int callrpc(const char *, u_long, u_long, u_long, xdrproc_t, const char *, xdrproc_t, char *);

File clnt_tcp.c:
CLIENT *clnttcp_create(struct sockaddr_in *, u_long, u_long, int *, u_int, u_int);
static void clnttcp_abort(void);
static enum clnt_stat clnttcp_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
static bool_t clnttcp_control(CLIENT *, int, char *);
static void clnttcp_destroy(CLIENT *);
static bool_t clnttcp_freeres(CLIENT *, xdrproc_t, caddr_t);
static void clnttcp_geterr(CLIENT *, struct rpc_err *);
static int readtcp(char *, char *, int);
static int writetcp(char *, char *, int);

File clnt_udp.c:
CLIENT *__libc_clntudp_bufcreate(struct sockaddr_in *, u_long, u_long, struct timeval, int *, u_int, u_int, int);
CLIENT *clntudp_bufcreate(struct sockaddr_in *, u_long, u_long, struct timeval, int *, u_int, u_int);
CLIENT *clntudp_create(struct sockaddr_in *, u_long, u_long, struct timeval, int *);
static void clntudp_abort(void);
static enum clnt_stat clntudp_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
static bool_t clntudp_control(CLIENT *, int, char *);
static void clntudp_destroy(CLIENT *);
static bool_t clntudp_freeres(CLIENT *, xdrproc_t, caddr_t);
static void clntudp_geterr(CLIENT *, struct rpc_err *);

File rpc_dtable.c:
int _rpc_dtablesize(void);

File get_myaddr.c:
void get_myaddress(struct sockaddr_in *);

File getrpcport.c:
int getrpcport(const char *, u_long, u_long, u_int);

File pmap_clnt.c:
bool_t pmap_set(u_long, u_long, int, u_short);
bool_t pmap_unset(u_long, u_long);
static bool_t __get_myaddress(struct sockaddr_in *);

File pm_getmaps.c:
struct pmaplist *pmap_getmaps(struct sockaddr_in *);

File pm_getport.c:
int __get_socket(struct sockaddr_in *);
u_short pmap_getport(struct sockaddr_in *, u_long, u_long, u_int);

File pmap_prot.c:
bool_t xdr_pmap(XDR *, struct pmap *);

File pmap_prot2.c:
bool_t xdr_pmaplist(XDR *, struct pmaplist **);

File pmap_rmt.c:
enum clnt_stat clnt_broadcast(u_long, u_long, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, resultproc_t);
enum clnt_stat pmap_rmtcall(struct sockaddr_in *, u_long, u_long, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval, u_long *);
bool_t xdr_rmtcall_args(XDR *, struct rmtcallargs *);
bool_t xdr_rmtcallres(XDR *, struct rmtcallres *);

File rpc_prot.c:
void _seterr_reply(struct rpc_msg *, struct rpc_err *);
bool_t xdr_accepted_reply(XDR *, struct accepted_reply *);
bool_t xdr_callhdr(XDR *, struct rpc_msg *);
bool_t xdr_des_block(XDR *, des_block *);
bool_t xdr_opaque_auth(XDR *, struct opaque_auth *);
bool_t xdr_rejected_reply(XDR *, struct rejected_reply *);
bool_t xdr_replymsg(XDR *, struct rpc_msg *);

File rpc_cmsg.c:
bool_t xdr_callmsg(XDR *, struct rpc_msg *);

File rpc_thread.c:
struct rpc_createerr *__rpc_thread_createerr(void);
void __rpc_thread_destroy(void);
fd_set *__rpc_thread_svc_fdset(void);
int *__rpc_thread_svc_max_pollfd(void);
struct pollfd **__rpc_thread_svc_pollfd(void);
struct rpc_thread_variables *__rpc_thread_variables(void);
static void rpc_thread_multi(void);

File svc.c:
void __rpc_thread_svc_cleanup(void);
void svc_getreq(int);
void svc_getreq_common(const int);
void svc_getreq_poll(struct pollfd *, int);
void svc_getreqset(fd_set *);
bool_t svc_register(SVCXPRT *, rpcprog_t, rpcvers_t, void (*)(struct svc_req *, SVCXPRT *), rpcproc_t);
bool_t svc_sendreply(SVCXPRT *, xdrproc_t, caddr_t);
void svc_unregister(rpcprog_t, rpcvers_t);
void svcerr_auth(SVCXPRT *, enum auth_stat);
void svcerr_decode(SVCXPRT *);
void svcerr_noproc(SVCXPRT *);
void svcerr_noprog(SVCXPRT *);
void svcerr_progvers(SVCXPRT *, rpcvers_t, rpcvers_t);
void svcerr_systemerr(SVCXPRT *);
void svcerr_weakauth(SVCXPRT *);
void xprt_register(SVCXPRT *);
void xprt_unregister(SVCXPRT *);

File svc_auth.c:
enum auth_stat _authenticate(struct svc_req *, struct rpc_msg *);
static enum auth_stat _svcauth_null(struct svc_req *, struct rpc_msg *);

File svc_authux.c:
enum auth_stat _svcauth_short(struct svc_req *, struct rpc_msg *);
enum auth_stat _svcauth_unix(struct svc_req *, struct rpc_msg *);

File svc_raw.c:
SVCXPRT *svcraw_create(void);
static void svcraw_destroy(SVCXPRT *);
static bool_t svcraw_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcraw_getargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcraw_recv(SVCXPRT *, struct rpc_msg *);
static bool_t svcraw_reply(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat svcraw_stat(SVCXPRT *);

File svc_run.c:
void svc_exit(void);
void svc_run(void);

File svc_simple.c:
int registerrpc(u_long, u_long, u_long, char *(*)(char *), xdrproc_t, xdrproc_t);
static void universal(struct svc_req *, SVCXPRT *);

File svc_tcp.c:
SVCXPRT *svcfd_create(int, u_int, u_int);
SVCXPRT *svctcp_create(int, u_int, u_int);
static SVCXPRT *makefd_xprt(int, u_int, u_int);
static int readtcp(char *, char *, int);
static bool_t rendezvous_request(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat rendezvous_stat(SVCXPRT *);
static void svctcp_destroy(SVCXPRT *);
static bool_t svctcp_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svctcp_getargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svctcp_recv(SVCXPRT *, struct rpc_msg *);
static void svctcp_rendezvous_abort(void);
static bool_t svctcp_reply(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat svctcp_stat(SVCXPRT *);
static int writetcp(char *, char *, int);

File svc_udp.c:
SVCXPRT *svcudp_bufcreate(int, u_int, u_int);
SVCXPRT *svcudp_create(int);
int svcudp_enablecache(SVCXPRT *, u_long);
static void svcudp_destroy(SVCXPRT *);
static bool_t svcudp_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcudp_getargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcudp_recv(SVCXPRT *, struct rpc_msg *);
static bool_t svcudp_reply(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat svcudp_stat(SVCXPRT *);

File xdr.c:
bool_t xdr_bool(XDR *, bool_t *);
bool_t xdr_bytes(XDR *, char **, u_int *, u_int);
bool_t xdr_char(XDR *, char *);
bool_t xdr_enum(XDR *, enum_t *);
void xdr_free(xdrproc_t, char *);
bool_t xdr_hyper(XDR *, quad_t *);
bool_t xdr_int(XDR *, int *);
bool_t xdr_long(XDR *, long int *);
bool_t xdr_longlong_t(XDR *, quad_t *);
bool_t xdr_netobj(XDR *, struct netobj *);
bool_t xdr_opaque(XDR *, caddr_t, u_int);
bool_t xdr_short(XDR *, short int *);
bool_t xdr_string(XDR *, char **, u_int);
bool_t xdr_u_char(XDR *, u_char *);
bool_t xdr_u_hyper(XDR *, u_quad_t *);
bool_t xdr_u_int(XDR *, u_int *);
bool_t xdr_u_long(XDR *, u_long *);
bool_t xdr_u_longlong_t(XDR *, u_quad_t *);
bool_t xdr_u_short(XDR *, u_short *);
bool_t xdr_union(XDR *, enum_t *, char *, const struct xdr_discrim *, xdrproc_t);
bool_t xdr_void(void);
bool_t xdr_wrapstring(XDR *, char **);

File xdr_array.c:
bool_t xdr_array(XDR *, caddr_t *, u_int *, u_int, u_int, xdrproc_t);
bool_t xdr_vector(XDR *, char *, u_int, u_int, xdrproc_t);

File xdr_float.c:
bool_t xdr_double(XDR *, double *);
bool_t xdr_float(XDR *, float *);

File xdr_mem.c:
void xdrmem_create(XDR *, const caddr_t, u_int, enum xdr_op);
static void xdrmem_destroy(XDR *);
static bool_t xdrmem_getbytes(XDR *, caddr_t, u_int);
static bool_t xdrmem_getint32(XDR *, int32_t *);
static bool_t xdrmem_getlong(XDR *, long int *);
static u_int xdrmem_getpos(const XDR *);
static int32_t *xdrmem_inline(XDR *, u_int);
static bool_t xdrmem_putbytes(XDR *, const char *, u_int);
static bool_t xdrmem_putint32(XDR *, const int32_t *);
static bool_t xdrmem_putlong(XDR *, const long int *);
static bool_t xdrmem_setpos(XDR *, u_int);

File xdr_rec.c:
void xdrrec_create(XDR *, u_int, u_int, caddr_t, int (*)(char *, char *, int), int (*)(char *, char *, int));
bool_t xdrrec_endofrecord(XDR *, bool_t);
bool_t xdrrec_eof(XDR *);
bool_t xdrrec_skiprecord(XDR *);
static bool_t flush_out(RECSTREAM *, bool_t);
static bool_t get_input_bytes(RECSTREAM *, caddr_t, int);
static bool_t set_input_fragment(RECSTREAM *);
static bool_t skip_input_bytes(RECSTREAM *, long int);
static void xdrrec_destroy(XDR *);
static bool_t xdrrec_getbytes(XDR *, caddr_t, u_int);
static bool_t xdrrec_getint32(XDR *, int32_t *);
static bool_t xdrrec_getlong(XDR *, long int *);
static u_int xdrrec_getpos(const XDR *);
static int32_t *xdrrec_inline(XDR *, u_int);
static bool_t xdrrec_putbytes(XDR *, const char *, u_int);
static bool_t xdrrec_putint32(XDR *, const int32_t *);
static bool_t xdrrec_putlong(XDR *, const long int *);
static bool_t xdrrec_setpos(XDR *, u_int);

File xdr_ref.c:
bool_t xdr_pointer(XDR *, char **, u_int, xdrproc_t);
bool_t xdr_reference(XDR *, caddr_t *, u_int, xdrproc_t);

File xdr_stdio.c:
void xdrstdio_create(XDR *, FILE *, enum xdr_op);
static void xdrstdio_destroy(XDR *);
static bool_t xdrstdio_getbytes(XDR *, const caddr_t, u_int);
static bool_t xdrstdio_getint32(XDR *, int32_t *);
static bool_t xdrstdio_getlong(XDR *, long int *);
static u_int xdrstdio_getpos(const XDR *);
static int32_t *xdrstdio_inline(XDR *, u_int);
static bool_t xdrstdio_putbytes(XDR *, const char *, u_int);
static bool_t xdrstdio_putint32(XDR *, const int32_t *);
static bool_t xdrstdio_putlong(XDR *, const long int *);
static bool_t xdrstdio_setpos(XDR *, u_int);

File publickey.c:
int getpublickey(const char *, char *);
int getsecretkey(const char *, char *, const char *);

File xdr_sizeof.c:
long unsigned int xdr_sizeof(xdrproc_t, void *);
static int harmless(void);
static void x_destroy(XDR *);
static u_int x_getpostn(const XDR *);
static int32_t *x_inline(XDR *, u_int);
static bool_t x_putbytes(XDR *, const char *, u_int);
static bool_t x_putint32(XDR *, const int32_t *);
static bool_t x_putlong(XDR *, const long int *);
static bool_t x_setpostn(XDR *, u_int);

File auth_des.c:
AUTH *authdes_create(const char *, u_int, struct sockaddr *, des_block *);
AUTH *authdes_pk_create(const char *, netobj *, u_int, struct sockaddr *, des_block *);
static void authdes_destroy(AUTH *);
static bool_t authdes_marshal(AUTH *, XDR *);
static void authdes_nextverf(AUTH *);
static bool_t authdes_refresh(AUTH *);
static bool_t authdes_validate(AUTH *, struct opaque_auth *);

File authdes_prot.c:
bool_t xdr_authdes_cred(XDR *, struct authdes_cred *);
bool_t xdr_authdes_verf(XDR *, struct authdes_verf *);

File key_call.c:
void __rpc_thread_key_cleanup(void);
int key_decryptsession(char *, des_block *);
int key_decryptsession_pk(char *, netobj *, des_block *);
int key_encryptsession(char *, des_block *);
int key_encryptsession_pk(char *, netobj *, des_block *);
int key_gendes(des_block *);
int key_get_conv(char *, des_block *);
int key_secretkey_is_set(void);
int key_setnet(struct key_netstarg *);
int key_setsecret(char *);
static CLIENT *getkeyserv_handle(int);
static int key_call(u_long, xdrproc_t, char *, xdrproc_t, char *);

File key_prot.c:
bool_t xdr_cryptkeyarg(XDR *, cryptkeyarg *);
bool_t xdr_cryptkeyarg2(XDR *, cryptkeyarg2 *);
bool_t xdr_cryptkeyres(XDR *, cryptkeyres *);
bool_t xdr_getcredres(XDR *, getcredres *);
bool_t xdr_key_netstarg(XDR *, key_netstarg *);
bool_t xdr_key_netstres(XDR *, key_netstres *);
bool_t xdr_keybuf(XDR *, char *);
bool_t xdr_keystatus(XDR *, keystatus *);
bool_t xdr_netnamestr(XDR *, netnamestr *);
bool_t xdr_unixcred(XDR *, unixcred *);

File netname.c:
int getnetname(char *);
int host2netname(char *, const char *, const char *);
int netname2host(const char *, char *, const int);
int netname2user(const char *, uid_t *, gid_t *, int *, gid_t *);
int user2netname(char *, const uid_t, const char *);

File openchild.c:
int _openchild(const char *, FILE **, FILE **);

File rtime.c:
int rtime(struct sockaddr_in *, struct rpc_timeval *, struct rpc_timeval *);

File svcauth_des.c:
enum auth_stat _svcauth_des(struct svc_req *, struct rpc_msg *);
int authdes_getucred(const struct authdes_cred *, uid_t *, gid_t *, short int *, gid_t *);

File clnt_unix.c:
CLIENT *clntunix_create(struct sockaddr_un *, u_long, u_long, int *, u_int, u_int);
static int __msgwrite(int, void *, size_t);
static void clntunix_abort(void);
static enum clnt_stat clntunix_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
static bool_t clntunix_control(CLIENT *, int, char *);
static void clntunix_destroy(CLIENT *);
static bool_t clntunix_freeres(CLIENT *, xdrproc_t, caddr_t);
static void clntunix_geterr(CLIENT *, struct rpc_err *);
static int readunix(char *, char *, int);
static int writeunix(char *, char *, int);

File svc_unix.c:
SVCXPRT *svcunix_create(int, u_int, u_int, char *);
SVCXPRT *svcunixfd_create(int, u_int, u_int);
static SVCXPRT *makefd_xprt(int, u_int, u_int);
static int readunix(char *, char *, int);
static bool_t rendezvous_request(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat rendezvous_stat(SVCXPRT *);
static void svcunix_destroy(SVCXPRT *);
static bool_t svcunix_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcunix_getargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcunix_recv(SVCXPRT *, struct rpc_msg *);
static void svcunix_rendezvous_abort(void);
static bool_t svcunix_reply(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat svcunix_stat(SVCXPRT *);
static int writeunix(char *, char *, int);

File create_xid.c:
long unsigned int _create_xid(void);

File xdr_intXX_t.c:
bool_t xdr_int16_t(XDR *, int16_t *);
bool_t xdr_int32_t(XDR *, int32_t *);
bool_t xdr_int64_t(XDR *, int64_t *);
bool_t xdr_int8_t(XDR *, int8_t *);
bool_t xdr_uint16_t(XDR *, uint16_t *);
bool_t xdr_uint32_t(XDR *, uint32_t *);
bool_t xdr_uint64_t(XDR *, uint64_t *);
bool_t xdr_uint8_t(XDR *, uint8_t *);

File xcrypt.c:
void passwd2des_internal(char *, char *);
int xdecrypt(char *, char *);
int xencrypt(char *, char *);
static void hex2bin(int, char *, char *);

File des_crypt.c:
int cbc_crypt(char *, char *, unsigned int, unsigned int, char *);
int ecb_crypt(char *, char *, unsigned int, unsigned int);
static int common_crypt(char *, char *, unsigned int, unsigned int, struct desparams *);

File des_impl.c:
int _des_crypt(char *, unsigned int, struct desparams *);
static void des_encrypt(long unsigned int *, long unsigned int *, int);

File des_soft.c:
void des_setparity(char *);

File nis_hash.c:
uint32_t __nis_hash(const void *, size_t);

File nscd_getpw_r.c:
int __nscd_getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
int __nscd_getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
static int nscd_getpw_r(const char *, size_t, request_type, struct passwd *, char *, size_t, struct passwd **);
static void pw_map_free(void);

File nscd_getgr_r.c:
int __nscd_getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
int __nscd_getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
static void gr_map_free(void);
static int nscd_getgr_r(const char *, size_t, request_type, struct group *, char *, size_t, struct group **);

File nscd_gethst_r.c:
int __nscd_gethostbyaddr_r(const void *, socklen_t, int, struct hostent *, char *, size_t, struct hostent **, int *);
int __nscd_gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, struct hostent **, int *);
int __nscd_gethostbyname_r(const char *, struct hostent *, char *, size_t, struct hostent **, int *);
static void hst_map_free(void);
static int nscd_gethst_r(const char *, size_t, request_type, struct hostent *, char *, size_t, struct hostent **, int *);

File nscd_getai.c:
int __nscd_getai(const char *, struct nscd_ai_result **, int *);

File nscd_initgroups.c:
int __nscd_getgrouplist(const char *, gid_t, long int *, gid_t **, long int);

File nscd_getserv_r.c:
int __nscd_getservbyname_r(const char *, const char *, struct servent *, char *, size_t, struct servent **);
int __nscd_getservbyport_r(int, const char *, struct servent *, char *, size_t, struct servent **);
static int nscd_getserv_r(const char *, size_t, const char *, request_type, struct servent *, char *, size_t, struct servent **);
static void serv_map_free(void);

File nscd_helper.c:
struct datahead *__nscd_cache_search(request_type, const char *, size_t, const struct mapped_database *, size_t);
struct mapped_database *__nscd_get_map_ref(request_type, const char *, volatile struct locked_map_ptr *, int *);
int __nscd_open_socket(const char *, size_t, request_type, void *, size_t);
void __nscd_unmap(struct mapped_database *);
ssize_t __readall(int, void *, size_t);
ssize_t __readvall(int, const struct iovec *, int);
static struct mapped_database *get_mapping(request_type, const char *, struct mapped_database **);
static int open_socket(request_type, const char *, size_t);
static int wait_on_socket(int, long int);

File isastream.c:
int isastream(int);

File ../sysdeps/unix/sysv/linux/i386/getmsg.c:
int getmsg(int, struct strbuf *, struct strbuf *, int *);

File ../sysdeps/unix/sysv/linux/i386/putmsg.c:
int putmsg(int, const struct strbuf *, const struct strbuf *, int);

File fattach.c:
int fattach(int, const char *);

File fdetach.c:
int fdetach(const char *);

File ../sysdeps/unix/bsd/getpt.c:
int __bsd_getpt(void);

File ../sysdeps/unix/sysv/linux/getpt.c:
int __getpt(void);
int __posix_openpt(int);

File ../sysdeps/unix/grantpt.c:
int grantpt(int);

File ../sysdeps/unix/sysv/linux/unlockpt.c:
int unlockpt(int);

File ../sysdeps/unix/sysv/linux/ptsname.c:
int __ptsname_internal(int, char *, size_t, struct stat64 *);
int __ptsname_r(int, char *, size_t);
char *ptsname(int);

File getutent.c:
struct utmp *__getutent(void);

File getutent_r.c:
void __endutent(void);
int __getutent_r(struct utmp *, struct utmp **);
struct utmp *__pututline(const struct utmp *);
void __setutent(void);
static void endutent_unknown(void);
static int getutent_r_unknown(struct utmp *, struct utmp **);
static int getutid_r_unknown(const struct utmp *, struct utmp *, struct utmp **);
static int getutline_r_unknown(const struct utmp *, struct utmp *, struct utmp **);
static struct utmp *pututline_unknown(const struct utmp *);
static int setutent_unknown(void);

File getutid.c:
struct utmp *__getutid(const struct utmp *);

File getutline.c:
struct utmp *__getutline(const struct utmp *);

File getutid_r.c:
int __getutid_r(const struct utmp *, struct utmp *, struct utmp **);

File getutline_r.c:
int __getutline_r(const struct utmp *, struct utmp *, struct utmp **);

File ../sysdeps/generic/utmp-equal.h:
static int __utmp_equal(const struct utmp *, const struct utmp *);

File ../login/utmp_file.c:
static void endutent_file(void);
static int getutent_r_file(struct utmp *, struct utmp **);
static int getutid_r_file(const struct utmp *, struct utmp *, struct utmp **);
static int getutline_r_file(const struct utmp *, struct utmp *, struct utmp **);
static int internal_getut_r(const struct utmp *, struct utmp *, _Bool *);
static struct utmp *pututline_file(const struct utmp *);
static int setutent_file(void);
static void timeout_handler(int);
static int updwtmp_file(const char *, const struct utmp *);

File utmpname.c:
int __utmpname(const char *);

File ../login/updwtmp.c:
void __updwtmp(const char *, const struct utmp *);

File setutxent.c:
void setutxent(void);

File getutxent.c:
struct utmpx *getutxent(void);

File endutxent.c:
void endutxent(void);

File getutxid.c:
struct utmpx *getutxid(const struct utmpx *);

File getutxline.c:
struct utmpx *getutxline(const struct utmpx *);

File pututxline.c:
struct utmpx *pututxline(const struct utmpx *);

File utmpxname.c:
int utmpxname(const char *);

File updwtmpx.c:
void updwtmpx(const char *, const struct utmpx *);

File ../sysdeps/gnu/getutmp.c:
void getutmp(const struct utmpx *, struct utmp *);

File dl-iteratephdr.c:
int __dl_iterate_phdr(int (*)(struct dl_phdr_info *, size_t, void *), void *);
static void cancel_handler(void *);

File dl-addr.c:
int _dl_addr(const void *, Dl_info *, struct link_map **, const Elf32_Sym **);
int _dl_addr_inside_object(struct link_map *, const Elf32_Addr);

File dl-profstub.c:
void _dl_mcount_wrapper(void *);
void _dl_mcount_wrapper_check(void *);

File dl-libc.c:
int __libc_dlclose(void *);
void *__libc_dlopen_mode(const char *, int);
void *__libc_dlsym(void *, const char *);
static int dlerror_run(void (*)(void *), void *);
static void do_dlclose(void *);
static void do_dlopen(void *);
static void do_dlsym(void *);
static void free_mem(void);

File dl-sym.c:
void *_dl_sym(void *, const char *, void *);
void *_dl_vsym(void *, const char *, const char *, void *);
static void call_dl_lookup(void *);
static void *do_sym(void *, const char *, void *, struct r_found_version *, int);

File dl-tsd.c:
void **__libc_dl_error_tsd(void);

File dl-altinit.c:
static void dlinit_alt(void);

File ../sysdeps/generic/unwind-dw2-fde-glibc.c:
fde *_Unwind_Find_FDE(void *, struct dwarf_eh_bases *);

File ../sysdeps/generic/unwind-dw2-fde.c:
fde *_Unwind_Find_registered_FDE(void *, struct dwarf_eh_bases *);
void __deregister_frame(void *);
void *__deregister_frame_info(void *);
void *__deregister_frame_info_bases(void *);
void __register_frame(void *);
void __register_frame_info(void *, struct object *);
void __register_frame_info_bases(void *, struct object *, void *, void *);
void __register_frame_info_table(void *, struct object *);
void __register_frame_info_table_bases(void *, struct object *, void *, void *);
void __register_frame_table(void *);

File ../sysdeps/generic/unwind-dw2-fde-glibc.c:
static int _Unwind_IteratePhdrCallback(struct dl_phdr_info *, size_t, void *);

File ../sysdeps/generic/unwind-dw2-fde.c:
static void add_fdes(struct object *, struct fde_accumulator *, fde *);

File ../sysdeps/generic/unwind-dw2-fde-glibc.c:
static _Unwind_Ptr base_from_cb_data(unsigned char, struct unw_eh_callback_data *);

File ../sysdeps/generic/unwind-dw2-fde.c:
static _Unwind_Ptr base_from_object(unsigned char, struct object *);
static size_t classify_object_over_fdes(struct object *, fde *);
static int fde_mixed_encoding_compare(struct object *, fde *, fde *);
static int fde_single_encoding_compare(struct object *, fde *, fde *);
static int fde_unencoded_compare(struct object *, fde *, fde *);
static void frame_heapsort(struct object *, fde_compare_t, struct fde_vector *);
static int get_cie_encoding(struct dwarf_cie *);
static fde *linear_search_fdes(struct object *, fde *, void *);
static fde *search_object(struct object *, void *);

File ../sysdeps/generic/unwind-dw2.c:
void *_Unwind_FindEnclosingFunction(void *);
_Unwind_Word _Unwind_GetCFA(struct _Unwind_Context *);
_Unwind_Ptr _Unwind_GetDataRelBase(struct _Unwind_Context *);
_Unwind_Word _Unwind_GetGR(struct _Unwind_Context *, int);
_Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context *);
void *_Unwind_GetLanguageSpecificData(struct _Unwind_Context *);
_Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context *);
_Unwind_Ptr _Unwind_GetTextRelBase(struct _Unwind_Context *);
void _Unwind_SetGR(struct _Unwind_Context *, int, _Unwind_Word);
void _Unwind_SetIP(struct _Unwind_Context *, _Unwind_Ptr);

File ../sysdeps/generic/framestate.c:
struct frame_state *__frame_state_for(void *, struct frame_state *);

File ../sysdeps/generic/unwind-dw2.c:
static void execute_cfa_program(const unsigned char *, const unsigned char *, struct _Unwind_Context *, _Unwind_FrameState *);
static struct frame_state *fallback_frame_state_for(void *, struct frame_state *);

File ../sysdeps/generic/unwind-pe.h:
_Unwind_Ptr base_of_encoded_value(unsigned char, struct _Unwind_Context *);
const unsigned char *read_encoded_value(struct _Unwind_Context *, unsigned char, const unsigned char *, _Unwind_Ptr *);
const unsigned char *read_encoded_value_with_base(unsigned char, _Unwind_Ptr, const unsigned char *, _Unwind_Ptr *);
const unsigned char *read_sleb128(const unsigned char *, _Unwind_Sword *);
const unsigned char *read_uleb128(const unsigned char *, _Unwind_Word *);
unsigned int size_of_encoded_value(unsigned char);

File rtld.c:
void **_dl_initial_error_catch_tsd(void);
static Elf32_Addr _dl_start(void *);

File ../sysdeps/unix/sysv/linux/dl-osinfo.h:
static void dl_fatal(const char *);

File rtld.c:
static void dl_main(const Elf32_Phdr *, Elf32_Word, Elf32_Addr *, Elf32_auxv_t *);
static void dlmopen_doit(void *);
static unsigned int do_preload(char *, struct link_map *, const char *);
static void *init_tls(void);
static void lookup_doit(void *);
static void map_doit(void *);
static void print_missing_version(int, const char *, const char *);
static void print_statistics(hp_timing_t *);
static void print_unresolved(int, const char *, const char *);
static void process_dl_audit(char *);
static void process_dl_debug(const char *);
static void process_envvars(enum mode *);
static void relocate_doit(void *);
static void rtld_lock_default_lock_recursive(void *);
static void rtld_lock_default_unlock_recursive(void *);
static void security_init(void);
static void version_check_doit(void *);

File dl-load.c:
size_t _dl_dst_count(const char *, int);
char *_dl_dst_substitute(struct link_map *, const char *, char *, int);
void _dl_init_paths(const char *);
struct link_map *_dl_map_object(struct link_map *, const char *, int, int, int, Lmid_t);
void _dl_rtld_di_serinfo(struct link_map *);
static struct link_map *_dl_map_object_from_fd(const char *, int, struct filebuf *, char *, struct link_map *, int, int, void **, Lmid_t);
static void add_name_to_object(struct link_map *, const char *);
static _Bool cache_rpath(struct link_map *, struct r_search_path_struct *, int, const char *);
static _Bool decompose_rpath(struct r_search_path_struct *, const char *, struct link_map *, const char *);
static char *expand_dynamic_string_token(struct link_map *, const char *);
static struct r_search_path_elem **fillin_rpath(char *, struct r_search_path_elem **, const char *, int, const char *, const char *);
static size_t is_dst(const char *, const char *, const char *, int, int);
static char *local_strdup(const char *);
static void lose(int, int, const char *, char *, struct link_map *, const char *, struct r_debug *);
static int open_path(const char *, size_t, int, struct r_search_path_struct *, char **, struct filebuf *, struct link_map *, int, _Bool *);
static int open_verify(const char *, struct filebuf *, struct link_map *, int, _Bool *, _Bool);
static void print_search_path(struct r_search_path_elem **, const char *, const char *);

File dl-cache.c:
int _dl_cache_libcmp(const char *, const char *);
const char *_dl_load_cache_lookup(const char *);
void _dl_unload_cache(void);

File dl-lookup.c:
lookup_t _dl_lookup_symbol_x(const char *, struct link_map *, const Elf32_Sym **, struct r_scope_elem **, const struct r_found_version *, int, int, struct link_map *);
void _dl_setup_hash(struct link_map *);
static int do_lookup_x(uint_fast32_t, long unsigned int *, const Elf32_Sym *, struct sym_val *, struct r_scope_elem *, size_t, int, struct link_map *, struct link_map *);

File dl-object.c:
struct link_map *_dl_new_object(char *, const char *, int, struct link_map *, int, Lmid_t);

File dl-reloc.c:
void _dl_allocate_static_tls(struct link_map *);
void _dl_nothread_init_static_tls(struct link_map *);
void _dl_protect_relro(struct link_map *);
void _dl_reloc_bad_type(struct link_map *, unsigned int, int);
void _dl_relocate_object(struct r_scope_elem **, int, int);
int _dl_try_allocate_static_tls(struct link_map *);

File dl-deps.c:
void _dl_map_object_deps(struct link_map *, struct link_map **, unsigned int, int, int);
static ptrdiff_t _dl_build_local_scope(struct link_map **, struct link_map *);
static void openaux(void *);

File dl-runtime.c:
void _dl_call_pltexit(struct link_map *, Elf32_Word, const void *, void *);
Elf32_Addr _dl_fixup(struct link_map *, Elf32_Word);
Elf32_Addr _dl_profile_fixup(struct link_map *, Elf32_Word, Elf32_Addr, void *, long int *);

File dl-error.c:
int _dl_catch_error(const char **, const char **, _Bool *, void (*)(void *), void *);
void _dl_receive_error(receiver_fct, void (*)(void *), void *);
void _dl_signal_cerror(int, const char *, const char *, const char *);
void _dl_signal_error(int, const char *, const char *, const char *);

File dl-init.c:
void _dl_init(struct link_map *, int, char **, char **);
static void call_init(struct link_map *, int, char **, char **);

File dl-fini.c:
void _dl_fini(void);
void _dl_sort_fini(struct link_map *, struct link_map **, size_t, char *, Lmid_t);

File dl-debug.c:
struct r_debug *_dl_debug_initialize(Elf32_Addr, Lmid_t);
void _dl_debug_state(void);

File dl-misc.c:
void _dl_debug_printf(const char *, ...);
void _dl_debug_printf_c(const char *, ...);
void _dl_dprintf(int, const char *, ...);
long unsigned int _dl_higher_prime_number(long unsigned int);
int _dl_name_match_p(const char *, const struct link_map *);
void *_dl_sysdep_read_whole_file(const char *, size_t *, int);
static void _dl_debug_vdprintf(int, int, const char *, va_list);

File dl-version.c:
int _dl_check_all_versions(struct link_map *, int, int);
int _dl_check_map_versions(struct link_map *, int, int);
static int match_symbol(const char *, Lmid_t, Elf32_Word, const char *, struct link_map *, int, int);

File dl-profile.c:
void _dl_mcount(Elf32_Addr, Elf32_Addr);
void _dl_start_profile(void);

File dl-conflict.c:
void _dl_resolve_conflicts(struct link_map *, Elf32_Rela *, Elf32_Rela *);

File dl-tls.c:
void *___tls_get_addr(tls_index *);

File ../sysdeps/i386/dl-tls.h:
void *__tls_get_addr(tls_index *);

File dl-tls.c:
void _dl_add_to_slotinfo(struct link_map *);
void *_dl_allocate_tls(void *);
void *_dl_allocate_tls_init(void *);
void *_dl_allocate_tls_storage(void);
void _dl_deallocate_tls(void *, _Bool);
void _dl_determine_tlsoffset(void);
void _dl_get_tls_static_info(size_t *, size_t *);
size_t _dl_next_tls_modid(void);
void *_dl_tls_get_addr_soft(struct link_map *);
int _dl_tls_setup(void);
struct link_map *_dl_update_slotinfo(long unsigned int);
static void oom(void);
static void *tls_get_addr_tail(dtv_t *, struct link_map *, size_t);

File ../sysdeps/unix/sysv/linux/dl-origin.c:
const char *_dl_get_origin(void);

File dl-scope.c:
int _dl_scope_free(void *);

File ../sysdeps/unix/sysv/linux/dl-execstack.c:
int _dl_make_stack_executable(void **);

File dl-caller.c:
int _dl_check_caller(const void *, enum allowmask);

File dl-open.c:
int _dl_addr_inside_object(struct link_map *, const Elf32_Addr);
void *_dl_open(const char *, int, const void *, Lmid_t, int, char **, char **);
static int add_to_global(struct link_map *);
static void dl_open_worker(void *);

File dl-close.c:
void _dl_close(void *);
void _dl_close_worker(struct link_map *);
static void free_mem(void);
static _Bool free_slotinfo(struct dtv_slotinfo_list **);
static _Bool remove_slotinfo(size_t, struct dtv_slotinfo_list *, size_t, _Bool);

File ../sysdeps/unix/sysv/linux/dl-sysdep.c:
int _dl_discover_osversion(void);

File ../elf/dl-sysdep.c:
const struct r_strlenpair *_dl_important_hwcaps(const char *, size_t, size_t *, size_t *);
void _dl_show_auxv(void);
Elf32_Addr _dl_sysdep_start(void **, void (*)(const Elf32_Phdr *, Elf32_Word, Elf32_Addr *, Elf32_auxv_t *));
void _dl_sysdep_start_cleanup(void);

File dl-environ.c:
char *_dl_next_ld_env_entry(char ***);
int unsetenv(const char *);

File dl-minimal.c:
void __assert_fail(const char *, const char *, unsigned int, const char *);
void __assert_perror_fail(int, const char *, unsigned int, const char *);
void __chk_fail(void);
void *__libc_memalign(size_t, size_t);
int __sigjmp_save(struct __jmp_buf_tag *, int);
char *__strerror_r(int, char *, size_t);
char *__strsep(char **, const char *);
long unsigned int __strtoul_internal(const char *, char **, int, int);
char *_itoa(long long unsigned int, char *, unsigned int, int);
void *calloc(size_t, size_t);
void free(void *);
void *malloc(size_t);
void *realloc(void *, size_t);

File ../sysdeps/unix/sysv/linux/i386/brk.c:
int __brk(void *);

File ../misc/sbrk.c:
void *__sbrk(intptr_t);

File ./tlsdeschtab.h:
void *_dl_make_tlsdesc_dynamic(struct link_map *, size_t);

File ../sysdeps/i386/tlsdesc.c:
void _dl_tlsdesc_resolve_abs_plus_addend_fixup(volatile struct tlsdesc *, struct link_map *, ptrdiff_t);
void _dl_tlsdesc_resolve_hold_fixup(volatile struct tlsdesc *, struct link_map *, ptrdiff_t);
void _dl_tlsdesc_resolve_rel_fixup(volatile struct tlsdesc *, struct link_map *, ptrdiff_t);
void _dl_tlsdesc_resolve_rela_fixup(volatile struct tlsdesc *, struct link_map *, ptrdiff_t);
void _dl_unmap(struct link_map *);

File ./tlsdeschtab.h:
static int eq_tlsdesc(void *, void *);
static int hash_tlsdesc(void *);

File check_fds.c:
void __libc_check_standard_fds(void);
static void check_one_fd(int, int);

File ../sysdeps/wordsize-32/divdi3.c:
DItype __divdi3(DItype, DItype);
DItype __moddi3(DItype, DItype);
UDItype __udivdi3(UDItype, UDItype);
UDItype __umoddi3(UDItype, UDItype);
static UDItype __udivmoddi4(UDItype, UDItype, UDItype *);

File ../sysdeps/posix/profil.c:
int __profil(u_short *, size_t, size_t, u_int);

File ../sysdeps/unix/sysv/linux/i386/profil-counter.h:
static void profil_counter(int, const struct sigcontext);

File ../sysdeps/unix/sysv/linux/prof-freq.c:
int __profile_frequency(void);

File ../sysdeps/unix/sysv/linux/xstat64.c:
int ___xstat64(int, const char *, struct stat64 *);

File ../sysdeps/unix/sysv/linux/fxstat64.c:
int ___fxstat64(int, int, struct stat64 *);

File ../sysdeps/unix/sysv/linux/i386/fcntl.c:
int __libc_fcntl(int, int, ...);

File ../sysdeps/unix/sysv/linux/getcwd.c:
char *__getcwd(char *, size_t);

File ../nptl/sysdeps/unix/sysv/linux/getpid.c:
pid_t __getpid(void);

File ../sysdeps/unix/sysv/linux/i386/sigaction.c:
int __libc_sigaction(int, const struct sigaction *, struct sigaction *);

File ../nptl/sigaction.c:
int __sigaction(int, const struct sigaction *, struct sigaction *);

File strcpy.c:
char *strcpy(char *, const char *);

File strnlen.c:
size_t __strnlen(const char *, size_t);

Non-debugging symbols:
0x0805deac  fileno@plt
0x0805debc  fmod
0x0805debc  fmod@plt
0x0805decc  abort@plt
0x0805dedc  __errno_location@plt
0x0805deec  semget@plt
0x0805defc  endservent@plt
0x0805df0c  sigemptyset@plt
0x0805df1c  connect
0x0805df1c  connect@plt
0x0805df2c  setgroups@plt
0x0805df3c  getpid
0x0805df3c  getpid@plt
0x0805df4c  localeconv
0x0805df4c  localeconv@plt
0x0805df5c  setregid
0x0805df5c  setregid@plt
0x0805df6c  mkdir
0x0805df6c  mkdir@plt
0x0805df7c  dirfd@plt
0x0805df8c  srand48@plt
0x0805df9c  strerror@plt
0x0805dfac  getsockname
0x0805dfac  getsockname@plt
0x0805dfbc  sysconf
0x0805dfbc  sysconf@plt
0x0805dfcc  memcmp
0x0805dfcc  memcmp@plt
0x0805dfdc  drand48@plt
0x0805dfec  qsort@plt
0x0805dffc  __longjmp_chk@plt
0x0805e00c  setlinebuf@plt
0x0805e01c  shutdown
0x0805e01c  shutdown@plt
0x0805e02c  open64
0x0805e02c  open64@plt
0x0805e03c  gcvt
0x0805e03c  gcvt@plt
0x0805e04c  msgget@plt
0x0805e05c  signal
0x0805e05c  signal@plt
0x0805e06c  getnetbyaddr@plt
0x0805e07c  syscall
0x0805e07c  syscall@plt
0x0805e08c  sigismember@plt
0x0805e09c  __gmon_start__
0x0805e09c  __gmon_start__@plt
0x0805e0ac  realloc@plt
0x0805e0bc  unsetenv@plt
0x0805e0cc  __xstat64
0x0805e0cc  __xstat64@plt
0x0805e0dc  localtime@plt
0x0805e0ec  setservent@plt
0x0805e0fc  getgrnam@plt
0x0805e10c  strtod@plt
0x0805e11c  socketpair
0x0805e11c  socketpair@plt
0x0805e12c  strxfrm@plt
0x0805e13c  strchr
0x0805e13c  strchr@plt
0x0805e14c  endhostent@plt
0x0805e15c  getenv@plt
0x0805e16c  calloc@plt
0x0805e17c  endnetent@plt
0x0805e18c  setnetent@plt
0x0805e19c  shmat@plt
0x0805e1ac  fchown
0x0805e1ac  fchown@plt
0x0805e1bc  write
0x0805e1bc  write@plt
0x0805e1cc  sendto
0x0805e1cc  sendto@plt
0x0805e1dc  semop@plt
0x0805e1ec  pow
0x0805e1ec  pow@plt
0x0805e1fc  listen
0x0805e1fc  listen@plt
0x0805e20c  dlclose
0x0805e20c  dlclose@plt
0x0805e21c  rename
0x0805e21c  rename@plt
0x0805e22c  getlogin@plt
0x0805e23c  memset
0x0805e23c  memset@plt
0x0805e24c  fopen64
0x0805e24c  fopen64@plt
0x0805e25c  getprotobyname@plt
0x0805e26c  __libc_start_main@plt
0x0805e27c  getspnam@plt
0x0805e28c  execl@plt
0x0805e29c  floor
0x0805e29c  floor@plt
0x0805e2ac  __memcpy_chk
0x0805e2ac  __memcpy_chk@plt
0x0805e2bc  _exit
0x0805e2bc  _exit@plt
0x0805e2cc  strrchr
0x0805e2cc  strrchr@plt
0x0805e2dc  modf
0x0805e2dc  modf@plt
0x0805e2ec  fseeko64@plt
0x0805e2fc  chmod
0x0805e2fc  chmod@plt
0x0805e30c  __assert_fail@plt
0x0805e31c  sethostent@plt
0x0805e32c  __vsnprintf_chk
0x0805e32c  __vsnprintf_chk@plt
0x0805e33c  setegid@plt
0x0805e34c  read
0x0805e34c  read@plt
0x0805e35c  msgsnd
0x0805e35c  msgsnd@plt
0x0805e36c  exp
0x0805e36c  exp@plt
0x0805e37c  ungetc
0x0805e37c  ungetc@plt
0x0805e38c  gettimeofday
0x0805e38c  gettimeofday@plt
0x0805e39c  strtol@plt
0x0805e3ac  fdopen
0x0805e3ac  fdopen@plt
0x0805e3bc  getservbyport@plt
0x0805e3cc  __ctype_toupper_loc@plt
0x0805e3dc  free@plt
0x0805e3ec  shmctl
0x0805e3ec  shmctl@plt
0x0805e3fc  __lxstat64
0x0805e3fc  __lxstat64@plt
0x0805e40c  setresuid
0x0805e40c  setresuid@plt
0x0805e41c  getprotobynumber@plt
0x0805e42c  setpgid
0x0805e42c  setpgid@plt
0x0805e43c  shmdt@plt
0x0805e44c  access
0x0805e44c  access@plt
0x0805e45c  semctl
0x0805e45c  semctl@plt
0x0805e46c  dlsym
0x0805e46c  dlsym@plt
0x0805e47c  truncate64@plt
0x0805e48c  setresgid
0x0805e48c  setresgid@plt
0x0805e49c  sigaction
0x0805e49c  sigaction@plt
0x0805e4ac  setpriority
0x0805e4ac  setpriority@plt
0x0805e4bc  fflush
0x0805e4bc  fflush@plt
0x0805e4cc  sqrt
0x0805e4cc  sqrt@plt
0x0805e4dc  opendir
0x0805e4dc  opendir@plt
0x0805e4ec  accept
0x0805e4ec  accept@plt
0x0805e4fc  symlink
0x0805e4fc  symlink@plt
0x0805e50c  ioctl
0x0805e50c  ioctl@plt
0x0805e51c  socket
0x0805e51c  socket@plt
0x0805e52c  dup2
0x0805e52c  dup2@plt
0x0805e53c  __ctype_b_loc@plt
0x0805e54c  getpriority@plt
0x0805e55c  isatty
0x0805e55c  isatty@plt
0x0805e56c  umask
0x0805e56c  umask@plt
0x0805e57c  fclose
0x0805e57c  fclose@plt
0x0805e58c  ftello64@plt
0x0805e59c  telldir@plt
0x0805e5ac  dup
0x0805e5ac  dup@plt
0x0805e5bc  mktime@plt
0x0805e5cc  getservent@plt
0x0805e5dc  readdir64
0x0805e5dc  readdir64@plt
0x0805e5ec  memcpy
0x0805e5ec  memcpy@plt
0x0805e5fc  execv@plt
0x0805e60c  strtoul@plt
0x0805e61c  execvp@plt
0x0805e62c  strlen
0x0805e62c  strlen@plt
0x0805e63c  getnetbyname@plt
0x0805e64c  cos
0x0805e64c  cos@plt
0x0805e65c  setgrent@plt
0x0805e66c  futimes
0x0805e66c  futimes@plt
0x0805e67c  alarm
0x0805e67c  alarm@plt
0x0805e68c  unlink
0x0805e68c  unlink@plt
0x0805e69c  getpwuid@plt
0x0805e6ac  getppid
0x0805e6ac  getppid@plt
0x0805e6bc  setlocale@plt
0x0805e6cc  waitpid
0x0805e6cc  waitpid@plt
0x0805e6dc  clearerr@plt
0x0805e6ec  __h_errno_location@plt
0x0805e6fc  fgetc
0x0805e6fc  fgetc@plt
0x0805e70c  feof
0x0805e70c  feof@plt
0x0805e71c  chroot
0x0805e71c  chroot@plt
0x0805e72c  getegid
0x0805e72c  getegid@plt
0x0805e73c  dlopen
0x0805e73c  dlopen@plt
0x0805e74c  killpg@plt
0x0805e75c  chdir
0x0805e75c  chdir@plt
0x0805e76c  div@plt
0x0805e77c  bind
0x0805e77c  bind@plt
0x0805e78c  getuid
0x0805e78c  getuid@plt
0x0805e79c  gethostbyaddr@plt
0x0805e7ac  endprotoent@plt
0x0805e7bc  putenv@plt
0x0805e7cc  mkstemp64@plt
0x0805e7dc  getgrent@plt
0x0805e7ec  select
0x0805e7ec  select@plt
0x0805e7fc  closedir
0x0805e7fc  closedir@plt
0x0805e80c  close
0x0805e80c  close@plt
0x0805e81c  fwrite
0x0805e81c  fwrite@plt
0x0805e82c  rewinddir@plt
0x0805e83c  eaccess
0x0805e83c  eaccess@plt
0x0805e84c  frexp
0x0805e84c  frexp@plt
0x0805e85c  getprotoent@plt
0x0805e86c  strstr
0x0805e86c  strstr@plt
0x0805e87c  time@plt
0x0805e88c  ftruncate64
0x0805e88c  ftruncate64@plt
0x0805e89c  nl_langinfo@plt
0x0805e8ac  malloc@plt
0x0805e8bc  sigprocmask
0x0805e8bc  sigprocmask@plt
0x0805e8cc  setpwent@plt
0x0805e8dc  getnetent@plt
0x0805e8ec  chown
0x0805e8ec  chown@plt
0x0805e8fc  __stack_chk_fail@plt
0x0805e90c  msgctl
0x0805e90c  msgctl@plt
0x0805e91c  setprotoent@plt
0x0805e92c  getpgid
0x0805e92c  getpgid@plt
0x0805e93c  atan2
0x0805e93c  atan2@plt
0x0805e94c  rmdir
0x0805e94c  rmdir@plt
0x0805e95c  dlerror
0x0805e95c  dlerror@plt
0x0805e96c  __isnan@plt
0x0805e97c  seekdir@plt
0x0805e98c  getgrgid@plt
0x0805e99c  sleep
0x0805e99c  sleep@plt
0x0805e9ac  sigaddset@plt
0x0805e9bc  readlink
0x0805e9bc  readlink@plt
0x0805e9cc  msgrcv
0x0805e9cc  msgrcv@plt
0x0805e9dc  memmove
0x0805e9dc  memmove@plt
0x0805e9ec  setreuid
0x0805e9ec  setreuid@plt
0x0805e9fc  __ctype_tolower_loc@plt
0x0805ea0c  pause
0x0805ea0c  pause@plt
0x0805ea1c  send
0x0805ea1c  send@plt
0x0805ea2c  getcwd
0x0805ea2c  getcwd@plt
0x0805ea3c  prctl
0x0805ea3c  prctl@plt
0x0805ea4c  log
0x0805ea4c  log@plt
0x0805ea5c  fork
0x0805ea5c  fork@plt
0x0805ea6c  __fxstat64
0x0805ea6c  __fxstat64@plt
0x0805ea7c  setsockopt
0x0805ea7c  setsockopt@plt
0x0805ea8c  gethostent@plt
0x0805ea9c  fcntl
0x0805ea9c  fcntl@plt
0x0805eaac  endpwent@plt
0x0805eabc  flock
0x0805eabc  flock@plt
0x0805eacc  utimes
0x0805eacc  utimes@plt
0x0805eadc  getgroups
0x0805eadc  getgroups@plt
0x0805eaec  memchr
0x0805eaec  memchr@plt
0x0805eafc  strncmp
0x0805eafc  strncmp@plt
0x0805eb0c  crypt@plt
0x0805eb1c  link
0x0805eb1c  link@plt
0x0805eb2c  __snprintf_chk
0x0805eb2c  __snprintf_chk@plt
0x0805eb3c  munmap
0x0805eb3c  munmap@plt
0x0805eb4c  pipe
0x0805eb4c  pipe@plt
0x0805eb5c  fchdir
0x0805eb5c  fchdir@plt
0x0805eb6c  fread
0x0805eb6c  fread@plt
0x0805eb7c  getsockopt
0x0805eb7c  getsockopt@plt
0x0805eb8c  seteuid@plt
0x0805eb9c  strftime@plt
0x0805ebac  kill
0x0805ebac  kill@plt
0x0805ebbc  mmap64
0x0805ebbc  mmap64@plt
0x0805ebcc  times
0x0805ebcc  times@plt
0x0805ebdc  getpwent@plt
0x0805ebec  sin
0x0805ebec  sin@plt
0x0805ebfc  getpeername
0x0805ebfc  getpeername@plt
0x0805ec0c  gethostbyname@plt
0x0805ec1c  recvfrom
0x0805ec1c  recvfrom@plt
0x0805ec2c  ferror
0x0805ec2c  ferror@plt
0x0805ec3c  getpwnam@plt
0x0805ec4c  lseek64
0x0805ec4c  lseek64@plt
0x0805ec5c  strcmp
0x0805ec5c  strcmp@plt
0x0805ec6c  __sigsetjmp
0x0805ec6c  __sigsetjmp@plt
0x0805ec7c  getservbyname@plt
0x0805ec8c  exit@plt
0x0805ec9c  endgrent@plt
0x0805ecac  fchmod
0x0805ecac  fchmod@plt
0x0805ecbc  freopen64@plt
0x0805eccc  getgid
0x0805eccc  getgid@plt
0x0805ecdc  shmget@plt
0x0805ecec  ceil
0x0805ecec  ceil@plt
0x0805ecfc  geteuid
0x0805ecfc  geteuid@plt
0x0805ed10  _start
0x0805ed40  __do_global_dtors_aux
0x0805eda0  frame_dummy
0x08255fd0  __libc_csu_fini
0x08255fe0  __libc_csu_init
0x0825603a  __i686.get_pc_thunk.bx
0x082561c0  __do_global_ctors_aux
0x082561ec  _fini
0x00cbd190  __do_global_dtors_aux
0x00cbd210  frame_dummy
0x00cbd247  __i686.get_pc_thunk.bx
0x00cc067a  __i686.get_pc_thunk.cx
0x00cc9db0  __do_global_ctors_aux
0x00cc9de8  _fini
0x00cbcaf8  fputs
0x00cbcaf8  fputs@plt
0x00cbcb08  abort@plt
0x00cbcb18  __errno_location@plt
0x00cbcb28  svcerr_systemerr@plt
0x00cbcb38  open
0x00cbcb38  open@plt
0x00cbcb48  xdr_uint32_t@plt
0x00cbcb58  getpid
0x00cbcb58  getpid@plt
0x00cbcb68  getsockname
0x00cbcb68  getsockname@plt
0x00cbcb78  inet_ntoa@plt
0x00cbcb88  syslog
0x00cbcb88  syslog@plt
0x00cbcb98  __poll@plt
0x00cbcba8  key_secretkey_is_set@plt
0x00cbcbb8  clnttcp_create@plt
0x00cbcbc8  xdr_u_char@plt
0x00cbcbd8  pread
0x00cbcbd8  pread@plt
0x00cbcbe8  __gmon_start__
0x00cbcbe8  __gmon_start__@plt
0x00cbcbf8  realloc@plt
0x00cbcc08  __getdelim
0x00cbcc08  __getdelim@plt
0x00cbcc18  __xstat64
0x00cbcc18  __xstat64@plt
0x00cbcc28  __dcgettext@plt
0x00cbcc38  strchr
0x00cbcc38  strchr@plt
0x00cbcc48  getenv@plt
0x00cbcc58  calloc@plt
0x00cbcc68  inet_addr@plt
0x00cbcc78  svc_register@plt
0x00cbcc88  strncpy@plt
0x00cbcc98  __pthread_once
0x00cbcc98  __pthread_once@plt
0x00cbcca8  svcudp_bufcreate@plt
0x00cbccb8  mempcpy
0x00cbccb8  mempcpy@plt
0x00cbccc8  authdes_pk_create@plt
0x00cbccd8  stpcpy
0x00cbccd8  stpcpy@plt
0x00cbcce8  xdr_bool@plt
0x00cbccf8  __asprintf
0x00cbccf8  __asprintf@plt
0x00cbcd08  rawmemchr
0x00cbcd08  rawmemchr@plt
0x00cbcd18  xdr_int@plt
0x00cbcd28  __assert_fail@plt
0x00cbcd38  authunix_create_default@plt
0x00cbcd48  perror@plt
0x00cbcd58  xdr_opaque@plt
0x00cbcd68  gettimeofday
0x00cbcd68  gettimeofday@plt
0x00cbcd78  strtol@plt
0x00cbcd88  free@plt
0x00cbcd98  dcgettext
0x00cbcd98  dcgettext@plt
0x00cbcda8  get_myaddress@plt
0x00cbcdb8  xprt_unregister@plt
0x00cbcdc8  ioctl
0x00cbcdc8  ioctl@plt
0x00cbcdd8  socket
0x00cbcdd8  socket@plt
0x00cbcde8  __ctype_b_loc@plt
0x00cbcdf8  fclose
0x00cbcdf8  fclose@plt
0x00cbce08  __rpc_thread_svc_pollfd@plt
0x00cbce18  xdr_enum@plt
0x00cbce28  __pthread_mutex_lock
0x00cbce28  __pthread_mutex_lock@plt
0x00cbce38  clntudp_create@plt
0x00cbce48  memcpy
0x00cbce48  memcpy@plt
0x00cbce58  strlen
0x00cbce58  strlen@plt
0x00cbce68  fopen
0x00cbce68  fopen@plt
0x00cbce78  getdomainname@plt
0x00cbce88  __pthread_mutex_unlock
0x00cbce88  __pthread_mutex_unlock@plt
0x00cbce98  asprintf
0x00cbce98  asprintf@plt
0x00cbcea8  strcpy@plt
0x00cbceb8  printf
0x00cbceb8  printf@plt
0x00cbcec8  ctime@plt
0x00cbced8  xdr_bytes@plt
0x00cbcee8  __rpc_thread_svc_max_pollfd@plt
0x00cbcef8  svcerr_decode@plt
0x00cbcf08  close
0x00cbcf08  close@plt
0x00cbcf18  fwrite
0x00cbcf18  fwrite@plt
0x00cbcf28  xdr_string@plt
0x00cbcf38  fprintf
0x00cbcf38  fprintf@plt
0x00cbcf48  strstr
0x00cbcf48  strstr@plt
0x00cbcf58  time@plt
0x00cbcf68  xdr_free@plt
0x00cbcf78  malloc@plt
0x00cbcf88  gethostname
0x00cbcf88  gethostname@plt
0x00cbcf98  authdes_create@plt
0x00cbcfa8  fputc@plt
0x00cbcfb8  xdr_netobj@plt
0x00cbcfc8  xdr_sizeof@plt
0x00cbcfd8  xdr_u_int@plt
0x00cbcfe8  __libc_clntudp_bufcreate@plt
0x00cbcff8  xdrmem_create@plt
0x00cbd008  svc_sendreply@plt
0x00cbd018  svctcp_create@plt
0x00cbd028  clnt_pcreateerror@plt
0x00cbd038  memmove
0x00cbd038  memmove@plt
0x00cbd048  __strndup@plt
0x00cbd058  puts
0x00cbd058  puts@plt
0x00cbd068  host2netname@plt
0x00cbd078  fcntl
0x00cbd078  fcntl@plt
0x00cbd088  clnt_create@plt
0x00cbd098  clnt_perror@plt
0x00cbd0a8  strncmp
0x00cbd0a8  strncmp@plt
0x00cbd0b8  xdr_array@plt
0x00cbd0c8  snprintf
0x00cbd0c8  snprintf@plt
0x00cbd0d8  svcerr_noproc@plt
0x00cbd0e8  strcmp
0x00cbd0e8  strcmp@plt
0x00cbd0f8  clntudp_bufcreate@plt
0x00cbd108  key_gendes@plt
0x00cbd118  __cxa_finalize@plt
0x00cbd128  svc_getreq_poll@plt
0x00cbd138  __strdup@plt
0x00cbd148  xdrstdio_create@plt
0x00cbd158  exit@plt
0x00cbd168  xdr_pointer@plt
0x00cbd178  geteuid
0x00cbd178  geteuid@plt
0x0080ca40  __do_global_dtors_aux
0x0080cac0  frame_dummy
0x0080caf7  __i686.get_pc_thunk.bx
0x0080d812  __i686.get_pc_thunk.cx
0x0080d950  __do_global_ctors_aux
0x0080d988  _fini
0x0080c940  _dl_vsym@plt
0x0080c950  strerror@plt
0x0080c960  __gmon_start__
0x0080c960  __gmon_start__@plt
0x0080c970  __dcgettext@plt
0x0080c980  calloc@plt
0x0080c990  __pthread_once
0x0080c990  __pthread_once@plt
0x0080c9a0  __asprintf
0x0080c9a0  __asprintf@plt
0x0080c9b0  free@plt
0x0080c9c0  _dl_sym@plt
0x0080c9d0  _dl_addr@plt
0x0080c9e0  _dl_rtld_di_serinfo@plt
0x0080c9f0  strcpy@plt
0x0080ca00  __pthread_key_create
0x0080ca00  __pthread_key_create@plt
0x0080ca10  __pthread_getspecific
0x0080ca10  __pthread_getspecific@plt
0x0080ca20  __pthread_setspecific
0x0080ca20  __pthread_setspecific@plt
0x0080ca30  __cxa_finalize@plt
0x0035f4b0  __do_global_dtors_aux
0x0035f530  frame_dummy
0x00377d30  __mulsc3
0x00378220  __muldc3
0x00378740  __mulxc3
0x00378c50  __divsc3
0x00379020  __divdc3
0x003793f0  __divxc3
0x003797c0  __do_global_ctors_aux
0x003797f8  _fini
0x0035f3d4  fputs
0x0035f3d4  fputs@plt
0x0035f3e4  __errno_location@plt
0x0035f3f4  sprintf
0x0035f3f4  sprintf@plt
0x0035f404  __gmon_start__
0x0035f404  __gmon_start__@plt
0x0035f414  strtod@plt
0x0035f424  __assert_fail@plt
0x0035f434  __get_cpu_features@plt
0x0035f444  strlen
0x0035f444  strlen@plt
0x0035f454  strtof@plt
0x0035f464  fwrite
0x0035f464  fwrite@plt
0x0035f474  strtold@plt
0x0035f484  matherr
0x0035f484  matherr@plt
0x0035f494  __cxa_finalize@plt
0x00818750  __do_global_dtors_aux
0x008187d0  frame_dummy
0x00818807  __i686.get_pc_thunk.bx
0x0081ecf0  __do_global_ctors_aux
0x0081ed28  _fini
0x00818644  __errno_location@plt
0x00818654  __gmon_start__
0x00818654  __gmon_start__@plt
0x00818664  realloc@plt
0x00818674  strncpy@plt
0x00818684  memset
0x00818684  memset@plt
0x00818694  __assert_fail@plt
0x008186a4  __pthread_mutex_lock
0x008186a4  __pthread_mutex_lock@plt
0x008186b4  memcpy
0x008186b4  memcpy@plt
0x008186c4  strtoul@plt
0x008186d4  strlen
0x008186d4  strlen@plt
0x008186e4  __pthread_mutex_unlock
0x008186e4  __pthread_mutex_unlock@plt
0x008186f4  __stpncpy
0x008186f4  __stpncpy@plt
0x00818704  fread
0x00818704  fread@plt
0x00818714  snprintf
0x00818714  snprintf@plt
0x00818724  ferror
0x00818724  ferror@plt
0x00818734  __cxa_finalize@plt
0x006e4a00  __do_global_dtors_aux
0x006e4a80  frame_dummy
0x006e4ab7  __i686.get_pc_thunk.bx
0x006e5270  __do_global_ctors_aux
0x006e52a8  _fini
0x006e480c  __errno_location@plt
0x006e481c  open
0x006e481c  open@plt
0x006e482c  basename@plt
0x006e483c  getpid
0x006e483c  getpid@plt
0x006e484c  __gmon_start__
0x006e484c  __gmon_start__@plt
0x006e485c  realloc@plt
0x006e486c  strncpy@plt
0x006e487c  setsid
0x006e487c  setsid@plt
0x006e488c  _exit
0x006e488c  _exit@plt
0x006e489c  free@plt
0x006e48ac  ioctl
0x006e48ac  ioctl@plt
0x006e48bc  dup2
0x006e48bc  dup2@plt
0x006e48cc  strcpy@plt
0x006e48dc  __gettimeofday
0x006e48dc  __gettimeofday@plt
0x006e48ec  getutline_r
0x006e48ec  getutline_r@plt
0x006e48fc  close
0x006e48fc  close@plt
0x006e490c  malloc@plt
0x006e491c  endutent
0x006e491c  endutent@plt
0x006e492c  ptsname_r
0x006e492c  ptsname_r@plt
0x006e493c  fork
0x006e493c  fork@plt
0x006e494c  utmpname
0x006e494c  utmpname@plt
0x006e495c  tcsetattr@plt
0x006e496c  updwtmp
0x006e496c  updwtmp@plt
0x006e497c  memchr
0x006e497c  memchr@plt
0x006e498c  setutent
0x006e498c  setutent@plt
0x006e499c  unlockpt@plt
0x006e49ac  grantpt@plt
0x006e49bc  __cxa_finalize@plt
0x006e49cc  getpt
0x006e49cc  getpt@plt
0x006e49dc  pututline
0x006e49dc  pututline@plt
0x006e49ec  ttyname_r
0x006e49ec  ttyname_r@plt
0x00126a38  calloc@plt
0x00126a48  realloc@plt
0x00126a58  feof
0x00126a58  feof@plt
0x00126a68  malloc@plt
0x00126a78  ___tls_get_addr@plt
0x00126a88  memalign
0x00126a88  memalign@plt
0x00126a98  free@plt
0x00126aa8  _Unwind_Find_FDE@plt
0x00d6d7cc  __libc_memalign@plt
0x00d6d7dc  malloc@plt
0x00d6d7ec  calloc@plt
0x00d6d7fc  realloc@plt
0x00d6d80c  ___tls_get_addr@plt
0x00d6d81c  free@plt
0x004c7400  __kernel_sigreturn
0x004c740c  __kernel_rt_sigreturn
0x004c7414  __kernel_vsyscall
